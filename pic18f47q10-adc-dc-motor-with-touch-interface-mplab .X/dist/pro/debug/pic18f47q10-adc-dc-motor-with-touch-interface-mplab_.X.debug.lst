

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Tue May 21 14:27:30 2024

Microchip MPLAB XC8 C Compiler v2.46 (Pro license) build 20240104201356 Og9s 
     1                           	processor	18F47Q10
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1,inline
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1,inline
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1,inline
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=2
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	text87,global,reloc=2,class=CODE,delta=1
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1
   106                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   107                           	psect	text91,global,reloc=2,class=CODE,delta=1
   108                           	psect	text92,global,reloc=2,class=CODE,delta=1
   109                           	psect	text93,global,reloc=2,class=CODE,delta=1
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1,inline
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1
   113                           	psect	text97,global,reloc=2,class=CODE,delta=1,inline
   114                           	psect	text98,global,reloc=2,class=CODE,delta=1,inline
   115                           	psect	text99,global,reloc=2,class=CODE,delta=1
   116                           	psect	text100,global,reloc=2,class=CODE,delta=1
   117                           	psect	text101,global,reloc=2,class=CODE,delta=1
   118                           	psect	text102,global,reloc=2,class=CODE,delta=1,group=2
   119                           	psect	text103,global,reloc=2,class=CODE,delta=1,inline
   120                           	psect	text104,global,reloc=2,class=CODE,delta=1
   121                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   122                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   123                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
   124                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   125                           	psect	pa_nodes0,global,class=CODE,delta=1
   126   000000                     
   127                           ; Generated 23/02/2024 GMT
   128                           ; 
   129                           ; Copyright © 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
   130                           ; All rights reserved.
   131                           ; 
   132                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   133                           ; 
   134                           ; Redistribution and use in source and binary forms, with or without modification, are
   135                           ; permitted provided that the following conditions are met:
   136                           ; 
   137                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   138                           ;        conditions and the following disclaimer.
   139                           ; 
   140                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   141                           ;        of conditions and the following disclaimer in the documentation and/or other
   142                           ;        materials provided with the distribution. Publication is not required when
   143                           ;        this file is used in an embedded application.
   144                           ; 
   145                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   146                           ;        software without specific prior written permission.
   147                           ; 
   148                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   149                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   150                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   151                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   152                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   153                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   154                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   155                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   156                           ; 
   157                           ; 
   158                           ; Code-generator required, PIC18F47Q10 Definitions
   159                           ; 
   160                           ; SFR Addresses
   161   000000                     
   162 ;; Function _INT0_DefaultInterruptHandler is unused but had its address taken
   163   000000                     
   164 ;; Function _INT1_DefaultInterruptHandler is unused but had its address taken
   165   000000                     
   166 ;; Function _INT2_DefaultInterruptHandler is unused but had its address taken
   167   000000                     
   168 ;; Function _TMR2_Start is unused but had its address taken
   169   000000                     
   170 ;; Function _TMR2_Stop is unused but had its address taken
   171   000000                     
   172 ;; Function _TMR2_PeriodCountSet is unused but had its address taken
   173   000000                     
   174 ;; Function _TMR2_DefaultOverflowCallback is unused but had its address taken
   175   000000                     
   176 ;; Function _TMR2_Tasks is unused but had its address taken
   177   000000                     
   178                           	psect	idataBANK0
   179   002A46                     __pidataBANK0:
   180                           	callstack 0
   181                           
   182                           ;initializer for _Button_StateMachine
   183   002A46  2E                 	db	low _Button_State_Initializing
   184   002A47  1F                 	db	high _Button_State_Initializing
   185   002A48  00                 	db	low (_Button_State_Initializing shr (0+16))
   186   002A49  58                 	db	low _Button_State_NotPressed
   187   002A4A  14                 	db	high _Button_State_NotPressed
   188   002A4B  00                 	db	low (_Button_State_NotPressed shr (0+16))
   189   002A4C  8E                 	db	low _Button_State_Pressed
   190   002A4D  1E                 	db	high _Button_State_Pressed
   191   002A4E  00                 	db	low (_Button_State_Pressed shr (0+16))
   192                           
   193                           ;initializer for _freq_hop
   194   002A4F  00                 	db	0
   195   002A50  1E                 	db	30
   196   002A51  3C                 	db	60
   197                           
   198                           ;initializer for _callback_position_changed
   199   002A52  3C                 	db	low _Slider_DefaultCallback
   200   002A53  2D                 	db	high _Slider_DefaultCallback
   201   002A54  00                 	db	low (_Slider_DefaultCallback shr (0+16))
   202                           
   203                           ;initializer for _callback_notPressed
   204   002A55  40                 	db	low _Button_DefaultCallback
   205   002A56  2D                 	db	high _Button_DefaultCallback
   206   002A57  00                 	db	low (_Button_DefaultCallback shr (0+16))
   207                           
   208                           ;initializer for _mtouch_slider
   209   002A58  00                 	db	0
   210   002A59  00                 	db	0
   211   002A5A  02                 	db	2
   212   002A5B  03                 	db	3
   213   002A5C  81                 	db	129
   214   002A5D  08                 	db	8
   215   002A5E  0032               	dw	50
   216   002A60  00                 	db	0
   217   002A61  00                 	db	0
   218   002A62  0000               	dw	0
   219   002A64  0000               	dw	0
   220   002A66  0000               	dw	0
   221   002A68  00                 	db	0
   222                           
   223                           	psect	smallconst
   224   000F00                     __psmallconst:
   225                           	callstack 0
   226   000F00  00                 	db	0
   227   000F01                     _mtouch_button_init:
   228                           	callstack 0
   229   000F01  00                 	db	0
   230   000F02  00                 	db	0
   231   000F03  00                 	db	0
   232   000F04  00                 	db	0
   233   000F05  0000               	dw	0
   234   000F07  0000               	dw	0
   235   000F09  0000               	dw	0
   236   000F0B  00                 	db	0
   237   000F0C  0000               	dw	0
   238   000F0E  0000               	dw	0
   239   000F10  64                 	db	100
   240   000F11  01                 	db	1
   241   000F12  01                 	db	1
   242   000F13  01                 	db	1
   243   000F14  00                 	db	0
   244   000F15  00                 	db	0
   245   000F16  0000               	dw	0
   246   000F18  0000               	dw	0
   247   000F1A  0000               	dw	0
   248   000F1C  00                 	db	0
   249   000F1D  0000               	dw	0
   250   000F1F  0000               	dw	0
   251   000F21  64                 	db	100
   252   000F22  01                 	db	1
   253   000F23  02                 	db	2
   254   000F24  02                 	db	2
   255   000F25  00                 	db	0
   256   000F26  01                 	db	1
   257   000F27  0000               	dw	0
   258   000F29  0000               	dw	0
   259   000F2B  0000               	dw	0
   260   000F2D  00                 	db	0
   261   000F2E  0000               	dw	0
   262   000F30  0000               	dw	0
   263   000F32  32                 	db	50
   264   000F33  01                 	db	1
   265   000F34  03                 	db	3
   266   000F35  03                 	db	3
   267   000F36  00                 	db	0
   268   000F37  01                 	db	1
   269   000F38  0000               	dw	0
   270   000F3A  0000               	dw	0
   271   000F3C  0000               	dw	0
   272   000F3E  00                 	db	0
   273   000F3F  0000               	dw	0
   274   000F41  0000               	dw	0
   275   000F43  32                 	db	50
   276   000F44  01                 	db	1
   277   000F45  04                 	db	4
   278   000F46  04                 	db	4
   279   000F47  00                 	db	0
   280   000F48  01                 	db	1
   281   000F49  0000               	dw	0
   282   000F4B  0000               	dw	0
   283   000F4D  0000               	dw	0
   284   000F4F  00                 	db	0
   285   000F50  0000               	dw	0
   286   000F52  0000               	dw	0
   287   000F54  32                 	db	50
   288   000F55  01                 	db	1
   289   000F56                     __end_of_mtouch_button_init:
   290                           	callstack 0
   291   000F56                     _mtouch_sensor_init:
   292                           	callstack 0
   293   000F56  00                 	db	0
   294   000F57  02                 	db	2
   295   000F58  C0                 	db	192
   296   000F59  40                 	db	64
   297   000F5A  0020               	dw	32
   298   000F5C  00                 	db	0
   299   000F5D  0000               	dw	0
   300   000F5F  00                 	db	0
   301   000F60  01                 	db	1
   302   000F61  1F                 	db	31
   303   000F62  C0                 	db	192
   304   000F63  40                 	db	64
   305   000F64  0020               	dw	32
   306   000F66  00                 	db	0
   307   000F67  0000               	dw	0
   308   000F69  00                 	db	0
   309   000F6A  02                 	db	2
   310   000F6B  0C                 	db	12
   311   000F6C  C0                 	db	192
   312   000F6D  40                 	db	64
   313   000F6E  0020               	dw	32
   314   000F70  00                 	db	0
   315   000F71  0000               	dw	0
   316   000F73  00                 	db	0
   317   000F74  03                 	db	3
   318   000F75  05                 	db	5
   319   000F76  C0                 	db	192
   320   000F77  40                 	db	64
   321   000F78  0020               	dw	32
   322   000F7A  00                 	db	0
   323   000F7B  0000               	dw	0
   324   000F7D  00                 	db	0
   325   000F7E  04                 	db	4
   326   000F7F  04                 	db	4
   327   000F80  C0                 	db	192
   328   000F81  40                 	db	64
   329   000F82  0020               	dw	32
   330   000F84  00                 	db	0
   331   000F85  0000               	dw	0
   332   000F87  00                 	db	0
   333   000F88                     __end_of_mtouch_sensor_init:
   334                           	callstack 0
   335   000000                     _T2CON	set	4028
   336   000000                     _IOCEF	set	3874
   337   000000                     _IOCEN	set	3875
   338   000000                     _IOCEP	set	3876
   339   000000                     _IOCCF	set	3861
   340   000000                     _IOCCN	set	3862
   341   000000                     _IOCCP	set	3863
   342   000000                     _IOCBF	set	3853
   343   000000                     _IOCBN	set	3854
   344   000000                     _IOCBP	set	3855
   345   000000                     _INLVLE	set	3877
   346   000000                     _INLVLD	set	3869
   347   000000                     _INLVLC	set	3864
   348   000000                     _INLVLB	set	3856
   349   000000                     _SLRCONE	set	3878
   350   000000                     _SLRCOND	set	3870
   351   000000                     _SLRCONC	set	3865
   352   000000                     _SLRCONB	set	3857
   353   000000                     _ODCONE	set	3879
   354   000000                     _ODCOND	set	3871
   355   000000                     _ODCONC	set	3866
   356   000000                     _ODCONB	set	3858
   357   000000                     _WPUE	set	3880
   358   000000                     _WPUD	set	3872
   359   000000                     _WPUC	set	3867
   360   000000                     _WPUB	set	3859
   361   000000                     _ANSELE	set	3881
   362   000000                     _ANSELD	set	3873
   363   000000                     _ANSELC	set	3868
   364   000000                     _ANSELB	set	3860
   365   000000                     _OSCTUNE	set	3800
   366   000000                     _OSCFRQ	set	3801
   367   000000                     _ADERRL	set	3945
   368   000000                     _ADERRH	set	3946
   369   000000                     _ADPREVL	set	3932
   370   000000                     _ADPREVH	set	3933
   371   000000                     _ADFLTRL	set	3949
   372   000000                     _ADFLTRH	set	3950
   373   000000                     _ADACCL	set	3947
   374   000000                     _ADACCH	set	3948
   375   000000                     _ADCNT	set	3938
   376   000000                     _ADRESL	set	3934
   377   000000                     _ADRESH	set	3935
   378   000000                     _ADACQ	set	3927
   379   000000                     _ADCON0	set	3931
   380   000000                     _ADCLK	set	3922
   381   000000                     _ADSTAT	set	3936
   382   000000                     _ADCON3	set	3926
   383   000000                     _ADCON2	set	3925
   384   000000                     _ADPRE	set	3929
   385   000000                     _ADSTPTH	set	3940
   386   000000                     _ADUTHH	set	3944
   387   000000                     _ADUTHL	set	3943
   388   000000                     _ADLTHH	set	3942
   389   000F88  00                 	db	0	; dummy byte at the end
   390   000000                     
   391                           	psect	nvBANK0
   392   0000FA                     __pnvBANK0:
   393                           	callstack 0
   394   0000FA                     _TMR2_OverflowCallback:
   395                           	callstack 0
   396   0000FA                     	ds	3
   397   0000FD                     _ADCC_ADTI_InterruptHandler:
   398                           	callstack 0
   399   0000FD                     	ds	3
   400   000000                     _ADCON0bits	set	3931
   401   000000                     _ADFLTR	set	3949
   402   000000                     _ADACC	set	3947
   403   000000                     _LATBbits	set	3971
   404   000000                     _LATCbits	set	3972
   405   000000                     _LATDbits	set	3973
   406   000000                     _TRISBbits	set	3976
   407   000000                     _TRISDbits	set	3978
   408   000000                     _TRISAbits	set	3975
   409   000000                     _PR2	set	4027
   410   000000                     _T2CONbits	set	4028
   411   000000                     _GIE	set	32663
   412   000000                     _PIE0bits	set	3773
   413   000000                     _PIE1bits	set	3774
   414   000000                     _PIR1bits	set	3782
   415   000000                     _ADACT	set	3921
   416   000000                     _ADREF	set	3923
   417   000000                     _ADCON1	set	3924
   418   000000                     _ADCAP	set	3928
   419   000000                     _ADPCH	set	3930
   420   000000                     _ADRPT	set	3937
   421   000000                     _ADSTPTL	set	3939
   422   000000                     _ADLTHL	set	3941
   423   000000                     _PIR4bits	set	3785
   424   000000                     _OSCCON1	set	3795
   425   000000                     _PIR0bits	set	3781
   426   000000                     _LATA	set	3970
   427   000000                     _PWM4DCL	set	3999
   428   000000                     _PWM4DCH	set	4000
   429   000000                     _PWM4CON	set	4001
   430   000000                     _CCPTMRSbits	set	4013
   431   000000                     _T2TMR	set	4026
   432   000000                     _T2PR	set	4027
   433   000000                     _T2HLT	set	4029
   434   000000                     _T2CLKCON	set	4030
   435   000000                     _INTCONbits	set	4082
   436   000000                     _OSCCON3	set	3797
   437   000000                     _OSCEN	set	3799
   438   000000                     _RA3PPS	set	3813
   439   000000                     _INLVLA	set	3848
   440   000000                     _SLRCONA	set	3849
   441   000000                     _ODCONA	set	3850
   442   000000                     _WPUA	set	3851
   443   000000                     _ANSELA	set	3852
   444   000000                     _TRISE	set	3979
   445   000000                     _TRISD	set	3978
   446   000000                     _TRISC	set	3977
   447   000000                     _TRISB	set	3976
   448   000000                     _TRISA	set	3975
   449   000000                     _LATE	set	3974
   450   000000                     _LATD	set	3973
   451   000000                     _LATC	set	3972
   452   000000                     _LATB	set	3971
   453   000000                     _IOCAF	set	3845
   454   000000                     _IOCAN	set	3846
   455   000000                     _IOCAP	set	3847
   456   000000                     _T2RST	set	4031
   457                           
   458                           ; #config settings
   459                           
   460                           	psect	cinit
   461   002624                     __pcinit:
   462                           	callstack 0
   463   002624                     start_initialization:
   464                           	callstack 0
   465   002624                     __initialization:
   466                           	callstack 0
   467                           
   468                           ; Initialize objects allocated to BANK0 (35 bytes)
   469                           ; load TBLPTR registers with __pidataBANK0
   470   002624  0E46               	movlw	low __pidataBANK0
   471   002626  6EF6               	movwf	tblptrl,c
   472   002628  0E2A               	movlw	high __pidataBANK0
   473   00262A  6EF7               	movwf	tblptrh,c
   474   00262C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   475   00262E  6EF8               	movwf	tblptru,c
   476   002630  EE00  F0C3         	lfsr	0,__pdataBANK0
   477   002634  EE10 F023          	lfsr	1,35
   478   002638                     copy_data0:
   479   002638  0009               	tblrd		*+
   480   00263A  CFF5 FFEE          	movff	tablat,postinc0
   481   00263E  50E5               	movf	postdec1,w,c
   482   002640  50E1               	movf	fsr1l,w,c
   483   002642  E1FA               	bnz	copy_data0
   484                           
   485                           ; Clear objects allocated to BANK1 (85 bytes)
   486   002644  EE01  F000         	lfsr	0,__pbssBANK1
   487   002648  0E55               	movlw	85
   488   00264A                     clear_0:
   489   00264A  6AEE               	clrf	postinc0,c
   490   00264C  06E8               	decf	wreg,f,c
   491   00264E  E1FD               	bnz	clear_0
   492                           
   493                           ; Clear objects allocated to BANK0 (99 bytes)
   494   002650  EE00  F060         	lfsr	0,__pbssBANK0
   495   002654  0E63               	movlw	99
   496   002656                     clear_1:
   497   002656  6AEE               	clrf	postinc0,c
   498   002658  06E8               	decf	wreg,f,c
   499   00265A  E1FD               	bnz	clear_1
   500                           
   501                           ; Clear objects allocated to COMRAM (24 bytes)
   502   00265C  EE00  F033         	lfsr	0,__pbssCOMRAM
   503   002660  0E18               	movlw	24
   504   002662                     clear_2:
   505   002662  6AEE               	clrf	postinc0,c
   506   002664  06E8               	decf	wreg,f,c
   507   002666  E1FD               	bnz	clear_2
   508   002668                     end_of_initialization:
   509                           	callstack 0
   510   002668                     __end_of__initialization:
   511                           	callstack 0
   512   002668  904B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   513   00266A  924B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   514   00266C  0100               	movlb	0
   515   00266E  EF1E  F014         	goto	_main	;jump to C main() function
   516                           
   517                           	psect	bssCOMRAM
   518   000033                     __pbssCOMRAM:
   519                           	callstack 0
   520   000033                     _motorState:
   521                           	callstack 0
   522   000033                     	ds	2
   523   000035                     _state:
   524                           	callstack 0
   525   000035                     	ds	2
   526   000037                     _middle_signal:
   527                           	callstack 0
   528   000037                     	ds	2
   529   000039                     _right_signal:
   530                           	callstack 0
   531   000039                     	ds	2
   532   00003B                     _left_signal:
   533                           	callstack 0
   534   00003B                     	ds	2
   535   00003D                     _resol_value:
   536                           	callstack 0
   537   00003D                     	ds	2
   538   00003F                     _buttonNo:
   539                           	callstack 0
   540   00003F                     	ds	1
   541   000040                     _sample_delay:
   542                           	callstack 0
   543   000040                     	ds	1
   544   000041                     _freq_index:
   545                           	callstack 0
   546   000041                     	ds	1
   547   000042                     _lowpowerActivated:
   548                           	callstack 0
   549   000042                     	ds	1
   550   000043                     _scanInterrupted:
   551                           	callstack 0
   552   000043                     	ds	1
   553   000044                     _sampling_flag:
   554                           	callstack 0
   555   000044                     	ds	1
   556   000045                     _currentScanSensor:
   557                           	callstack 0
   558   000045                     	ds	1
   559   000046                     _wheel_sensor_middle_channel_zero:
   560                           	callstack 0
   561   000046                     	ds	1
   562   000047                     _middle_node:
   563                           	callstack 0
   564   000047                     	ds	1
   565   000048                     _mtouch_request_init:
   566                           	callstack 0
   567   000048                     	ds	1
   568   000049                     _mtouch_time_toScan:
   569                           	callstack 0
   570   000049                     	ds	1
   571   00004A                     _resol_bits:
   572                           	callstack 0
   573   00004A                     	ds	1
   574                           
   575                           	psect	bssBANK0
   576   000060                     __pbssBANK0:
   577                           	callstack 0
   578   000060                     _sensor_medianBuffer:
   579                           	callstack 0
   580   000060                     	ds	30
   581   00007E                     _packet_sample:
   582                           	callstack 0
   583   00007E                     	ds	10
   584   000088                     medianFilter@bufferIndex:
   585                           	callstack 0
   586   000088                     	ds	5
   587   00008D                     _keyInfo:
   588                           	callstack 0
   589   00008D                     	ds	4
   590   000091                     _mtouch_sensor:
   591                           	callstack 0
   592   000091                     	ds	50
   593                           
   594                           	psect	dataBANK0
   595   0000C3                     __pdataBANK0:
   596                           	callstack 0
   597   0000C3                     _Button_StateMachine:
   598                           	callstack 0
   599   0000C3                     	ds	9
   600   0000CC                     _freq_hop:
   601                           	callstack 0
   602   0000CC                     	ds	3
   603   0000CF                     _callback_position_changed:
   604                           	callstack 0
   605   0000CF                     	ds	3
   606   0000D2                     _callback_notPressed:
   607                           	callstack 0
   608   0000D2                     	ds	3
   609   0000D5                     _mtouch_slider:
   610                           	callstack 0
   611   0000D5                     	ds	17
   612                           
   613                           	psect	bssBANK1
   614   000100                     __pbssBANK1:
   615                           	callstack 0
   616   000100                     _mtouch_button:
   617                           	callstack 0
   618   000100                     	ds	85
   619                           
   620                           	psect	cstackBANK1
   621   000155                     __pcstackBANK1:
   622                           	callstack 0
   623   000155                     Slider_Service@group_status:
   624                           	callstack 0
   625                           
   626                           ; 1 bytes @ 0x0
   627   000155                     	ds	1
   628   000156                     Slider_Service@valid_contact_found:
   629                           	callstack 0
   630                           
   631                           ; 1 bytes @ 0x1
   632   000156                     	ds	1
   633   000157                     Slider_Service@position:
   634                           	callstack 0
   635                           
   636                           ; 2 bytes @ 0x2
   637   000157                     	ds	2
   638   000159                     Slider_Service@status:
   639                           	callstack 0
   640                           
   641                           ; 1 bytes @ 0x4
   642   000159                     	ds	1
   643   00015A                     Slider_Service@segment:
   644                           	callstack 0
   645                           
   646                           ; 2 bytes @ 0x5
   647   00015A                     	ds	2
   648   00015C                     Slider_Service@sliderName:
   649                           	callstack 0
   650                           
   651                           ; 1 bytes @ 0x7
   652   00015C                     	ds	1
   653   00015D                     Slider_Service@slider:
   654                           	callstack 0
   655                           
   656                           ; 1 bytes @ 0x8
   657   00015D                     	ds	1
   658                           
   659                           	psect	cstackBANK0
   660   0000E6                     __pcstackBANK0:
   661                           	callstack 0
   662   0000E6                     MTOUCH_Button_ServiceAll@button:
   663                           	callstack 0
   664   0000E6                     calculate_raw_position@ref_node:
   665                           	callstack 0
   666                           
   667                           ; 1 bytes @ 0x0
   668   0000E6                     	ds	1
   669   0000E7                     calculate_raw_position@deadband_set:
   670                           	callstack 0
   671                           
   672                           ; 2 bytes @ 0x1
   673   0000E7                     	ds	2
   674   0000E9                     calculate_raw_position@interpolation_scale:
   675                           	callstack 0
   676                           
   677                           ; 1 bytes @ 0x3
   678   0000E9                     	ds	1
   679   0000EA                     calculate_raw_position@deadband:
   680                           	callstack 0
   681                           
   682                           ; 2 bytes @ 0x4
   683   0000EA                     	ds	2
   684   0000EC                     calculate_raw_position@interpolation_bits:
   685                           	callstack 0
   686                           
   687                           ; 1 bytes @ 0x6
   688   0000EC                     	ds	1
   689   0000ED                     calculate_raw_position@size:
   690                           	callstack 0
   691                           
   692                           ; 1 bytes @ 0x7
   693   0000ED                     	ds	1
   694   0000EE                     calculate_raw_position@position:
   695                           	callstack 0
   696                           
   697                           ; 2 bytes @ 0x8
   698   0000EE                     	ds	2
   699   0000F0                     calculate_position@position:
   700                           	callstack 0
   701                           
   702                           ; 2 bytes @ 0xA
   703   0000F0                     	ds	2
   704   0000F2                     calculate_position@filtered_position:
   705                           	callstack 0
   706                           
   707                           ; 2 bytes @ 0xC
   708   0000F2                     	ds	2
   709   0000F4                     calculate_position@raw_position:
   710                           	callstack 0
   711                           
   712                           ; 2 bytes @ 0xE
   713   0000F4                     	ds	2
   714   0000F6                     ??_Slider_Service:
   715                           
   716                           ; 1 bytes @ 0x10
   717   0000F6                     	ds	4
   718                           
   719                           	psect	cstackCOMRAM
   720   000001                     __pcstackCOMRAM:
   721                           	callstack 0
   722   000001                     ?_abs:
   723                           	callstack 0
   724   000001                     Sensor_setCalibrated@sensor:
   725                           	callstack 0
   726   000001                     Sensor_setSampled@sensor:
   727                           	callstack 0
   728   000001                     i2Sensor_SetTrisBit@TrisBit:
   729                           	callstack 0
   730   000001                     i2MTOUCH_Sensor_isEnabled@sensor:
   731                           	callstack 0
   732   000001                     i2Sensor_isCalibrated@sensor:
   733                           	callstack 0
   734   000001                     i2Sensor_isCalibratingAcqTime@sensor:
   735                           	callstack 0
   736   000001                     i2MTOUCH_Sensor_wasSampled@sensor:
   737                           	callstack 0
   738   000001                     abs@a:
   739                           	callstack 0
   740                           
   741                           ; 2 bytes @ 0x0
   742   000001                     	ds	1
   743   000002                     ??i2_Sensor_SetTrisBit:
   744   000002                     
   745                           ; 1 bytes @ 0x1
   746   000002                     	ds	1
   747   000003                     ??_abs:
   748                           
   749                           ; 1 bytes @ 0x2
   750   000003                     	ds	1
   751   000004                     i2Sensor_SetTrisBit@sensor:
   752                           	callstack 0
   753                           
   754                           ; 1 bytes @ 0x3
   755   000004                     	ds	1
   756   000005                     ??i2_Sensor_scheduleNextScan:
   757                           
   758                           ; 1 bytes @ 0x4
   759   000005                     	ds	4
   760   000009                     i2Sensor_scheduleNextScan@state:
   761                           	callstack 0
   762                           
   763                           ; 1 bytes @ 0x8
   764   000009                     	ds	1
   765   00000A                     i2Sensor_scheduleNextScan@skipScan:
   766                           	callstack 0
   767                           
   768                           ; 1 bytes @ 0x9
   769   00000A                     	ds	1
   770   00000B                     i2Sensor_scheduleNextScan@sensor:
   771                           	callstack 0
   772                           
   773                           ; 1 bytes @ 0xA
   774   00000B                     	ds	1
   775   00000C                     ??_MTOUCH_Sensor_Service:
   776                           
   777                           ; 1 bytes @ 0xB
   778   00000C                     	ds	2
   779   00000E                     MTOUCH_Sensor_Service@sensor:
   780                           	callstack 0
   781                           
   782                           ; 1 bytes @ 0xD
   783   00000E                     	ds	1
   784   00000F                     ??_INTERRUPT_InterruptManager:
   785                           
   786                           ; 1 bytes @ 0xE
   787   00000F                     	ds	6
   788   000015                     ??_ProcessButtonRelease:
   789   000015                     ?_MTOUCH_Slider_Position_Get:
   790                           	callstack 0
   791   000015                     ?_MTOUCH_Sensor_RawSample_Get:
   792                           	callstack 0
   793   000015                     ?_medianFilter:
   794                           	callstack 0
   795   000015                     ?_GetMotorSpeed:
   796                           	callstack 0
   797   000015                     ?_Button_Unscaled_Deviation_Get:
   798                           	callstack 0
   799   000015                     ?_divide:
   800                           	callstack 0
   801   000015                     ?_get_difference:
   802                           	callstack 0
   803   000015                     MTOUCH_Button_Deviation_Get@name:
   804                           	callstack 0
   805   000015                     get_difference@slider:
   806                           	callstack 0
   807   000015                     Slider_Initialize@sliderName:
   808                           	callstack 0
   809   000015                     Sensor_SetTrisBit@TrisBit:
   810                           	callstack 0
   811   000015                     MTOUCH_Sensor_Enable@sensor:
   812                           	callstack 0
   813   000015                     MTOUCH_Sensor_isEnabled@sensor:
   814                           	callstack 0
   815   000015                     MTOUCH_Sensor_Calibrate@sensor:
   816                           	callstack 0
   817   000015                     MTOUCH_Sensor_isCalibrated@sensor:
   818                           	callstack 0
   819   000015                     Sensor_isCalibrated@sensor:
   820                           	callstack 0
   821   000015                     Sensor_isCalibratingAcqTime@sensor:
   822                           	callstack 0
   823   000015                     MTOUCH_Sensor_wasSampled@sensor:
   824                           	callstack 0
   825   000015                     Sensor_Sampled_Reset@sensor:
   826                           	callstack 0
   827   000015                     PWM4_LoadDutyValue@dutyValue:
   828                           	callstack 0
   829   000015                     Button_Tick_helper@button:
   830                           	callstack 0
   831   000015                     Button_Deviation_Update@button:
   832                           	callstack 0
   833   000015                     Button_Unscaled_Deviation_Get@button:
   834                           	callstack 0
   835   000015                     Button_Baseline_Update@button:
   836                           	callstack 0
   837   000015                     divide@numerator:
   838                           	callstack 0
   839   000015                     GetMotorSpeed@adcVal:
   840                           	callstack 0
   841   000015                     memcpy@d1:
   842                           	callstack 0
   843   000015                     ADCC_SetADTIInterruptHandler@InterruptHandler:
   844                           	callstack 0
   845   000015                     INT0_SetInterruptHandler@InterruptHandler:
   846                           	callstack 0
   847   000015                     INT1_SetInterruptHandler@InterruptHandler:
   848                           	callstack 0
   849   000015                     INT2_SetInterruptHandler@InterruptHandler:
   850                           	callstack 0
   851   000015                     TMR2_OverflowCallbackRegister@InterruptHandler:
   852                           	callstack 0
   853   000015                     MTOUCH_Button_SetNotPressedCallback@callback:
   854                           	callstack 0
   855   000015                     MTOUCH_Slider_SetPositionChangedCallback@callback:
   856                           	callstack 0
   857                           
   858                           ; 3 bytes @ 0x14
   859   000015                     	ds	1
   860   000016                     ??_MTOUCH_Sensor_Sampled_ResetAll:
   861   000016                     ??_Sensor_SetTrisBit:
   862   000016                     ?_Slider_FindMiddle:
   863                           	callstack 0
   864   000016                     ?_Slider_FindLeft:
   865                           	callstack 0
   866   000016                     ?_Slider_FindRight:
   867                           	callstack 0
   868   000016                     MTOUCH_Button_Initialize@name:
   869                           	callstack 0
   870   000016                     MTOUCH_Button_isPressed@name:
   871                           	callstack 0
   872   000016                     Slider_FindMiddle@slider:
   873                           	callstack 0
   874   000016                     Slider_FindLeft@slider:
   875                           	callstack 0
   876   000016                     Slider_FindRight@slider:
   877                           	callstack 0
   878   000016                     Slider_Initialize@slider:
   879                           	callstack 0
   880   000016                     MTOUCH_Sensor_Initialize@sensor:
   881                           	callstack 0
   882   000016                     get_difference@previous_position:
   883                           	callstack 0
   884                           
   885                           ; 2 bytes @ 0x15
   886   000016                     	ds	1
   887   000017                     ??_Button_Deviation_Update:
   888   000017                     ??_Button_Baseline_Update:
   889   000017                     ??_medianFilter:
   890   000017                     ??_PWM4_LoadDutyValue:
   891   000017                     ??_Button_Unscaled_Deviation_Get:
   892   000017                     MTOUCH_Slider_Position_Get@sliderName:
   893                           	callstack 0
   894   000017                     MTOUCH_Slider_InitializeAll@slider:
   895                           	callstack 0
   896   000017                     MTOUCH_Sensor_RawSample_Get@name:
   897                           	callstack 0
   898   000017                     MTOUCH_Sensor_Sampled_ResetAll@sensor:
   899                           	callstack 0
   900   000017                     ProcessButtonRelease@button:
   901                           	callstack 0
   902   000017                     memcpy@s1:
   903                           	callstack 0
   904   000017                     MTOUCH_Button_Initialize@button:
   905                           	callstack 0
   906   000017                     divide@denominator:
   907                           	callstack 0
   908   000017                     GetMotorSpeed@retVal:
   909                           	callstack 0
   910                           
   911                           ; 2 bytes @ 0x16
   912   000017                     	ds	1
   913   000018                     ??_Slider_FindMiddle:
   914   000018                     ??_Slider_FindLeft:
   915   000018                     ??_Slider_FindRight:
   916   000018                     Sensor_SetTrisBit@sensor:
   917                           	callstack 0
   918   000018                     Button_Reading_Update_Helper@button:
   919                           	callstack 0
   920   000018                     Button_Baseline_Initialize@button:
   921                           	callstack 0
   922   000018                     get_difference@current_position:
   923                           	callstack 0
   924   000018                     memcpy@n:
   925                           	callstack 0
   926                           
   927                           ; 2 bytes @ 0x17
   928   000018                     	ds	1
   929   000019                     ??_Sensor_scheduleNextScan:
   930   000019                     ??_ApplicationTask:
   931   000019                     MTOUCH_Button_Tick@i:
   932                           	callstack 0
   933   000019                     divide@exponent:
   934                           	callstack 0
   935   000019                     Slider_FindLeft@ref_node:
   936                           	callstack 0
   937                           
   938                           ; 1 bytes @ 0x18
   939   000019                     	ds	1
   940   00001A                     ??_Button_Baseline_Initialize:
   941   00001A                     ??_Button_Reading_Update_Helper:
   942   00001A                     ??_get_difference:
   943   00001A                     memcpy@tmp:
   944                           	callstack 0
   945   00001A                     divide@result:
   946                           	callstack 0
   947                           
   948                           ; 2 bytes @ 0x19
   949   00001A                     	ds	1
   950   00001B                     medianFilter@sensor:
   951                           	callstack 0
   952   00001B                     ApplicationTask@motorSpeed:
   953                           	callstack 0
   954   00001B                     memcpy@d:
   955                           	callstack 0
   956                           
   957                           ; 2 bytes @ 0x1A
   958   00001B                     	ds	1
   959   00001C                     ?_interpolate:
   960                           	callstack 0
   961   00001C                     Sensor_RawSample_Update@sensor:
   962                           	callstack 0
   963   00001C                     Button_Reading_Update@button:
   964                           	callstack 0
   965   00001C                     interpolate@delta1:
   966                           	callstack 0
   967   00001C                     Slider_FindMiddle@channelDelta:
   968                           	callstack 0
   969                           
   970                           ; 2 bytes @ 0x1B
   971   00001C                     	ds	1
   972   00001D                     Sensor_scheduleNextScan@state:
   973                           	callstack 0
   974   00001D                     memcpy@s:
   975                           	callstack 0
   976   00001D                     Button_Check_AKS_Block@button:
   977                           	callstack 0
   978   00001D                     get_difference@rollover_threshold:
   979                           	callstack 0
   980   00001D                     Sensor_RawSample_Update@result:
   981                           	callstack 0
   982                           
   983                           ; 2 bytes @ 0x1C
   984   00001D                     	ds	1
   985   00001E                     MTOUCH_Button_InitializeAll@button:
   986                           	callstack 0
   987   00001E                     Slider_FindRight@ref_node:
   988                           	callstack 0
   989   00001E                     MTOUCH_Sensor_InitializeAll@sensor:
   990                           	callstack 0
   991   00001E                     Sensor_scheduleNextScan@skipScan:
   992                           	callstack 0
   993   00001E                     interpolate@delta2:
   994                           	callstack 0
   995   00001E                     Slider_FindMiddle@maximumDelta:
   996                           	callstack 0
   997                           
   998                           ; 2 bytes @ 0x1D
   999   00001E                     	ds	1
  1000   00001F                     ??_Button_Check_AKS_Block:
  1001   00001F                     Sensor_scheduleNextScan@sensor:
  1002                           	callstack 0
  1003   00001F                     MTOUCH_Sensor_postAcquisitionProcess@name:
  1004                           	callstack 0
  1005   00001F                     get_difference@diff:
  1006                           	callstack 0
  1007                           
  1008                           ; 2 bytes @ 0x1E
  1009   00001F                     	ds	1
  1010   000020                     Slider_FindMiddle@i:
  1011                           	callstack 0
  1012   000020                     MTOUCH_Sensor_isSamplingComplete@sensor:
  1013                           	callstack 0
  1014   000020                     interpolate@delta3:
  1015                           	callstack 0
  1016                           
  1017                           ; 2 bytes @ 0x1F
  1018   000020                     	ds	1
  1019   000021                     ?_positional_hysteresis:
  1020                           	callstack 0
  1021   000021                     ?_moving_average_filter:
  1022                           	callstack 0
  1023   000021                     ?_calculate_contact_size:
  1024                           	callstack 0
  1025   000021                     positional_hysteresis@slider:
  1026                           	callstack 0
  1027   000021                     moving_average_filter@slider:
  1028                           	callstack 0
  1029   000021                     calculate_contact_size@slider:
  1030                           	callstack 0
  1031   000021                     Button_Check_AKS_Block@surplus_deviation_this_button:
  1032                           	callstack 0
  1033   000021                     Button_Deviation_Update@deviation:
  1034                           	callstack 0
  1035                           
  1036                           ; 4 bytes @ 0x20
  1037   000021                     	ds	1
  1038   000022                     interpolate@num_bits:
  1039                           	callstack 0
  1040   000022                     positional_hysteresis@current_position:
  1041                           	callstack 0
  1042   000022                     moving_average_filter@current_position:
  1043                           	callstack 0
  1044                           
  1045                           ; 2 bytes @ 0x21
  1046   000022                     	ds	1
  1047   000023                     ??_interpolate:
  1048   000023                     ??_calculate_contact_size:
  1049   000023                     Button_Check_AKS_Block@currentAKSGroup:
  1050                           	callstack 0
  1051                           
  1052                           ; 1 bytes @ 0x22
  1053   000023                     	ds	1
  1054   000024                     ??_positional_hysteresis:
  1055   000024                     ??_moving_average_filter:
  1056   000024                     Button_Check_AKS_Block@surplus_deviation_check_button:
  1057                           	callstack 0
  1058                           
  1059                           ; 2 bytes @ 0x23
  1060   000024                     	ds	1
  1061   000025                     calculate_contact_size@contact_size:
  1062                           	callstack 0
  1063                           
  1064                           ; 2 bytes @ 0x24
  1065   000025                     	ds	1
  1066   000026                     Button_Check_AKS_Block@check_button:
  1067                           	callstack 0
  1068   000026                     moving_average_filter@filtered_position:
  1069                           	callstack 0
  1070                           
  1071                           ; 2 bytes @ 0x25
  1072   000026                     	ds	1
  1073   000027                     positional_hysteresis@previous_position:
  1074                           	callstack 0
  1075   000027                     interpolate@rtnval:
  1076                           	callstack 0
  1077                           
  1078                           ; 2 bytes @ 0x26
  1079   000027                     	ds	1
  1080   000028                     Button_State_Initializing@button:
  1081                           	callstack 0
  1082   000028                     Button_State_NotPressed@button:
  1083                           	callstack 0
  1084   000028                     Button_State_Pressed@button:
  1085                           	callstack 0
  1086   000028                     moving_average_filter@previous_position:
  1087                           	callstack 0
  1088                           
  1089                           ; 2 bytes @ 0x27
  1090   000028                     	ds	1
  1091   000029                     ?_calculate_raw_position:
  1092                           	callstack 0
  1093   000029                     calculate_raw_position@slider:
  1094                           	callstack 0
  1095   000029                     positional_hysteresis@filtered_position:
  1096                           	callstack 0
  1097                           
  1098                           ; 2 bytes @ 0x28
  1099   000029                     	ds	1
  1100   00002A                     ??_Button_State_Initializing:
  1101   00002A                     ??_Button_State_NotPressed:
  1102   00002A                     ??_Button_State_Pressed:
  1103   00002A                     moving_average_filter@dist_temp:
  1104                           	callstack 0
  1105                           
  1106                           ; 2 bytes @ 0x29
  1107   00002A                     	ds	1
  1108   00002B                     ??_calculate_raw_position:
  1109   00002B                     positional_hysteresis@hyst_width:
  1110                           	callstack 0
  1111                           
  1112                           ; 1 bytes @ 0x2A
  1113   00002B                     	ds	1
  1114   00002C                     positional_hysteresis@polarity:
  1115                           	callstack 0
  1116   00002C                     moving_average_filter@distance:
  1117                           	callstack 0
  1118                           
  1119                           ; 2 bytes @ 0x2B
  1120   00002C                     	ds	1
  1121   00002D                     positional_hysteresis@distance:
  1122                           	callstack 0
  1123                           
  1124                           ; 2 bytes @ 0x2C
  1125   00002D                     	ds	2
  1126   00002F                     
  1127                           ; 1 bytes @ 0x2E
  1128   00002F                     	ds	1
  1129   000030                     ?_calculate_position:
  1130                           	callstack 0
  1131   000030                     Button_Service@name:
  1132                           	callstack 0
  1133   000030                     calculate_position@slider:
  1134                           	callstack 0
  1135                           
  1136                           ; 1 bytes @ 0x2F
  1137   000030                     	ds	1
  1138   000031                     Button_Service@button:
  1139                           	callstack 0
  1140                           
  1141                           ; 2 bytes @ 0x30
  1142   000031                     	ds	1
  1143   000032                     MTOUCH_Slider_ServiceAll@slider:
  1144                           	callstack 0
  1145                           
  1146                           ; 1 bytes @ 0x31
  1147   000032                     	ds	1
  1148   000033                     
  1149                           ; 1 bytes @ 0x32
  1150 ;;
  1151 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1152 ;;
  1153 ;; *************** function _main *****************
  1154 ;; Defined at:
  1155 ;;		line 36 in file "main.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;		None
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;		None
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  1    wreg      void 
  1162 ;; Registers used:
  1163 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  1169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1173 ;;Total ram usage:        0 bytes
  1174 ;; Hardware stack levels required when called: 13
  1175 ;; This function calls:
  1176 ;;		_ApplicationTask
  1177 ;;		_MTOUCH_Button_SetNotPressedCallback
  1178 ;;		_MTOUCH_Service_Mainloop
  1179 ;;		_MTOUCH_Slider_SetPositionChangedCallback
  1180 ;;		_SYSTEM_Initialize
  1181 ;; This function is called by:
  1182 ;;		Startup code after reset
  1183 ;; This function uses a non-reentrant model
  1184 ;;
  1185                           
  1186                           	psect	text0
  1187   00283C                     __ptext0:
  1188                           	callstack 0
  1189   00283C                     _main:
  1190                           	callstack 18
  1191                           
  1192                           ;main.c: 38:     SYSTEM_Initialize();
  1193                           
  1194                           ;incstack = 0
  1195   00283C  ECAA  F015         	call	_SYSTEM_Initialize	;wreg free
  1196                           
  1197                           ; BSR set to: 14
  1198                           ;main.c: 45:     (INTCONbits.GIE = 1);
  1199   002840  8EF2               	bsf	242,7,c	;volatile
  1200                           
  1201                           ; BSR set to: 14
  1202                           ;main.c: 51:     (INTCONbits.PEIE = 1);
  1203   002842  8CF2               	bsf	242,6,c	;volatile
  1204                           
  1205                           ; BSR set to: 14
  1206                           ;main.c: 57:     MTOUCH_Button_SetNotPressedCallback(ProcessButtonRelease);
  1207   002844  0ED0               	movlw	low _ProcessButtonRelease
  1208   002846  6E15               	movwf	MTOUCH_Button_SetNotPressedCallback@callback^0,c
  1209   002848  0E28               	movlw	high _ProcessButtonRelease
  1210   00284A  6E16               	movwf	(MTOUCH_Button_SetNotPressedCallback@callback+1)^0,c
  1211   00284C  0E00               	movlw	low (_ProcessButtonRelease shr (0+16))
  1212   00284E  6E17               	movwf	(MTOUCH_Button_SetNotPressedCallback@callback+2)^0,c
  1213   002850  EC82  F016         	call	_MTOUCH_Button_SetNotPressedCallback	;wreg free
  1214                           
  1215                           ; BSR set to: 14
  1216                           ;main.c: 58:     MTOUCH_Slider_SetPositionChangedCallback(ProcessSliderChange);
  1217   002854  0E8C               	movlw	low _ProcessSliderChange
  1218   002856  6E15               	movwf	MTOUCH_Slider_SetPositionChangedCallback@callback^0,c
  1219   002858  0E2B               	movlw	high _ProcessSliderChange
  1220   00285A  6E16               	movwf	(MTOUCH_Slider_SetPositionChangedCallback@callback+1)^0,c
  1221   00285C  0E00               	movlw	low (_ProcessSliderChange shr (0+16))
  1222   00285E  6E17               	movwf	(MTOUCH_Slider_SetPositionChangedCallback@callback+2)^0,c
  1223   002860  EC74  F016         	call	_MTOUCH_Slider_SetPositionChangedCallback	;wreg free
  1224   002864                     l6172:
  1225                           
  1226                           ;main.c: 60:     {;main.c: 62:         MTOUCH_Service_Mainloop();
  1227   002864  EC50  F014         	call	_MTOUCH_Service_Mainloop	;wreg free
  1228                           
  1229                           ;main.c: 64:         ApplicationTask();
  1230   002868  ECC2  F00B         	call	_ApplicationTask	;wreg free
  1231   00286C  D7FB               	goto	l6172
  1232   00286E                     __end_of_main:
  1233                           	callstack 0
  1234                           
  1235 ;; *************** function _SYSTEM_Initialize *****************
  1236 ;; Defined at:
  1237 ;;		line 36 in file "mcc_generated_files/system/src/system.c"
  1238 ;; Parameters:    Size  Location     Type
  1239 ;;		None
  1240 ;; Auto vars:     Size  Location     Type
  1241 ;;		None
  1242 ;; Return value:  Size  Location     Type
  1243 ;;                  1    wreg      void 
  1244 ;; Registers used:
  1245 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1246 ;; Tracked objects:
  1247 ;;		On entry : 0/0
  1248 ;;		On exit  : 3F/E
  1249 ;;		Unchanged: 0/0
  1250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  1251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1255 ;;Total ram usage:        0 bytes
  1256 ;; Hardware stack levels used: 1
  1257 ;; Hardware stack levels required when called: 10
  1258 ;; This function calls:
  1259 ;;		_ADCC_Initialize
  1260 ;;		_CLOCK_Initialize
  1261 ;;		_INTERRUPT_Initialize
  1262 ;;		_MTOUCH_Initialize
  1263 ;;		_PIN_MANAGER_Initialize
  1264 ;;		_PWM4_Initialize
  1265 ;;		_TMR2_Initialize
  1266 ;; This function is called by:
  1267 ;;		_main
  1268 ;; This function uses a non-reentrant model
  1269 ;;
  1270                           
  1271                           	psect	text1
  1272   002B54                     __ptext1:
  1273                           	callstack 0
  1274   002B54                     _SYSTEM_Initialize:
  1275                           	callstack 20
  1276                           
  1277                           ;mcc_generated_files/system/src/system.c: 38:     CLOCK_Initialize();
  1278                           
  1279                           ;incstack = 0
  1280   002B54  EC39  F016         	call	_CLOCK_Initialize	;wreg free
  1281                           
  1282                           ;mcc_generated_files/system/src/system.c: 39:     PIN_MANAGER_Initialize();
  1283   002B58  EC6F  F010         	call	_PIN_MANAGER_Initialize	;wreg free
  1284                           
  1285                           ; BSR set to: 15
  1286                           ;mcc_generated_files/system/src/system.c: 40:     ADCC_Initialize();
  1287   002B5C  ECC8  F013         	call	_ADCC_Initialize	;wreg free
  1288                           
  1289                           ; BSR set to: 14
  1290                           ;mcc_generated_files/system/src/system.c: 41:     PWM4_Initialize();
  1291   002B60  EC30  F016         	call	_PWM4_Initialize	;wreg free
  1292                           
  1293                           ;mcc_generated_files/system/src/system.c: 42:     TMR2_Initialize();
  1294   002B64  EC35  F015         	call	_TMR2_Initialize	;wreg free
  1295                           
  1296                           ; BSR set to: 14
  1297                           ;mcc_generated_files/system/src/system.c: 43:     MTOUCH_Initialize();
  1298   002B68  ECF4  F015         	call	_MTOUCH_Initialize	;wreg free
  1299                           
  1300                           ; BSR set to: 14
  1301                           ;mcc_generated_files/system/src/system.c: 44:     INTERRUPT_Initialize();
  1302   002B6C  EF80  F014         	goto	_INTERRUPT_Initialize	;wreg free
  1303   002B70                     __end_of_SYSTEM_Initialize:
  1304                           	callstack 0
  1305                           
  1306 ;; *************** function _TMR2_Initialize *****************
  1307 ;; Defined at:
  1308 ;;		line 57 in file "mcc_generated_files/timer/src/tmr2.c"
  1309 ;; Parameters:    Size  Location     Type
  1310 ;;		None
  1311 ;; Auto vars:     Size  Location     Type
  1312 ;;		None
  1313 ;; Return value:  Size  Location     Type
  1314 ;;                  1    wreg      void 
  1315 ;; Registers used:
  1316 ;;		wreg, status,2, status,0, cstack
  1317 ;; Tracked objects:
  1318 ;;		On entry : 3F/E
  1319 ;;		On exit  : 3F/E
  1320 ;;		Unchanged: 0/0
  1321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  1322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1326 ;;Total ram usage:        0 bytes
  1327 ;; Hardware stack levels used: 1
  1328 ;; Hardware stack levels required when called: 7
  1329 ;; This function calls:
  1330 ;;		_TMR2_OverflowCallbackRegister
  1331 ;; This function is called by:
  1332 ;;		_SYSTEM_Initialize
  1333 ;; This function uses a non-reentrant model
  1334 ;;
  1335                           
  1336                           	psect	text2
  1337   002A6A                     __ptext2:
  1338                           	callstack 0
  1339   002A6A                     _TMR2_Initialize:
  1340                           	callstack 22
  1341                           
  1342                           ; BSR set to: 14
  1343                           ;mcc_generated_files/timer/src/tmr2.c: 61:     T2CLKCON = 0x1;
  1344                           
  1345                           ; BSR set to: 14
  1346                           ;incstack = 0
  1347   002A6A  0E01               	movlw	1
  1348   002A6C  6EBE               	movwf	190,c	;volatile
  1349                           
  1350                           ; BSR set to: 14
  1351                           ;mcc_generated_files/timer/src/tmr2.c: 63:     T2HLT = 0x0;
  1352   002A6E  6ABD               	clrf	189,c	;volatile
  1353                           
  1354                           ; BSR set to: 14
  1355                           ;mcc_generated_files/timer/src/tmr2.c: 65:     T2RST = 0x0;
  1356   002A70  6ABF               	clrf	191,c	;volatile
  1357                           
  1358                           ;mcc_generated_files/timer/src/tmr2.c: 67:     T2PR = 0xC7;
  1359   002A72  0EC7               	movlw	199
  1360   002A74  6EBB               	movwf	187,c	;volatile
  1361                           
  1362                           ; BSR set to: 14
  1363                           ;mcc_generated_files/timer/src/tmr2.c: 69:     T2TMR = 0x0;
  1364   002A76  6ABA               	clrf	186,c	;volatile
  1365                           
  1366                           ; BSR set to: 14
  1367                           ;mcc_generated_files/timer/src/tmr2.c: 72:     TMR2_OverflowCallbackRegister(TMR2_Defaul
      +                          tOverflowCallback);
  1368   002A78  0E00               	movlw	0
  1369   002A7A  6A15               	clrf	TMR2_OverflowCallbackRegister@InterruptHandler^0,c
  1370   002A7C  6A16               	clrf	(TMR2_OverflowCallbackRegister@InterruptHandler+1)^0,c
  1371   002A7E  6A17               	clrf	(TMR2_OverflowCallbackRegister@InterruptHandler+2)^0,c
  1372   002A80  EC6D  F016         	call	_TMR2_OverflowCallbackRegister	;wreg free
  1373                           
  1374                           ; BSR set to: 14
  1375                           ;mcc_generated_files/timer/src/tmr2.c: 75:     PIR4bits.TMR2IF = 0;
  1376   002A84  93C9               	bcf	201,1,b	;volatile
  1377                           
  1378                           ; BSR set to: 14
  1379                           ;mcc_generated_files/timer/src/tmr2.c: 77:     T2CON = 0x80;
  1380   002A86  0E80               	movlw	128
  1381   002A88  6EBC               	movwf	188,c	;volatile
  1382                           
  1383                           ; BSR set to: 14
  1384   002A8A  0C80               	retlw	128	;funcret
  1385   002A8C                     __end_of_TMR2_Initialize:
  1386                           	callstack 0
  1387                           
  1388 ;; *************** function _TMR2_OverflowCallbackRegister *****************
  1389 ;; Defined at:
  1390 ;;		line 122 in file "mcc_generated_files/timer/src/tmr2.c"
  1391 ;; Parameters:    Size  Location     Type
  1392 ;;  InterruptHan    3   20[COMRAM] PTR FTN()void 
  1393 ;;		 -> TMR2_DefaultOverflowCallback(1), 
  1394 ;; Auto vars:     Size  Location     Type
  1395 ;;		None
  1396 ;; Return value:  Size  Location     Type
  1397 ;;                  1    wreg      void 
  1398 ;; Registers used:
  1399 ;;		wreg, status,2, status,0
  1400 ;; Tracked objects:
  1401 ;;		On entry : 3F/E
  1402 ;;		On exit  : 3F/E
  1403 ;;		Unchanged: 3F/0
  1404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  1405 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1408 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1409 ;;Total ram usage:        3 bytes
  1410 ;; Hardware stack levels used: 1
  1411 ;; Hardware stack levels required when called: 6
  1412 ;; This function calls:
  1413 ;;		Nothing
  1414 ;; This function is called by:
  1415 ;;		_TMR2_Initialize
  1416 ;; This function uses a non-reentrant model
  1417 ;;
  1418                           
  1419                           	psect	text3
  1420   002CDA                     __ptext3:
  1421                           	callstack 0
  1422   002CDA                     _TMR2_OverflowCallbackRegister:
  1423                           	callstack 22
  1424                           
  1425                           ; BSR set to: 14
  1426                           ;mcc_generated_files/timer/src/tmr2.c: 122: void TMR2_OverflowCallbackRegister(void (* I
      +                          nterruptHandler)(void));mcc_generated_files/timer/src/tmr2.c: 123: {;mcc_generated_files
      +                          /timer/src/tmr2.c: 124:    TMR2_OverflowCallback = InterruptHandler;
  1427                           
  1428                           ; BSR set to: 14
  1429                           ;incstack = 0
  1430   002CDA  C015  F0FA         	movff	TMR2_OverflowCallbackRegister@InterruptHandler,_TMR2_OverflowCallback
  1431   002CDE  C016  F0FB         	movff	TMR2_OverflowCallbackRegister@InterruptHandler+1,_TMR2_OverflowCallback+1
  1432   002CE2  C017  F0FC         	movff	TMR2_OverflowCallbackRegister@InterruptHandler+2,_TMR2_OverflowCallback+2
  1433                           
  1434                           ; BSR set to: 14
  1435   002CE6  0012               	return		;funcret
  1436   002CE8                     __end_of_TMR2_OverflowCallbackRegister:
  1437                           	callstack 0
  1438                           
  1439 ;; *************** function _PWM4_Initialize *****************
  1440 ;; Defined at:
  1441 ;;		line 45 in file "mcc_generated_files/pwm/src/pwm4.c"
  1442 ;; Parameters:    Size  Location     Type
  1443 ;;		None
  1444 ;; Auto vars:     Size  Location     Type
  1445 ;;		None
  1446 ;; Return value:  Size  Location     Type
  1447 ;;                  1    wreg      void 
  1448 ;; Registers used:
  1449 ;;		wreg, status,2
  1450 ;; Tracked objects:
  1451 ;;		On entry : 3F/E
  1452 ;;		On exit  : 3F/E
  1453 ;;		Unchanged: 3F/0
  1454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  1455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1459 ;;Total ram usage:        0 bytes
  1460 ;; Hardware stack levels used: 1
  1461 ;; Hardware stack levels required when called: 6
  1462 ;; This function calls:
  1463 ;;		Nothing
  1464 ;; This function is called by:
  1465 ;;		_SYSTEM_Initialize
  1466 ;; This function uses a non-reentrant model
  1467 ;;
  1468                           
  1469                           	psect	text4
  1470   002C60                     __ptext4:
  1471                           	callstack 0
  1472   002C60                     _PWM4_Initialize:
  1473                           	callstack 23
  1474                           
  1475                           ; BSR set to: 14
  1476                           ;mcc_generated_files/pwm/src/pwm4.c: 49:     CCPTMRSbits.P4TSEL = 0x1;
  1477                           
  1478                           ; BSR set to: 14
  1479                           ;incstack = 0
  1480   002C60  50AD               	movf	173,w,c	;volatile
  1481   002C62  0B3F               	andlw	-193
  1482   002C64  0940               	iorlw	64
  1483   002C66  6EAD               	movwf	173,c	;volatile
  1484                           
  1485                           ;mcc_generated_files/pwm/src/pwm4.c: 52:     PWM4CON = 0x80;
  1486   002C68  0E80               	movlw	128
  1487   002C6A  6EA1               	movwf	161,c	;volatile
  1488                           
  1489                           ; BSR set to: 14
  1490                           ;mcc_generated_files/pwm/src/pwm4.c: 55:     PWM4DCH = 0x0;
  1491   002C6C  6AA0               	clrf	160,c	;volatile
  1492                           
  1493                           ; BSR set to: 14
  1494                           ;mcc_generated_files/pwm/src/pwm4.c: 58:     PWM4DCL = 0x0;
  1495   002C6E  6A9F               	clrf	159,c	;volatile
  1496                           
  1497                           ; BSR set to: 14
  1498   002C70  0012               	return		;funcret
  1499   002C72                     __end_of_PWM4_Initialize:
  1500                           	callstack 0
  1501                           
  1502 ;; *************** function _PIN_MANAGER_Initialize *****************
  1503 ;; Defined at:
  1504 ;;		line 38 in file "mcc_generated_files/system/src/pins.c"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;		None
  1507 ;; Auto vars:     Size  Location     Type
  1508 ;;		None
  1509 ;; Return value:  Size  Location     Type
  1510 ;;                  1    wreg      void 
  1511 ;; Registers used:
  1512 ;;		wreg, status,2
  1513 ;; Tracked objects:
  1514 ;;		On entry : 3F/E
  1515 ;;		On exit  : 3F/F
  1516 ;;		Unchanged: 0/0
  1517 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  1518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1520 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1521 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1522 ;;Total ram usage:        0 bytes
  1523 ;; Hardware stack levels used: 1
  1524 ;; Hardware stack levels required when called: 6
  1525 ;; This function calls:
  1526 ;;		Nothing
  1527 ;; This function is called by:
  1528 ;;		_SYSTEM_Initialize
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531                           
  1532                           	psect	text5
  1533   0020DE                     __ptext5:
  1534                           	callstack 0
  1535   0020DE                     _PIN_MANAGER_Initialize:
  1536                           	callstack 23
  1537                           
  1538                           ; BSR set to: 14
  1539                           ;mcc_generated_files/system/src/pins.c: 43:     LATA = 0x0;
  1540                           
  1541                           ; BSR set to: 14
  1542                           ;incstack = 0
  1543   0020DE  6A82               	clrf	130,c	;volatile
  1544                           
  1545                           ;mcc_generated_files/system/src/pins.c: 44:     LATB = 0x0;
  1546   0020E0  6A83               	clrf	131,c	;volatile
  1547                           
  1548                           ;mcc_generated_files/system/src/pins.c: 45:     LATC = 0x0;
  1549   0020E2  6A84               	clrf	132,c	;volatile
  1550                           
  1551                           ;mcc_generated_files/system/src/pins.c: 46:     LATD = 0x0;
  1552   0020E4  6A85               	clrf	133,c	;volatile
  1553                           
  1554                           ;mcc_generated_files/system/src/pins.c: 47:     LATE = 0x0;
  1555   0020E6  6A86               	clrf	134,c	;volatile
  1556                           
  1557                           ; BSR set to: 14
  1558                           ;mcc_generated_files/system/src/pins.c: 52:     TRISA = 0xF7;
  1559   0020E8  0EF7               	movlw	247
  1560   0020EA  6E87               	movwf	135,c	;volatile
  1561                           
  1562                           ;mcc_generated_files/system/src/pins.c: 53:     TRISB = 0xF9;
  1563   0020EC  0EF9               	movlw	249
  1564   0020EE  6E88               	movwf	136,c	;volatile
  1565                           
  1566                           ;mcc_generated_files/system/src/pins.c: 54:     TRISC = 0xF;
  1567   0020F0  0E0F               	movlw	15
  1568   0020F2  6E89               	movwf	137,c	;volatile
  1569                           
  1570                           ;mcc_generated_files/system/src/pins.c: 55:     TRISD = 0x8F;
  1571   0020F4  0E8F               	movlw	143
  1572   0020F6  6E8A               	movwf	138,c	;volatile
  1573                           
  1574                           ;mcc_generated_files/system/src/pins.c: 56:     TRISE = 0x7;
  1575   0020F8  0E07               	movlw	7
  1576   0020FA  6E8B               	movwf	139,c	;volatile
  1577                           
  1578                           ; BSR set to: 14
  1579                           ;mcc_generated_files/system/src/pins.c: 61:     ANSELA = 0xFF;
  1580   0020FC  010F               	movlb	15	; () banked
  1581   0020FE  690C               	setf	12,b	;volatile
  1582                           
  1583                           ;mcc_generated_files/system/src/pins.c: 62:     ANSELB = 0xF9;
  1584   002100  0EF9               	movlw	249
  1585   002102  6F14               	movwf	20,b	;volatile
  1586                           
  1587                           ;mcc_generated_files/system/src/pins.c: 63:     ANSELC = 0xF;
  1588   002104  0E0F               	movlw	15
  1589   002106  6F1C               	movwf	28,b	;volatile
  1590                           
  1591                           ;mcc_generated_files/system/src/pins.c: 64:     ANSELD = 0x8F;
  1592   002108  0E8F               	movlw	143
  1593   00210A  6F21               	movwf	33,b	;volatile
  1594                           
  1595                           ;mcc_generated_files/system/src/pins.c: 65:     ANSELE = 0x7;
  1596   00210C  0E07               	movlw	7
  1597   00210E  6F29               	movwf	41,b	;volatile
  1598                           
  1599                           ; BSR set to: 15
  1600                           ;mcc_generated_files/system/src/pins.c: 70:     WPUA = 0x0;
  1601   002110  6B0B               	clrf	11,b	;volatile
  1602                           
  1603                           ; BSR set to: 15
  1604                           ;mcc_generated_files/system/src/pins.c: 71:     WPUB = 0x0;
  1605   002112  6B13               	clrf	19,b	;volatile
  1606                           
  1607                           ; BSR set to: 15
  1608                           ;mcc_generated_files/system/src/pins.c: 72:     WPUC = 0x0;
  1609   002114  6B1B               	clrf	27,b	;volatile
  1610                           
  1611                           ; BSR set to: 15
  1612                           ;mcc_generated_files/system/src/pins.c: 73:     WPUD = 0x0;
  1613   002116  6B20               	clrf	32,b	;volatile
  1614                           
  1615                           ; BSR set to: 15
  1616                           ;mcc_generated_files/system/src/pins.c: 74:     WPUE = 0x0;
  1617   002118  6B28               	clrf	40,b	;volatile
  1618                           
  1619                           ; BSR set to: 15
  1620                           ;mcc_generated_files/system/src/pins.c: 79:     ODCONA = 0x0;
  1621   00211A  6B0A               	clrf	10,b	;volatile
  1622                           
  1623                           ; BSR set to: 15
  1624                           ;mcc_generated_files/system/src/pins.c: 80:     ODCONB = 0x0;
  1625   00211C  6B12               	clrf	18,b	;volatile
  1626                           
  1627                           ; BSR set to: 15
  1628                           ;mcc_generated_files/system/src/pins.c: 81:     ODCONC = 0x0;
  1629   00211E  6B1A               	clrf	26,b	;volatile
  1630                           
  1631                           ; BSR set to: 15
  1632                           ;mcc_generated_files/system/src/pins.c: 82:     ODCOND = 0x0;
  1633   002120  6B1F               	clrf	31,b	;volatile
  1634                           
  1635                           ; BSR set to: 15
  1636                           ;mcc_generated_files/system/src/pins.c: 83:     ODCONE = 0x0;
  1637   002122  6B27               	clrf	39,b	;volatile
  1638                           
  1639                           ; BSR set to: 15
  1640                           ;mcc_generated_files/system/src/pins.c: 88:     SLRCONA = 0xFF;
  1641   002124  6909               	setf	9,b	;volatile
  1642                           
  1643                           ; BSR set to: 15
  1644                           ;mcc_generated_files/system/src/pins.c: 89:     SLRCONB = 0xFF;
  1645   002126  6911               	setf	17,b	;volatile
  1646                           
  1647                           ; BSR set to: 15
  1648                           ;mcc_generated_files/system/src/pins.c: 90:     SLRCONC = 0xFF;
  1649   002128  6919               	setf	25,b	;volatile
  1650                           
  1651                           ; BSR set to: 15
  1652                           ;mcc_generated_files/system/src/pins.c: 91:     SLRCOND = 0xFF;
  1653   00212A  691E               	setf	30,b	;volatile
  1654                           
  1655                           ;mcc_generated_files/system/src/pins.c: 92:     SLRCONE = 0x7;
  1656   00212C  0E07               	movlw	7
  1657   00212E  6F26               	movwf	38,b	;volatile
  1658                           
  1659                           ; BSR set to: 15
  1660                           ;mcc_generated_files/system/src/pins.c: 97:     INLVLA = 0xFF;
  1661   002130  6908               	setf	8,b	;volatile
  1662                           
  1663                           ; BSR set to: 15
  1664                           ;mcc_generated_files/system/src/pins.c: 98:     INLVLB = 0xFF;
  1665   002132  6910               	setf	16,b	;volatile
  1666                           
  1667                           ; BSR set to: 15
  1668                           ;mcc_generated_files/system/src/pins.c: 99:     INLVLC = 0xFF;
  1669   002134  6918               	setf	24,b	;volatile
  1670                           
  1671                           ; BSR set to: 15
  1672                           ;mcc_generated_files/system/src/pins.c: 100:     INLVLD = 0xFF;
  1673   002136  691D               	setf	29,b	;volatile
  1674                           
  1675                           ;mcc_generated_files/system/src/pins.c: 101:     INLVLE = 0xF;
  1676   002138  0E0F               	movlw	15
  1677   00213A  6F25               	movwf	37,b	;volatile
  1678                           
  1679                           ;mcc_generated_files/system/src/pins.c: 109:     RA3PPS = 0x08;
  1680   00213C  0E08               	movlw	8
  1681   00213E  010E               	movlb	14	; () banked
  1682   002140  6FE5               	movwf	229,b	;volatile
  1683                           
  1684                           ; BSR set to: 14
  1685                           ;mcc_generated_files/system/src/pins.c: 114:     IOCAP = 0x0;
  1686   002142  010F               	movlb	15	; () banked
  1687   002144  6B07               	clrf	7,b	;volatile
  1688                           
  1689                           ; BSR set to: 15
  1690                           ;mcc_generated_files/system/src/pins.c: 115:     IOCAN = 0x0;
  1691   002146  6B06               	clrf	6,b	;volatile
  1692                           
  1693                           ; BSR set to: 15
  1694                           ;mcc_generated_files/system/src/pins.c: 116:     IOCAF = 0x0;
  1695   002148  6B05               	clrf	5,b	;volatile
  1696                           
  1697                           ; BSR set to: 15
  1698                           ;mcc_generated_files/system/src/pins.c: 117:     IOCBP = 0x0;
  1699   00214A  6B0F               	clrf	15,b	;volatile
  1700                           
  1701                           ; BSR set to: 15
  1702                           ;mcc_generated_files/system/src/pins.c: 118:     IOCBN = 0x0;
  1703   00214C  6B0E               	clrf	14,b	;volatile
  1704                           
  1705                           ; BSR set to: 15
  1706                           ;mcc_generated_files/system/src/pins.c: 119:     IOCBF = 0x0;
  1707   00214E  6B0D               	clrf	13,b	;volatile
  1708                           
  1709                           ; BSR set to: 15
  1710                           ;mcc_generated_files/system/src/pins.c: 120:     IOCCP = 0x0;
  1711   002150  6B17               	clrf	23,b	;volatile
  1712                           
  1713                           ; BSR set to: 15
  1714                           ;mcc_generated_files/system/src/pins.c: 121:     IOCCN = 0x0;
  1715   002152  6B16               	clrf	22,b	;volatile
  1716                           
  1717                           ; BSR set to: 15
  1718                           ;mcc_generated_files/system/src/pins.c: 122:     IOCCF = 0x0;
  1719   002154  6B15               	clrf	21,b	;volatile
  1720                           
  1721                           ; BSR set to: 15
  1722                           ;mcc_generated_files/system/src/pins.c: 123:     IOCEP = 0x0;
  1723   002156  6B24               	clrf	36,b	;volatile
  1724                           
  1725                           ; BSR set to: 15
  1726                           ;mcc_generated_files/system/src/pins.c: 124:     IOCEN = 0x0;
  1727   002158  6B23               	clrf	35,b	;volatile
  1728                           
  1729                           ; BSR set to: 15
  1730                           ;mcc_generated_files/system/src/pins.c: 125:     IOCEF = 0x0;
  1731   00215A  6B22               	clrf	34,b	;volatile
  1732                           
  1733                           ; BSR set to: 15
  1734   00215C  0012               	return		;funcret
  1735   00215E                     __end_of_PIN_MANAGER_Initialize:
  1736                           	callstack 0
  1737                           
  1738 ;; *************** function _INTERRUPT_Initialize *****************
  1739 ;; Defined at:
  1740 ;;		line 42 in file "mcc_generated_files/system/src/interrupt.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;		None
  1743 ;; Auto vars:     Size  Location     Type
  1744 ;;		None
  1745 ;; Return value:  Size  Location     Type
  1746 ;;                  1    wreg      void 
  1747 ;; Registers used:
  1748 ;;		wreg, status,2, status,0, cstack
  1749 ;; Tracked objects:
  1750 ;;		On entry : 3F/E
  1751 ;;		On exit  : 3F/E
  1752 ;;		Unchanged: 0/0
  1753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  1754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1757 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1758 ;;Total ram usage:        0 bytes
  1759 ;; Hardware stack levels used: 1
  1760 ;; Hardware stack levels required when called: 7
  1761 ;; This function calls:
  1762 ;;		_INT0_SetInterruptHandler
  1763 ;;		_INT1_SetInterruptHandler
  1764 ;;		_INT2_SetInterruptHandler
  1765 ;; This function is called by:
  1766 ;;		_SYSTEM_Initialize
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           	psect	text6
  1771   002900                     __ptext6:
  1772                           	callstack 0
  1773   002900                     _INTERRUPT_Initialize:
  1774                           	callstack 22
  1775                           
  1776                           ; BSR set to: 14
  1777                           ;mcc_generated_files/system/src/interrupt.c: 45:     INTCONbits.IPEN = 0;
  1778                           
  1779                           ; BSR set to: 15
  1780                           ;incstack = 0
  1781   002900  9AF2               	bcf	242,5,c	;volatile
  1782                           
  1783                           ;mcc_generated_files/system/src/interrupt.c: 49:     (PIR0bits.INT0IF = 0);
  1784   002902  91C5               	bcf	197,0,b	;volatile
  1785                           
  1786                           ;mcc_generated_files/system/src/interrupt.c: 50:     (INTCONbits.INT0EDG = 1);
  1787   002904  80F2               	bsf	242,0,c	;volatile
  1788                           
  1789                           ; BSR set to: 14
  1790                           ;mcc_generated_files/system/src/interrupt.c: 52:     INT0_SetInterruptHandler(INT0_Defau
      +                          ltInterruptHandler);
  1791   002906  0E00               	movlw	0
  1792   002908  6A15               	clrf	INT0_SetInterruptHandler@InterruptHandler^0,c
  1793   00290A  6A16               	clrf	(INT0_SetInterruptHandler@InterruptHandler+1)^0,c
  1794   00290C  6A17               	clrf	(INT0_SetInterruptHandler@InterruptHandler+2)^0,c
  1795   00290E  EC9C  F016         	call	_INT0_SetInterruptHandler	;wreg free
  1796                           
  1797                           ; BSR set to: 14
  1798                           ;mcc_generated_files/system/src/interrupt.c: 57:     (PIR0bits.INT1IF = 0);
  1799   002912  93C5               	bcf	197,1,b	;volatile
  1800                           
  1801                           ; BSR set to: 14
  1802                           ;mcc_generated_files/system/src/interrupt.c: 58:     (INTCONbits.INT1EDG = 1);
  1803   002914  82F2               	bsf	242,1,c	;volatile
  1804                           
  1805                           ;mcc_generated_files/system/src/interrupt.c: 60:     INT1_SetInterruptHandler(INT1_Defau
      +                          ltInterruptHandler);
  1806   002916  0E00               	movlw	0
  1807   002918  6A15               	clrf	INT1_SetInterruptHandler@InterruptHandler^0,c
  1808   00291A  6A16               	clrf	(INT1_SetInterruptHandler@InterruptHandler+1)^0,c
  1809   00291C  6A17               	clrf	(INT1_SetInterruptHandler@InterruptHandler+2)^0,c
  1810   00291E  EC9B  F016         	call	_INT1_SetInterruptHandler	;wreg free
  1811                           
  1812                           ; BSR set to: 14
  1813                           ;mcc_generated_files/system/src/interrupt.c: 65:     (PIR0bits.INT2IF = 0);
  1814   002922  95C5               	bcf	197,2,b	;volatile
  1815                           
  1816                           ; BSR set to: 14
  1817                           ;mcc_generated_files/system/src/interrupt.c: 66:     (INTCONbits.INT2EDG = 1);
  1818   002924  84F2               	bsf	242,2,c	;volatile
  1819                           
  1820                           ;mcc_generated_files/system/src/interrupt.c: 68:     INT2_SetInterruptHandler(INT2_Defau
      +                          ltInterruptHandler);
  1821   002926  6A15               	clrf	INT2_SetInterruptHandler@InterruptHandler^0,c
  1822   002928  6A16               	clrf	(INT2_SetInterruptHandler@InterruptHandler+1)^0,c
  1823   00292A  6A17               	clrf	(INT2_SetInterruptHandler@InterruptHandler+2)^0,c
  1824   00292C  0C00               	retlw	0	;wreg free
  1825   00292E                     __end_of_INTERRUPT_Initialize:
  1826                           	callstack 0
  1827                           
  1828 ;; *************** function _INT2_SetInterruptHandler *****************
  1829 ;; Defined at:
  1830 ;;		line 174 in file "mcc_generated_files/system/src/interrupt.c"
  1831 ;; Parameters:    Size  Location     Type
  1832 ;;  InterruptHan    3   20[COMRAM] PTR FTN()void 
  1833 ;;		 -> INT2_DefaultInterruptHandler(1), 
  1834 ;; Auto vars:     Size  Location     Type
  1835 ;;		None
  1836 ;; Return value:  Size  Location     Type
  1837 ;;                  1    wreg      void 
  1838 ;; Registers used:
  1839 ;;		None
  1840 ;; Tracked objects:
  1841 ;;		On entry : 3F/E
  1842 ;;		On exit  : 3F/E
  1843 ;;		Unchanged: 3F/0
  1844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  1845 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1848 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1849 ;;Total ram usage:        3 bytes
  1850 ;; Hardware stack levels used: 1
  1851 ;; Hardware stack levels required when called: 6
  1852 ;; This function calls:
  1853 ;;		Nothing
  1854 ;; This function is called by:
  1855 ;;		_INTERRUPT_Initialize
  1856 ;; This function uses a non-reentrant model
  1857 ;;
  1858                           
  1859                           	psect	text7
  1860   002D34                     __ptext7:
  1861                           	callstack 0
  1862   002D34                     _INT2_SetInterruptHandler:
  1863                           	callstack 22
  1864                           
  1865                           ; BSR set to: 14
  1866                           
  1867                           ; BSR set to: 14
  1868                           ;incstack = 0
  1869   002D34  0012               	return		;funcret
  1870   002D36                     __end_of_INT2_SetInterruptHandler:
  1871                           	callstack 0
  1872                           
  1873 ;; *************** function _INT1_SetInterruptHandler *****************
  1874 ;; Defined at:
  1875 ;;		line 148 in file "mcc_generated_files/system/src/interrupt.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;  InterruptHan    3   20[COMRAM] PTR FTN()void 
  1878 ;;		 -> INT1_DefaultInterruptHandler(1), 
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;		None
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      void 
  1883 ;; Registers used:
  1884 ;;		None
  1885 ;; Tracked objects:
  1886 ;;		On entry : 3F/E
  1887 ;;		On exit  : 3F/E
  1888 ;;		Unchanged: 3F/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  1890 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1893 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1894 ;;Total ram usage:        3 bytes
  1895 ;; Hardware stack levels used: 1
  1896 ;; Hardware stack levels required when called: 6
  1897 ;; This function calls:
  1898 ;;		Nothing
  1899 ;; This function is called by:
  1900 ;;		_INTERRUPT_Initialize
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           	psect	text8
  1905   002D36                     __ptext8:
  1906                           	callstack 0
  1907   002D36                     _INT1_SetInterruptHandler:
  1908                           	callstack 22
  1909                           
  1910                           ; BSR set to: 14
  1911                           
  1912                           ; BSR set to: 14
  1913                           ;incstack = 0
  1914   002D36  0012               	return		;funcret
  1915   002D38                     __end_of_INT1_SetInterruptHandler:
  1916                           	callstack 0
  1917                           
  1918 ;; *************** function _INT0_SetInterruptHandler *****************
  1919 ;; Defined at:
  1920 ;;		line 122 in file "mcc_generated_files/system/src/interrupt.c"
  1921 ;; Parameters:    Size  Location     Type
  1922 ;;  InterruptHan    3   20[COMRAM] PTR FTN()void 
  1923 ;;		 -> INT0_DefaultInterruptHandler(1), 
  1924 ;; Auto vars:     Size  Location     Type
  1925 ;;		None
  1926 ;; Return value:  Size  Location     Type
  1927 ;;                  1    wreg      void 
  1928 ;; Registers used:
  1929 ;;		None
  1930 ;; Tracked objects:
  1931 ;;		On entry : 3F/E
  1932 ;;		On exit  : 3F/E
  1933 ;;		Unchanged: 3F/0
  1934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  1935 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1938 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1939 ;;Total ram usage:        3 bytes
  1940 ;; Hardware stack levels used: 1
  1941 ;; Hardware stack levels required when called: 6
  1942 ;; This function calls:
  1943 ;;		Nothing
  1944 ;; This function is called by:
  1945 ;;		_INTERRUPT_Initialize
  1946 ;; This function uses a non-reentrant model
  1947 ;;
  1948                           
  1949                           	psect	text9
  1950   002D38                     __ptext9:
  1951                           	callstack 0
  1952   002D38                     _INT0_SetInterruptHandler:
  1953                           	callstack 22
  1954                           
  1955                           ; BSR set to: 14
  1956                           
  1957                           ; BSR set to: 14
  1958                           ;incstack = 0
  1959   002D38  0012               	return		;funcret
  1960   002D3A                     __end_of_INT0_SetInterruptHandler:
  1961                           	callstack 0
  1962                           
  1963 ;; *************** function _CLOCK_Initialize *****************
  1964 ;; Defined at:
  1965 ;;		line 37 in file "mcc_generated_files/system/src/clock.c"
  1966 ;; Parameters:    Size  Location     Type
  1967 ;;		None
  1968 ;; Auto vars:     Size  Location     Type
  1969 ;;		None
  1970 ;; Return value:  Size  Location     Type
  1971 ;;                  1    wreg      void 
  1972 ;; Registers used:
  1973 ;;		wreg, status,2
  1974 ;; Tracked objects:
  1975 ;;		On entry : 0/0
  1976 ;;		On exit  : 3F/E
  1977 ;;		Unchanged: 0/0
  1978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  1979 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1980 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1982 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  1983 ;;Total ram usage:        0 bytes
  1984 ;; Hardware stack levels used: 1
  1985 ;; Hardware stack levels required when called: 6
  1986 ;; This function calls:
  1987 ;;		Nothing
  1988 ;; This function is called by:
  1989 ;;		_SYSTEM_Initialize
  1990 ;; This function uses a non-reentrant model
  1991 ;;
  1992                           
  1993                           	psect	text10
  1994   002C72                     __ptext10:
  1995                           	callstack 0
  1996   002C72                     _CLOCK_Initialize:
  1997                           	callstack 23
  1998                           
  1999                           ;mcc_generated_files/system/src/clock.c: 41:     OSCCON1 = 0x60;
  2000                           
  2001                           ; BSR set to: 14
  2002                           ;incstack = 0
  2003   002C72  0E60               	movlw	96
  2004   002C74  010E               	movlb	14	; () banked
  2005   002C76  6FD3               	movwf	211,b	;volatile
  2006                           
  2007                           ; BSR set to: 14
  2008                           ;mcc_generated_files/system/src/clock.c: 43:     OSCCON3 = 0x0;
  2009   002C78  6BD5               	clrf	213,b	;volatile
  2010                           
  2011                           ; BSR set to: 14
  2012                           ;mcc_generated_files/system/src/clock.c: 45:     OSCEN = 0x0;
  2013   002C7A  6BD7               	clrf	215,b	;volatile
  2014                           
  2015                           ;mcc_generated_files/system/src/clock.c: 47:     OSCFRQ = 0x6;
  2016   002C7C  0E06               	movlw	6
  2017   002C7E  6FD9               	movwf	217,b	;volatile
  2018                           
  2019                           ; BSR set to: 14
  2020                           ;mcc_generated_files/system/src/clock.c: 49:     OSCTUNE = 0x0;
  2021   002C80  6BD8               	clrf	216,b	;volatile
  2022                           
  2023                           ; BSR set to: 14
  2024   002C82  0012               	return		;funcret
  2025   002C84                     __end_of_CLOCK_Initialize:
  2026                           	callstack 0
  2027                           
  2028 ;; *************** function _ADCC_Initialize *****************
  2029 ;; Defined at:
  2030 ;;		line 47 in file "mcc_generated_files/adc/src/adcc.c"
  2031 ;; Parameters:    Size  Location     Type
  2032 ;;		None
  2033 ;; Auto vars:     Size  Location     Type
  2034 ;;		None
  2035 ;; Return value:  Size  Location     Type
  2036 ;;                  1    wreg      void 
  2037 ;; Registers used:
  2038 ;;		wreg, status,2, status,0, cstack
  2039 ;; Tracked objects:
  2040 ;;		On entry : 3F/F
  2041 ;;		On exit  : 3F/E
  2042 ;;		Unchanged: 0/0
  2043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  2044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2045 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2047 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2048 ;;Total ram usage:        0 bytes
  2049 ;; Hardware stack levels used: 1
  2050 ;; Hardware stack levels required when called: 7
  2051 ;; This function calls:
  2052 ;;		_ADCC_SetADTIInterruptHandler
  2053 ;; This function is called by:
  2054 ;;		_SYSTEM_Initialize
  2055 ;; This function uses a non-reentrant model
  2056 ;;
  2057                           
  2058                           	psect	text11
  2059   002790                     __ptext11:
  2060                           	callstack 0
  2061   002790                     _ADCC_Initialize:
  2062                           	callstack 0
  2063                           
  2064                           ; BSR set to: 15
  2065                           ;mcc_generated_files/adc/src/adcc.c: 51:     ADLTHL = 0x0;
  2066                           
  2067                           ; BSR set to: 14
  2068                           ;incstack = 0
  2069                           
  2070                           ;mcc_generated_files/adc/src/adcc.c: 53:     ADLTHH = 0x0;
  2071                           
  2072                           ;mcc_generated_files/adc/src/adcc.c: 55:     ADUTHL = 0x0;
  2073                           
  2074                           ;mcc_generated_files/adc/src/adcc.c: 57:     ADUTHH = 0x0;
  2075                           
  2076                           ;mcc_generated_files/adc/src/adcc.c: 59:     ADSTPTL = 0x0;
  2077                           
  2078                           ;mcc_generated_files/adc/src/adcc.c: 61:     ADSTPTH = 0x0;
  2079   002790  ECC1  F013         	call	PL193	;call to abstracted procedure
  2080                           
  2081                           ;mcc_generated_files/adc/src/adcc.c: 63:     ADRPT = 0x0;
  2082   002794  6A61               	clrf	97,c	;volatile
  2083                           
  2084                           ;mcc_generated_files/adc/src/adcc.c: 65:     ADPCH = 0x0;
  2085   002796  6B5A               	clrf	90,b	;volatile
  2086                           
  2087                           ;mcc_generated_files/adc/src/adcc.c: 67:     ADCAP = 0x0;
  2088   002798  6B58               	clrf	88,b	;volatile
  2089                           
  2090                           ;mcc_generated_files/adc/src/adcc.c: 69:     ADPRE = 0x0;
  2091   00279A  6B59               	clrf	89,b	;volatile
  2092                           
  2093                           ;mcc_generated_files/adc/src/adcc.c: 71:     ADCON1 = 0x0;
  2094   00279C  6B54               	clrf	84,b	;volatile
  2095                           
  2096                           ;mcc_generated_files/adc/src/adcc.c: 73:     ADCON2 = 0x0;
  2097   00279E  6B55               	clrf	85,b	;volatile
  2098                           
  2099                           ;mcc_generated_files/adc/src/adcc.c: 75:     ADCON3 = 0x0;
  2100   0027A0  6B56               	clrf	86,b	;volatile
  2101                           
  2102                           ;mcc_generated_files/adc/src/adcc.c: 77:     ADSTAT = 0x0;
  2103   0027A2  6A60               	clrf	96,c	;volatile
  2104                           
  2105                           ;mcc_generated_files/adc/src/adcc.c: 79:     ADREF = 0x0;
  2106   0027A4  6B53               	clrf	83,b	;volatile
  2107                           
  2108                           ;mcc_generated_files/adc/src/adcc.c: 81:     ADACT = 0x0;
  2109   0027A6  6B51               	clrf	81,b	;volatile
  2110                           
  2111                           ;mcc_generated_files/adc/src/adcc.c: 83:     ADCLK = 0x0;
  2112   0027A8  6B52               	clrf	82,b	;volatile
  2113                           
  2114                           ; BSR set to: 15
  2115                           ;mcc_generated_files/adc/src/adcc.c: 85:     ADCON0 = 0x85;
  2116   0027AA  0E85               	movlw	133
  2117   0027AC  6F5B               	movwf	91,b	;volatile
  2118                           
  2119                           ; BSR set to: 15
  2120                           ;mcc_generated_files/adc/src/adcc.c: 87:     ADACQ = 0x0;
  2121   0027AE  6B57               	clrf	87,b	;volatile
  2122                           
  2123                           ; BSR set to: 15
  2124                           ;mcc_generated_files/adc/src/adcc.c: 90:     PIR1bits.ADIF = 0;
  2125   0027B0  010E               	movlb	14	; () banked
  2126   0027B2  91C6               	bcf	198,0,b	;volatile
  2127                           
  2128                           ; BSR set to: 14
  2129                           ;mcc_generated_files/adc/src/adcc.c: 93:     PIR1bits.ADTIF = 0;
  2130   0027B4  93C6               	bcf	198,1,b	;volatile
  2131                           
  2132                           ; BSR set to: 14
  2133                           ;mcc_generated_files/adc/src/adcc.c: 95:     ADCC_SetADTIInterruptHandler(ADCC_DefaultAD
      +                          TI_ISR);
  2134   0027B6  0E44               	movlw	low _ADCC_DefaultADTI_ISR
  2135   0027B8  6E15               	movwf	ADCC_SetADTIInterruptHandler@InterruptHandler^0,c
  2136   0027BA  0E2D               	movlw	high _ADCC_DefaultADTI_ISR
  2137   0027BC  6E16               	movwf	(ADCC_SetADTIInterruptHandler@InterruptHandler+1)^0,c
  2138   0027BE  0E00               	movlw	low (_ADCC_DefaultADTI_ISR shr (0+16))
  2139   0027C0  6E17               	movwf	(ADCC_SetADTIInterruptHandler@InterruptHandler+2)^0,c
  2140   0027C2  EC7B  F016         	call	_ADCC_SetADTIInterruptHandler	;wreg free
  2141                           
  2142                           ; BSR set to: 14
  2143                           ;mcc_generated_files/adc/src/adcc.c: 97:     PIE1bits.ADTIE = 1;
  2144   0027C6  83BE               	bsf	190,1,b	;volatile
  2145                           
  2146                           ; BSR set to: 14
  2147   0027C8  0012               	return		;funcret
  2148   0027CA                     __end_of_ADCC_Initialize:
  2149                           	callstack 0
  2150                           
  2151 ;; *************** function _MTOUCH_Slider_SetPositionChangedCallback *****************
  2152 ;; Defined at:
  2153 ;;		line 1000 in file "mcc_generated_files/touch/mtouch_slider.c"
  2154 ;; Parameters:    Size  Location     Type
  2155 ;;  callback        3   20[COMRAM] PTR FTN(enum E13201,)voi
  2156 ;;		 -> ProcessSliderChange(1), 
  2157 ;; Auto vars:     Size  Location     Type
  2158 ;;		None
  2159 ;; Return value:  Size  Location     Type
  2160 ;;                  1    wreg      void 
  2161 ;; Registers used:
  2162 ;;		wreg, status,2, status,0
  2163 ;; Tracked objects:
  2164 ;;		On entry : 3F/E
  2165 ;;		On exit  : 3F/E
  2166 ;;		Unchanged: 3F/0
  2167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  2168 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2169 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2171 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2172 ;;Total ram usage:        3 bytes
  2173 ;; Hardware stack levels used: 1
  2174 ;; Hardware stack levels required when called: 6
  2175 ;; This function calls:
  2176 ;;		Nothing
  2177 ;; This function is called by:
  2178 ;;		_main
  2179 ;; This function uses a non-reentrant model
  2180 ;;
  2181                           
  2182                           	psect	text12
  2183   002CE8                     __ptext12:
  2184                           	callstack 0
  2185   002CE8                     _MTOUCH_Slider_SetPositionChangedCallback:
  2186                           	callstack 24
  2187                           
  2188                           ; BSR set to: 14
  2189                           ;mcc_generated_files/touch/mtouch_slider.c: 1000: void MTOUCH_Slider_SetPositionChangedC
      +                          allback(void (*callback)(enum mtouch_slider_names));mcc_generated_files/touch/mtouch_sli
      +                          der.c: 1001: {;mcc_generated_files/touch/mtouch_slider.c: 1002:     callback_position_ch
      +                          anged = callback;
  2190                           
  2191                           ; BSR set to: 14
  2192                           ;incstack = 0
  2193   002CE8  C015  F0CF         	movff	MTOUCH_Slider_SetPositionChangedCallback@callback,_callback_position_changed
  2194   002CEC  C016  F0D0         	movff	MTOUCH_Slider_SetPositionChangedCallback@callback+1,_callback_position_changed+1
  2195   002CF0  C017  F0D1         	movff	MTOUCH_Slider_SetPositionChangedCallback@callback+2,_callback_position_changed+2
  2196                           
  2197                           ; BSR set to: 14
  2198   002CF4  0012               	return		;funcret
  2199   002CF6                     __end_of_MTOUCH_Slider_SetPositionChangedCallback:
  2200                           	callstack 0
  2201                           
  2202 ;; *************** function _MTOUCH_Service_Mainloop *****************
  2203 ;; Defined at:
  2204 ;;		line 98 in file "mcc_generated_files/touch/mtouch.c"
  2205 ;; Parameters:    Size  Location     Type
  2206 ;;		None
  2207 ;; Auto vars:     Size  Location     Type
  2208 ;;		None
  2209 ;; Return value:  Size  Location     Type
  2210 ;;                  1    wreg      _Bool 
  2211 ;; Registers used:
  2212 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, tblptrl, tblptrh, tblptru, prodl, p
      +rodh, cstack
  2213 ;; Tracked objects:
  2214 ;;		On entry : 0/E
  2215 ;;		On exit  : 0/0
  2216 ;;		Unchanged: 0/0
  2217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  2218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2222 ;;Total ram usage:        0 bytes
  2223 ;; Hardware stack levels used: 1
  2224 ;; Hardware stack levels required when called: 12
  2225 ;; This function calls:
  2226 ;;		_MTOUCH_Button_ServiceAll
  2227 ;;		_MTOUCH_Initialize
  2228 ;;		_MTOUCH_Sensor_SampleAll
  2229 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  2230 ;;		_MTOUCH_Slider_ServiceAll
  2231 ;;		_MTOUCH_Tick
  2232 ;;		_MTOUCH_needReburst
  2233 ;; This function is called by:
  2234 ;;		_main
  2235 ;; This function uses a non-reentrant model
  2236 ;;
  2237                           
  2238                           	psect	text13
  2239   0028A0                     __ptext13:
  2240                           	callstack 0
  2241   0028A0                     _MTOUCH_Service_Mainloop:
  2242                           	callstack 18
  2243                           
  2244                           ;mcc_generated_files/touch/mtouch.c: 100:     if(mtouch_request_init)
  2245                           
  2246                           ; BSR set to: 14
  2247                           ;incstack = 0
  2248   0028A0  5048               	movf	_mtouch_request_init^0,w,c
  2249   0028A2  E003               	bz	l6134
  2250                           
  2251                           ;mcc_generated_files/touch/mtouch.c: 101:     {;mcc_generated_files/touch/mtouch.c: 102:
      +                                   MTOUCH_Initialize();
  2252   0028A4  ECF4  F015         	call	_MTOUCH_Initialize	;wreg free
  2253                           
  2254                           ; BSR set to: 14
  2255                           ;mcc_generated_files/touch/mtouch.c: 103:         mtouch_request_init = 0;
  2256   0028A8  6A48               	clrf	_mtouch_request_init^0,c
  2257   0028AA                     l6134:
  2258                           
  2259                           ;mcc_generated_files/touch/mtouch.c: 106:     mtouch_time_toScan = 1;
  2260   0028AA  0E01               	movlw	1
  2261   0028AC  6E49               	movwf	_mtouch_time_toScan^0,c
  2262                           
  2263                           ;mcc_generated_files/touch/mtouch.c: 109:     {;mcc_generated_files/touch/mtouch.c: 110:
      +                                       if(MTOUCH_Sensor_SampleAll() == 0)
  2264                           
  2265                           ;mcc_generated_files/touch/mtouch.c: 108:     if(mtouch_time_toScan)
  2266   0028AE  ECEA  F015         	call	_MTOUCH_Sensor_SampleAll	;wreg free
  2267   0028B2  0900               	iorlw	0
  2268   0028B4  E101               	bnz	l6144
  2269                           
  2270                           ;mcc_generated_files/touch/mtouch.c: 111:             {;mcc_generated_files/touch/mtouch
      +                          .c: 112:                 return 0;
  2271   0028B6  0C00               	retlw	0
  2272   0028B8                     l6144:
  2273                           
  2274                           ;mcc_generated_files/touch/mtouch.c: 114:             MTOUCH_Button_ServiceAll();
  2275   0028B8  ECDF  F015         	call	_MTOUCH_Button_ServiceAll	;wreg free
  2276                           
  2277                           ;mcc_generated_files/touch/mtouch.c: 115:             MTOUCH_Slider_ServiceAll();
  2278   0028BC  EC5D  F016         	call	_MTOUCH_Slider_ServiceAll	;wreg free
  2279                           
  2280                           ; BSR set to: 1
  2281                           ;mcc_generated_files/touch/mtouch.c: 116:             mtouch_time_toScan = MTOUCH_needRe
      +                          burst();
  2282   0028C0  EC9D  F016         	call	_MTOUCH_needReburst	;wreg free
  2283   0028C4  6E49               	movwf	_mtouch_time_toScan^0,c
  2284                           
  2285                           ; BSR set to: 1
  2286                           ;mcc_generated_files/touch/mtouch.c: 117:             MTOUCH_Sensor_Sampled_ResetAll();
  2287   0028C6  ECEB  F014         	call	_MTOUCH_Sensor_Sampled_ResetAll	;wreg free
  2288                           
  2289                           ;mcc_generated_files/touch/mtouch.c: 118:             MTOUCH_Tick();
  2290   0028CA  EC8C  F016         	call	_MTOUCH_Tick	;wreg free
  2291                           
  2292                           ;mcc_generated_files/touch/mtouch.c: 119:             return 1;
  2293   0028CE  0C01               	retlw	1	;funcret
  2294   0028D0                     __end_of_MTOUCH_Service_Mainloop:
  2295                           	callstack 0
  2296                           
  2297 ;; *************** function _MTOUCH_needReburst *****************
  2298 ;; Defined at:
  2299 ;;		line 142 in file "mcc_generated_files/touch/mtouch.c"
  2300 ;; Parameters:    Size  Location     Type
  2301 ;;		None
  2302 ;; Auto vars:     Size  Location     Type
  2303 ;;  needReburst     1    0        _Bool 
  2304 ;; Return value:  Size  Location     Type
  2305 ;;                  1    wreg      _Bool 
  2306 ;; Registers used:
  2307 ;;		wreg
  2308 ;; Tracked objects:
  2309 ;;		On entry : 3F/1
  2310 ;;		On exit  : 3F/1
  2311 ;;		Unchanged: 3F/0
  2312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  2313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2317 ;;Total ram usage:        0 bytes
  2318 ;; Hardware stack levels used: 1
  2319 ;; Hardware stack levels required when called: 6
  2320 ;; This function calls:
  2321 ;;		Nothing
  2322 ;; This function is called by:
  2323 ;;		_MTOUCH_Service_Mainloop
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           	psect	text14
  2328   002D3A                     __ptext14:
  2329                           	callstack 0
  2330   002D3A                     _MTOUCH_needReburst:
  2331                           	callstack 23
  2332                           
  2333                           ; BSR set to: 1
  2334                           
  2335                           ; BSR set to: 1
  2336                           ;mcc_generated_files/touch/mtouch.c: 146:     return needReburst;
  2337                           
  2338                           ; BSR set to: 1
  2339                           
  2340                           ;incstack = 0
  2341   002D3A  0C00               	retlw	0	;funcret
  2342   002D3C                     __end_of_MTOUCH_needReburst:
  2343                           	callstack 0
  2344                           
  2345 ;; *************** function _MTOUCH_Tick *****************
  2346 ;; Defined at:
  2347 ;;		line 132 in file "mcc_generated_files/touch/mtouch.c"
  2348 ;; Parameters:    Size  Location     Type
  2349 ;;		None
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;		None
  2352 ;; Return value:  Size  Location     Type
  2353 ;;                  1    wreg      void 
  2354 ;; Registers used:
  2355 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2356 ;; Tracked objects:
  2357 ;;		On entry : 0/1
  2358 ;;		On exit  : 0/0
  2359 ;;		Unchanged: 0/0
  2360 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  2361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2365 ;;Total ram usage:        0 bytes
  2366 ;; Hardware stack levels used: 1
  2367 ;; Hardware stack levels required when called: 8
  2368 ;; This function calls:
  2369 ;;		_MTOUCH_Button_Tick
  2370 ;; This function is called by:
  2371 ;;		_MTOUCH_Service_Mainloop
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374                           
  2375                           	psect	text15
  2376   002D18                     __ptext15:
  2377                           	callstack 0
  2378   002D18                     _MTOUCH_Tick:
  2379                           	callstack 21
  2380                           
  2381                           ;mcc_generated_files/touch/mtouch.c: 134:     MTOUCH_Button_Tick();
  2382                           
  2383                           ; BSR set to: 1
  2384                           ;incstack = 0
  2385   002D18  EF8A  F015         	goto	_MTOUCH_Button_Tick	;wreg free
  2386   002D1C                     __end_of_MTOUCH_Tick:
  2387                           	callstack 0
  2388                           
  2389 ;; *************** function _MTOUCH_Button_Tick *****************
  2390 ;; Defined at:
  2391 ;;		line 347 in file "mcc_generated_files/touch/mtouch_button.c"
  2392 ;; Parameters:    Size  Location     Type
  2393 ;;		None
  2394 ;; Auto vars:     Size  Location     Type
  2395 ;;  i               1   24[COMRAM] unsigned char 
  2396 ;; Return value:  Size  Location     Type
  2397 ;;                  1    wreg      void 
  2398 ;; Registers used:
  2399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2400 ;; Tracked objects:
  2401 ;;		On entry : 0/1
  2402 ;;		On exit  : 0/0
  2403 ;;		Unchanged: 0/0
  2404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  2405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2406 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2408 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2409 ;;Total ram usage:        1 bytes
  2410 ;; Hardware stack levels used: 1
  2411 ;; Hardware stack levels required when called: 7
  2412 ;; This function calls:
  2413 ;;		_Button_Tick_helper
  2414 ;; This function is called by:
  2415 ;;		_MTOUCH_Tick
  2416 ;; This function uses a non-reentrant model
  2417 ;;
  2418                           
  2419                           	psect	text16
  2420   002B14                     __ptext16:
  2421                           	callstack 0
  2422   002B14                     _MTOUCH_Button_Tick:
  2423                           	callstack 21
  2424                           
  2425                           ;mcc_generated_files/touch/mtouch_button.c: 349:     uint8_t i;;mcc_generated_files/touc
      +                          h/mtouch_button.c: 350:     for (i = 0; i < 5u; i++)
  2426                           
  2427                           ;incstack = 0
  2428   002B14  6A19               	clrf	MTOUCH_Button_Tick@i^0,c
  2429   002B16                     l5960:
  2430                           
  2431                           ;mcc_generated_files/touch/mtouch_button.c: 351:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 352:         Button_Tick_helper(&mtouch_button[i]);
  2432   002B16  5019               	movf	MTOUCH_Button_Tick@i^0,w,c
  2433   002B18  0D11               	mullw	17
  2434   002B1A  0E00               	movlw	low _mtouch_button
  2435   002B1C  24F3               	addwf	243,w,c
  2436   002B1E  6E15               	movwf	Button_Tick_helper@button^0,c
  2437   002B20  0E01               	movlw	high _mtouch_button
  2438   002B22  20F4               	addwfc	prodh,w,c
  2439   002B24  6E16               	movwf	(Button_Tick_helper@button+1)^0,c
  2440   002B26  ECE5  F013         	call	_Button_Tick_helper	;wreg free
  2441                           
  2442                           ;mcc_generated_files/touch/mtouch_button.c: 353:     }
  2443   002B2A  2A19               	incf	MTOUCH_Button_Tick@i^0,f,c
  2444   002B2C  0E04               	movlw	4
  2445   002B2E  6419               	cpfsgt	MTOUCH_Button_Tick@i^0,c
  2446   002B30  D7F2               	goto	l5960
  2447   002B32  0C04               	retlw	4
  2448   002B34                     __end_of_MTOUCH_Button_Tick:
  2449                           	callstack 0
  2450                           
  2451 ;; *************** function _Button_Tick_helper *****************
  2452 ;; Defined at:
  2453 ;;		line 355 in file "mcc_generated_files/touch/mtouch_button.c"
  2454 ;; Parameters:    Size  Location     Type
  2455 ;;  button          2   20[COMRAM] PTR struct .
  2456 ;;		 -> mtouch_button(85), 
  2457 ;; Auto vars:     Size  Location     Type
  2458 ;;		None
  2459 ;; Return value:  Size  Location     Type
  2460 ;;                  1    wreg      void 
  2461 ;; Registers used:
  2462 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2463 ;; Tracked objects:
  2464 ;;		On entry : 0/1
  2465 ;;		On exit  : 0/0
  2466 ;;		Unchanged: 0/0
  2467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  2468 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2470 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2471 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2472 ;;Total ram usage:        4 bytes
  2473 ;; Hardware stack levels used: 1
  2474 ;; Hardware stack levels required when called: 6
  2475 ;; This function calls:
  2476 ;;		Nothing
  2477 ;; This function is called by:
  2478 ;;		_MTOUCH_Button_Tick
  2479 ;; This function uses a non-reentrant model
  2480 ;;
  2481                           
  2482                           	psect	text17
  2483   0027CA                     __ptext17:
  2484                           	callstack 0
  2485   0027CA                     _Button_Tick_helper:
  2486                           	callstack 21
  2487                           
  2488                           ;mcc_generated_files/touch/mtouch_button.c: 355: static void Button_Tick_helper(mtouch_b
      +                          utton_t* button);mcc_generated_files/touch/mtouch_button.c: 356: {;mcc_generated_files/t
      +                          ouch/mtouch_button.c: 358:     if ((button->state) == MTOUCH_BUTTON_STATE_pressed)
  2489                           
  2490                           ;incstack = 0
  2491   0027CA  EE20 F002          	lfsr	2,2
  2492   0027CE  5015               	movf	Button_Tick_helper@button^0,w,c
  2493   0027D0  26D9               	addwf	fsr2l,f,c
  2494   0027D2  5016               	movf	(Button_Tick_helper@button+1)^0,w,c
  2495   0027D4  22DA               	addwfc	fsr2h,f,c
  2496   0027D6  0E02               	movlw	2
  2497   0027D8  18DE               	xorwf	postinc2,w,c
  2498   0027DA  A4D8               	btfss	status,2,c
  2499   0027DC  0012               	return	
  2500                           
  2501                           ;mcc_generated_files/touch/mtouch_button.c: 359:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 360:         (button->counter)++;
  2502   0027DE  D80B               	call	PL157	;call to abstracted procedure
  2503   0027E0  ECAB  F00A         	call	PL175	;call to abstracted procedure
  2504                           
  2505                           ;mcc_generated_files/touch/mtouch_button.c: 361:         if (button->counter == (mtouch_
      +                          button_statecounter_t)0)
  2506   0027E4  D808               	call	PL157	;call to abstracted procedure
  2507   0027E6  50DE               	movf	postinc2,w,c
  2508   0027E8  10DE               	iorwf	postinc2,w,c
  2509   0027EA  A4D8               	btfss	status,2,c
  2510   0027EC  0012               	return	
  2511                           
  2512                           ;mcc_generated_files/touch/mtouch_button.c: 362:         {;mcc_generated_files/touch/mto
      +                          uch_button.c: 363:             button->counter = (mtouch_button_statecounter_t)0xFFFF;
  2513   0027EE  D803               	call	PL157	;call to abstracted procedure
  2514   0027F0  68DE               	setf	postinc2,c
  2515   0027F2  68DD               	setf	postdec2,c
  2516   0027F4  0CFF               	retlw	255	;funcret
  2517   0027F6                     __end_of_Button_Tick_helper:
  2518                           	callstack 0
  2519   0027F6                     PL157:
  2520                           	callstack 21
  2521   0027F6  EE20 F00B          	lfsr	2,11
  2522   0027FA  5015               	movf	Button_Tick_helper@button^0,w,c
  2523   0027FC  26D9               	addwf	fsr2l,f,c
  2524   0027FE  5016               	movf	(Button_Tick_helper@button+1)^0,w,c
  2525   002800  22DA               	addwfc	fsr2h,f,c
  2526   002802  0012               	return	
  2527   002804                     __end_ofPL157:
  2528                           	callstack 0
  2529                           
  2530 ;; *************** function _MTOUCH_Slider_ServiceAll *****************
  2531 ;; Defined at:
  2532 ;;		line 980 in file "mcc_generated_files/touch/mtouch_slider.c"
  2533 ;; Parameters:    Size  Location     Type
  2534 ;;		None
  2535 ;; Auto vars:     Size  Location     Type
  2536 ;;  slider          1   49[COMRAM] enum E13201
  2537 ;; Return value:  Size  Location     Type
  2538 ;;                  1    wreg      void 
  2539 ;; Registers used:
  2540 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  2541 ;; Tracked objects:
  2542 ;;		On entry : 3F/0
  2543 ;;		On exit  : 3F/1
  2544 ;;		Unchanged: 0/0
  2545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  2546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2547 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2549 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2550 ;;Total ram usage:        1 bytes
  2551 ;; Hardware stack levels used: 1
  2552 ;; Hardware stack levels required when called: 11
  2553 ;; This function calls:
  2554 ;;		_Slider_Service
  2555 ;; This function is called by:
  2556 ;;		_MTOUCH_Service_Mainloop
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           	psect	text18
  2561   002CBA                     __ptext18:
  2562                           	callstack 0
  2563   002CBA                     _MTOUCH_Slider_ServiceAll:
  2564                           	callstack 18
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;mcc_generated_files/touch/mtouch_slider.c: 987:     for (slider = 0u; slider < 1u; slid
      +                          er++)
  2568                           
  2569                           ;incstack = 0
  2570   002CBA  6A32               	clrf	MTOUCH_Slider_ServiceAll@slider^0,c
  2571   002CBC                     l6110:
  2572                           
  2573                           ;mcc_generated_files/touch/mtouch_slider.c: 988:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 989:         Slider_Service(slider);
  2574   002CBC  5032               	movf	MTOUCH_Slider_ServiceAll@slider^0,w,c
  2575   002CBE  ECB8  F008         	call	_Slider_Service
  2576                           
  2577                           ; BSR set to: 1
  2578                           ;mcc_generated_files/touch/mtouch_slider.c: 990:     }
  2579   002CC2  2A32               	incf	MTOUCH_Slider_ServiceAll@slider^0,f,c
  2580                           
  2581                           ; BSR set to: 1
  2582   002CC4  5032               	movf	MTOUCH_Slider_ServiceAll@slider^0,w,c
  2583   002CC6  E0FA               	bz	l6110
  2584                           
  2585                           ; BSR set to: 1
  2586   002CC8  0012               	return		;funcret
  2587   002CCA                     __end_of_MTOUCH_Slider_ServiceAll:
  2588                           	callstack 0
  2589                           
  2590 ;; *************** function _Slider_Service *****************
  2591 ;; Defined at:
  2592 ;;		line 690 in file "mcc_generated_files/touch/mtouch_slider.c"
  2593 ;; Parameters:    Size  Location     Type
  2594 ;;  sliderName      1    wreg     enum E13201
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;  sliderName      1    7[BANK1 ] enum E13201
  2597 ;;  slider          1    8[BANK1 ] PTR struct .
  2598 ;;		 -> mtouch_slider(17), 
  2599 ;;  segment         2    5[BANK1 ] unsigned short 
  2600 ;;  position        2    2[BANK1 ] unsigned short 
  2601 ;;  status          1    4[BANK1 ] unsigned char 
  2602 ;;  valid_contac    1    1[BANK1 ] unsigned char 
  2603 ;;  group_status    1    0[BANK1 ] unsigned char 
  2604 ;; Return value:  Size  Location     Type
  2605 ;;                  1    wreg      void 
  2606 ;; Registers used:
  2607 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  2608 ;; Tracked objects:
  2609 ;;		On entry : 3E/0
  2610 ;;		On exit  : 3F/1
  2611 ;;		Unchanged: 0/0
  2612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  2613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2614 ;;      Locals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2615 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2616 ;;      Totals:         0       4       9       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2617 ;;Total ram usage:       13 bytes
  2618 ;; Hardware stack levels used: 1
  2619 ;; Hardware stack levels required when called: 10
  2620 ;; This function calls:
  2621 ;;		_MTOUCH_Button_isPressed
  2622 ;;		_ProcessSliderChange
  2623 ;;		_Slider_DefaultCallback
  2624 ;;		_calculate_contact_size
  2625 ;;		_calculate_position
  2626 ;; This function is called by:
  2627 ;;		_MTOUCH_Slider_ServiceAll
  2628 ;; This function uses a non-reentrant model
  2629 ;;
  2630                           
  2631                           	psect	text19
  2632   001170                     __ptext19:
  2633                           	callstack 0
  2634   001170                     _Slider_Service:
  2635                           	callstack 18
  2636                           
  2637                           ; BSR set to: 1
  2638                           ;incstack = 0
  2639                           ;Slider_Service@sliderName stored from wreg
  2640   001170  0101               	movlb	1	; () banked
  2641   001172  6F5C               	movwf	Slider_Service@sliderName& (0+255),b
  2642                           
  2643                           ;mcc_generated_files/touch/mtouch_slider.c: 690: static void Slider_Service(enum mtouch_
      +                          slider_names sliderName);mcc_generated_files/touch/mtouch_slider.c: 691: {;mcc_generated
      +                          _files/touch/mtouch_slider.c: 693:     uint16_t segment, position;;mcc_generated_files/t
      +                          ouch/mtouch_slider.c: 694:     uint8_t status = 0u, group_status = 0u;
  2644   001174  6B59               	clrf	Slider_Service@status& (0+255),b
  2645   001176  6B55               	clrf	Slider_Service@group_status& (0+255),b
  2646                           
  2647                           ;mcc_generated_files/touch/mtouch_slider.c: 695:     uint8_t valid_contact_found = 0u;
  2648   001178  6B56               	clrf	Slider_Service@valid_contact_found& (0+255),b
  2649                           
  2650                           ; BSR set to: 1
  2651                           ;mcc_generated_files/touch/mtouch_slider.c: 697:     if (sliderName < 1u)
  2652   00117A  515C               	movf	Slider_Service@sliderName& (0+255),w,b
  2653   00117C  A4D8               	btfss	status,2,c
  2654   00117E  0012               	return	
  2655                           
  2656                           ; BSR set to: 1
  2657                           ;mcc_generated_files/touch/mtouch_slider.c: 698:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 700:         mtouch_slider_t* slider = &mtouch_slider[sliderName];
  2658   001180  515C               	movf	Slider_Service@sliderName& (0+255),w,b
  2659   001182  0D11               	mullw	17
  2660   001184  50F3               	movf	243,w,c
  2661   001186  0FD5               	addlw	low _mtouch_slider
  2662   001188  6F5D               	movwf	Slider_Service@slider& (0+255),b
  2663                           
  2664                           ; BSR set to: 1
  2665                           ;mcc_generated_files/touch/mtouch_slider.c: 702:         if ((slider->type <= MTOUCH_TYP
      +                          E_WHEEL) || (slider->resolDeadband <= 0xCFu))
  2666   00118A  515D               	movf	Slider_Service@slider& (0+255),w,b
  2667   00118C  6ED9               	movwf	fsr2l,c
  2668   00118E  6ADA               	clrf	fsr2h,c
  2669   001190  2AD9               	incf	fsr2l,f,c
  2670   001192  0E01               	movlw	1
  2671   001194  64DF               	cpfsgt	indf2,c
  2672   001196  D006               	goto	u5410
  2673                           
  2674                           ; BSR set to: 1
  2675   001198  515D               	movf	Slider_Service@slider& (0+255),w,b
  2676   00119A  EC0B  F00A         	call	PL137	;call to abstracted procedure
  2677   00119E  0ED0               	movlw	208
  2678   0011A0  60DF               	cpfslt	indf2,c
  2679   0011A2  0CD0               	retlw	208
  2680   0011A4                     u5410:
  2681                           
  2682                           ; BSR set to: 1
  2683                           ;mcc_generated_files/touch/mtouch_slider.c: 703:         {;mcc_generated_files/touch/mto
      +                          uch_slider.c: 705:             resol_bits = (slider->resolDeadband & 0xF0u) >> 4u;
  2684   0011A4  515D               	movf	Slider_Service@slider& (0+255),w,b
  2685   0011A6  EC0B  F00A         	call	PL137	;call to abstracted procedure
  2686   0011AA  50DF               	movf	indf2,w,c
  2687   0011AC  0100               	movlb	0	; () banked
  2688   0011AE  6FF6               	movwf	??_Slider_Service& (0+255),b
  2689   0011B0  39F6               	swapf	??_Slider_Service& (0+255),w,b
  2690   0011B2  0B0F               	andlw	15
  2691   0011B4  6E4A               	movwf	_resol_bits^0,c
  2692                           
  2693                           ; BSR set to: 0
  2694                           ;mcc_generated_files/touch/mtouch_slider.c: 706:             resol_value = (uint16_t) ((
      +                          uint16_t) 1u << resol_bits);
  2695   0011B6  C04A  F0F6         	movff	_resol_bits,??_Slider_Service
  2696   0011BA  0E01               	movlw	1
  2697   0011BC  6FF7               	movwf	(??_Slider_Service+1)& (0+255),b
  2698   0011BE  6BF8               	clrf	(??_Slider_Service+2)& (0+255),b
  2699   0011C0  2BF6               	incf	??_Slider_Service& (0+255),f,b
  2700   0011C2  D003               	goto	u5424
  2701   0011C4                     u5425:
  2702   0011C4  90D8               	bcf	status,0,c
  2703   0011C6  37F7               	rlcf	(??_Slider_Service+1)& (0+255),f,b
  2704   0011C8  37F8               	rlcf	(??_Slider_Service+2)& (0+255),f,b
  2705   0011CA                     u5424:
  2706   0011CA  2FF6               	decfsz	??_Slider_Service& (0+255),f,b
  2707   0011CC  D7FB               	goto	u5425
  2708   0011CE  C0F7  F03D         	movff	??_Slider_Service+1,_resol_value
  2709   0011D2  C0F8  F03E         	movff	??_Slider_Service+2,_resol_value+1
  2710                           
  2711                           ;mcc_generated_files/touch/mtouch_slider.c: 709:             slider->contactSize = calcu
      +                          late_contact_size(slider);
  2712   0011D6  C15D  F021         	movff	Slider_Service@slider,calculate_contact_size@slider
  2713   0011DA  ECE0  F011         	call	_calculate_contact_size	;wreg free
  2714   0011DE  0101               	movlb	1	; () banked
  2715   0011E0  515D               	movf	Slider_Service@slider& (0+255),w,b
  2716   0011E2  D89A               	call	PL201	;call to abstracted procedure
  2717   0011E4  C021  FFDE         	movff	?_calculate_contact_size,postinc2
  2718   0011E8  C022  FFDD         	movff	?_calculate_contact_size+1,postdec2
  2719                           
  2720                           ; BSR set to: 1
  2721                           ;mcc_generated_files/touch/mtouch_slider.c: 711:             if (slider->contactSize >= 
      +                          slider->contactThreshold)
  2722   0011EC  515D               	movf	Slider_Service@slider& (0+255),w,b
  2723   0011EE  D88F               	call	PL185	;call to abstracted procedure
  2724   0011F0  515D               	movf	Slider_Service@slider& (0+255),w,b
  2725   0011F2  6EE1               	movwf	fsr1l,c
  2726   0011F4  6AE2               	clrf	fsr1h,c
  2727   0011F6  0E0E               	movlw	14
  2728   0011F8  26E1               	addwf	fsr1l,f,c
  2729   0011FA  50DE               	movf	postinc2,w,c
  2730   0011FC  5CE6               	subwf	postinc1,w,c
  2731   0011FE  50DE               	movf	postinc2,w,c
  2732   001200  58E6               	subwfb	postinc1,w,c
  2733   001202  E333               	bnc	u5460
  2734                           
  2735                           ; BSR set to: 1
  2736                           ;mcc_generated_files/touch/mtouch_slider.c: 712:             {;mcc_generated_files/touch
      +                          /mtouch_slider.c: 714:                 if ((slider->sliderStatus & (uint8_t)((uint8_t)3u
      +                          <<0u)) == MTOUCH_SLIDER_STATE_pressed)
  2737   001204  D879               	call	PL139	;call to abstracted procedure
  2738   001206  50DF               	movf	indf2,w,c
  2739   001208  0B03               	andlw	3
  2740   00120A  0A02               	xorlw	2
  2741   00120C  E103               	bnz	l6004
  2742                           
  2743                           ; BSR set to: 1
  2744                           ;mcc_generated_files/touch/mtouch_slider.c: 715:                 {;mcc_generated_files/t
      +                          ouch/mtouch_slider.c: 716:                     valid_contact_found = 1u;
  2745   00120E  0E01               	movlw	1
  2746   001210  6F56               	movwf	Slider_Service@valid_contact_found& (0+255),b
  2747                           
  2748                           ;mcc_generated_files/touch/mtouch_slider.c: 717:                 }
  2749   001212  D02B               	goto	u5460
  2750   001214                     l6004:
  2751                           
  2752                           ; BSR set to: 1
  2753                           ;mcc_generated_files/touch/mtouch_slider.c: 719:                 {;mcc_generated_files/t
      +                          ouch/mtouch_slider.c: 721:                     segment = slider->startSegment;
  2754   001214  515D               	movf	Slider_Service@slider& (0+255),w,b
  2755   001216  EC25  F011         	call	PL115	;call to abstracted procedure
  2756   00121A  6F5A               	movwf	Slider_Service@segment& (0+255),b
  2757   00121C  6B5B               	clrf	(Slider_Service@segment+1)& (0+255),b
  2758   00121E                     l6006:
  2759                           
  2760                           ; BSR set to: 1
  2761                           ;mcc_generated_files/touch/mtouch_slider.c: 723:                     {;mcc_generated_fil
      +                          es/touch/mtouch_slider.c: 724:                         if (MTOUCH_Button_isPressed(segme
      +                          nt))
  2762   00121E  515A               	movf	Slider_Service@segment& (0+255),w,b
  2763   001220  EC57  F015         	call	_MTOUCH_Button_isPressed
  2764   001224  0900               	iorlw	0
  2765   001226  E007               	bz	l6012
  2766                           
  2767                           ;mcc_generated_files/touch/mtouch_slider.c: 725:                         {;mcc_generated
      +                          _files/touch/mtouch_slider.c: 727:                             valid_contact_found = 1u;
  2768   001228  0E01               	movlw	1
  2769   00122A  0101               	movlb	1	; () banked
  2770   00122C  6F56               	movwf	Slider_Service@valid_contact_found& (0+255),b
  2771                           
  2772                           ; BSR set to: 1
  2773                           ;mcc_generated_files/touch/mtouch_slider.c: 728:                             callback_pr
      +                          essed(sliderName);
  2774   00122E  515C               	movf	Slider_Service@sliderName& (0+255),w,b
  2775   001230  EC9E  F016         	call	_Slider_DefaultCallback
  2776                           
  2777                           ;mcc_generated_files/touch/mtouch_slider.c: 729:                             break;
  2778   001234  D01A               	goto	u5460
  2779   001236                     l6012:
  2780                           
  2781                           ;mcc_generated_files/touch/mtouch_slider.c: 733:                         segment = segme
      +                          nt + 1u;
  2782   001236  0101               	movlb	1	; () banked
  2783   001238  2B5A               	incf	Slider_Service@segment& (0+255),f,b
  2784   00123A  0E00               	movlw	0
  2785   00123C  235B               	addwfc	(Slider_Service@segment+1)& (0+255),f,b
  2786                           
  2787                           ; BSR set to: 1
  2788                           ;mcc_generated_files/touch/mtouch_slider.c: 735:                     }
  2789   00123E  515D               	movf	Slider_Service@slider& (0+255),w,b
  2790   001240  EC25  F011         	call	PL115	;call to abstracted procedure
  2791   001244  0100               	movlb	0	; () banked
  2792   001246  6FF6               	movwf	??_Slider_Service& (0+255),b
  2793   001248  6BF7               	clrf	(??_Slider_Service+1)& (0+255),b
  2794   00124A  0101               	movlb	1	; () banked
  2795   00124C  515D               	movf	Slider_Service@slider& (0+255),w,b
  2796   00124E  EC3A  F00B         	call	PL119	;call to abstracted procedure
  2797   001252  0100               	movlb	0	; () banked
  2798   001254  27F6               	addwf	??_Slider_Service& (0+255),f,b
  2799   001256  0E00               	movlw	0
  2800   001258  23F7               	addwfc	(??_Slider_Service+1)& (0+255),f,b
  2801   00125A  51F6               	movf	??_Slider_Service& (0+255),w,b
  2802   00125C  0101               	movlb	1	; () banked
  2803   00125E  5D5A               	subwf	Slider_Service@segment& (0+255),w,b
  2804   001260  0100               	movlb	0	; () banked
  2805   001262  51F7               	movf	(??_Slider_Service+1)& (0+255),w,b
  2806   001264  0101               	movlb	1	; () banked
  2807   001266  595B               	subwfb	(Slider_Service@segment+1)& (0+255),w,b
  2808   001268  E3DA               	bnc	l6006
  2809   00126A                     u5460:
  2810                           
  2811                           ; BSR set to: 1
  2812                           ;mcc_generated_files/touch/mtouch_slider.c: 744:             if (0u == valid_contact_fou
      +                          nd)
  2813   00126A  5156               	movf	Slider_Service@valid_contact_found& (0+255),w,b
  2814   00126C  E114               	bnz	l6026
  2815                           
  2816                           ; BSR set to: 1
  2817                           ;mcc_generated_files/touch/mtouch_slider.c: 745:             {;mcc_generated_files/touch
      +                          /mtouch_slider.c: 747:                 slider->contactSize = 0u;
  2818   00126E  515D               	movf	Slider_Service@slider& (0+255),w,b
  2819   001270  D853               	call	PL201	;call to abstracted procedure
  2820   001272  6ADE               	clrf	postinc2,c
  2821   001274  6ADD               	clrf	postdec2,c
  2822                           
  2823                           ;mcc_generated_files/touch/mtouch_slider.c: 749:                 if ((slider->sliderStat
      +                          us & (uint8_t)((uint8_t)3u<<0u)) == MTOUCH_SLIDER_STATE_pressed)
  2824   001276  D840               	call	PL139	;call to abstracted procedure
  2825   001278  50DF               	movf	indf2,w,c
  2826   00127A  0B03               	andlw	3
  2827   00127C  0A02               	xorlw	2
  2828   00127E  E107               	bnz	l6024
  2829                           
  2830                           ; BSR set to: 1
  2831                           ;mcc_generated_files/touch/mtouch_slider.c: 750:                 {;mcc_generated_files/t
      +                          ouch/mtouch_slider.c: 751:                     slider->sliderStatus = MTOUCH_SLIDER_STAT
      +                          E_notPressed;
  2832   001280  D83B               	call	PL139	;call to abstracted procedure
  2833   001282  0E01               	movlw	1
  2834   001284  6EDF               	movwf	indf2,c
  2835                           
  2836                           ; BSR set to: 1
  2837                           ;mcc_generated_files/touch/mtouch_slider.c: 752:                     callback_released(s
      +                          liderName);
  2838   001286  515C               	movf	Slider_Service@sliderName& (0+255),w,b
  2839   001288  EC9E  F016         	call	_Slider_DefaultCallback
  2840                           
  2841                           ;mcc_generated_files/touch/mtouch_slider.c: 753:                 }
  2842   00128C  D02E               	goto	l6040
  2843   00128E                     l6024:
  2844                           
  2845                           ; BSR set to: 1
  2846                           ;mcc_generated_files/touch/mtouch_slider.c: 755:                 {;mcc_generated_files/t
      +                          ouch/mtouch_slider.c: 756:                     slider->sliderStatus = MTOUCH_SLIDER_STAT
      +                          E_notPressed;
  2847   00128E  D834               	call	PL139	;call to abstracted procedure
  2848   001290  0E01               	movlw	1
  2849   001292  6EDF               	movwf	indf2,c
  2850   001294  D02A               	goto	l6040
  2851   001296                     l6026:
  2852                           
  2853                           ; BSR set to: 1
  2854                           ;mcc_generated_files/touch/mtouch_slider.c: 760:             {;mcc_generated_files/touch
      +                          /mtouch_slider.c: 762:                 position = calculate_position(slider);
  2855   001296  C15D  F030         	movff	Slider_Service@slider,calculate_position@slider
  2856   00129A  EC68  F011         	call	_calculate_position	;wreg free
  2857   00129E  C030  F157         	movff	?_calculate_position,Slider_Service@position
  2858   0012A2  C031  F158         	movff	?_calculate_position+1,Slider_Service@position+1
  2859                           
  2860                           ;mcc_generated_files/touch/mtouch_slider.c: 765:                 if (slider->sliderPosit
      +                          ion != position)
  2861   0012A6  0101               	movlb	1	; () banked
  2862   0012A8  515D               	movf	Slider_Service@slider& (0+255),w,b
  2863   0012AA  D82C               	call	PL163	;call to abstracted procedure
  2864   0012AC  5157               	movf	Slider_Service@position& (0+255),w,b
  2865   0012AE  18DE               	xorwf	postinc2,w,c
  2866   0012B0  E103               	bnz	u5490
  2867   0012B2  5158               	movf	(Slider_Service@position+1)& (0+255),w,b
  2868   0012B4  18DE               	xorwf	postinc2,w,c
  2869   0012B6  E016               	bz	u5509
  2870   0012B8                     u5490:
  2871                           
  2872                           ; BSR set to: 1
  2873                           ;mcc_generated_files/touch/mtouch_slider.c: 766:                 {;mcc_generated_files/t
      +                          ouch/mtouch_slider.c: 767:                     status |= (uint8_t)((uint8_t)1u<<2u);
  2874   0012B8  8559               	bsf	Slider_Service@status& (0+255),2,b
  2875                           
  2876                           ; BSR set to: 1
  2877                           ;mcc_generated_files/touch/mtouch_slider.c: 768:                     slider->sliderPosit
      +                          ion = position;
  2878   0012BA  515D               	movf	Slider_Service@slider& (0+255),w,b
  2879   0012BC  D823               	call	PL163	;call to abstracted procedure
  2880   0012BE  C157  FFDE         	movff	Slider_Service@position,postinc2
  2881   0012C2  C158  FFDD         	movff	Slider_Service@position+1,postdec2
  2882                           
  2883                           ; BSR set to: 1
  2884                           ;mcc_generated_files/touch/mtouch_slider.c: 769:                     callback_position_c
      +                          hanged(sliderName);
  2885   0012C6  D801               	call	u5508
  2886   0012C8  D00D               	goto	u5509
  2887   0012CA                     u5508:
  2888   0012CA  0005               	push	
  2889   0012CC  6EFA               	movwf	pclath,c
  2890   0012CE  0100               	movlb	0	; () banked
  2891   0012D0  51CF               	movf	_callback_position_changed& (0+255),w,b
  2892   0012D2  6EFD               	movwf	tosl,c
  2893   0012D4  51D0               	movf	(_callback_position_changed+1)& (0+255),w,b
  2894   0012D6  6EFE               	movwf	tosh,c
  2895   0012D8  51D1               	movf	(_callback_position_changed+2)& (0+255),w,b
  2896   0012DA  6EFF               	movwf	tosu,c
  2897   0012DC  50FA               	movf	pclath,w,c
  2898   0012DE  0101               	movlb	1	; () banked
  2899   0012E0  515C               	movf	Slider_Service@sliderName& (0+255),w,b
  2900   0012E2  0012               	return		;indir
  2901   0012E4                     u5509:
  2902                           
  2903                           ;mcc_generated_files/touch/mtouch_slider.c: 773:                 status |= MTOUCH_SLIDER
      +                          _STATE_pressed;
  2904   0012E4  0101               	movlb	1	; () banked
  2905   0012E6  8359               	bsf	Slider_Service@status& (0+255),1,b
  2906                           
  2907                           ; BSR set to: 1
  2908                           ;mcc_generated_files/touch/mtouch_slider.c: 775:                 status |= (uint8_t)((ui
      +                          nt8_t)1u<<7u);
  2909   0012E8  8F59               	bsf	Slider_Service@status& (0+255),7,b
  2910   0012EA                     l6040:
  2911                           
  2912                           ; BSR set to: 1
  2913                           ;mcc_generated_files/touch/mtouch_slider.c: 779:             slider->sliderStatus = stat
      +                          us;
  2914   0012EA  D806               	call	PL139	;call to abstracted procedure
  2915   0012EC  C159  FFDF         	movff	Slider_Service@status,indf2
  2916                           
  2917                           ; BSR set to: 1
  2918                           ;mcc_generated_files/touch/mtouch_slider.c: 783:             sliderGroupStatus |= group_
      +                          status;
  2919   0012F0  5159               	movf	Slider_Service@status& (0+255),w,b
  2920   0012F2  0B82               	andlw	130
  2921   0012F4  1355               	iorwf	Slider_Service@group_status& (0+255),f,b
  2922                           
  2923                           ; BSR set to: 1
  2924   0012F6  0012               	return		;funcret
  2925   0012F8                     __end_of_Slider_Service:
  2926                           	callstack 0
  2927   0012F8                     PL139:
  2928                           	callstack 18
  2929   0012F8  515D               	movf	Slider_Service@slider& (0+255),w,b
  2930   0012FA  6ED9               	movwf	fsr2l,c
  2931   0012FC  6ADA               	clrf	fsr2h,c
  2932   0012FE  0E10               	movlw	16
  2933   001300  26D9               	addwf	fsr2l,f,c
  2934   001302  0C10               	retlw	16
  2935   001304                     __end_ofPL139:
  2936                           	callstack 0
  2937   001304                     PL163:
  2938                           	callstack 19
  2939   001304  6ED9               	movwf	fsr2l,c
  2940   001306  6ADA               	clrf	fsr2h,c
  2941   001308  0E0C               	movlw	12
  2942   00130A  26D9               	addwf	fsr2l,f,c
  2943   00130C  0C0C               	retlw	12
  2944   00130E                     __end_ofPL163:
  2945                           	callstack 0
  2946   00130E                     PL185:
  2947                           	callstack 19
  2948   00130E  6ED9               	movwf	fsr2l,c
  2949   001310  6ADA               	clrf	fsr2h,c
  2950   001312  0E06               	movlw	6
  2951   001314  26D9               	addwf	fsr2l,f,c
  2952   001316  0C06               	retlw	6
  2953   001318                     __end_ofPL185:
  2954                           	callstack 0
  2955   001318                     PL201:
  2956                           	callstack 18
  2957   001318  6ED9               	movwf	fsr2l,c
  2958   00131A  6ADA               	clrf	fsr2h,c
  2959   00131C  0E0E               	movlw	14
  2960   00131E  26D9               	addwf	fsr2l,f,c
  2961   001320  0C0E               	retlw	14
  2962   001322                     __end_ofPL201:
  2963                           	callstack 0
  2964                           
  2965 ;; *************** function _calculate_position *****************
  2966 ;; Defined at:
  2967 ;;		line 658 in file "mcc_generated_files/touch/mtouch_slider.c"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;  slider          1   47[COMRAM] PTR struct .
  2970 ;;		 -> mtouch_slider(17), 
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;  raw_position    2   14[BANK0 ] unsigned short 
  2973 ;;  filtered_pos    2   12[BANK0 ] unsigned short 
  2974 ;;  position        2   10[BANK0 ] unsigned short 
  2975 ;; Return value:  Size  Location     Type
  2976 ;;                  2   47[COMRAM] unsigned short 
  2977 ;; Registers used:
  2978 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2979 ;; Tracked objects:
  2980 ;;		On entry : 3F/1
  2981 ;;		On exit  : 0/0
  2982 ;;		Unchanged: 0/0
  2983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  2984 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2985 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2987 ;;      Totals:         2       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  2988 ;;Total ram usage:        8 bytes
  2989 ;; Hardware stack levels used: 1
  2990 ;; Hardware stack levels required when called: 9
  2991 ;; This function calls:
  2992 ;;		_calculate_raw_position
  2993 ;;		_moving_average_filter
  2994 ;;		_positional_hysteresis
  2995 ;; This function is called by:
  2996 ;;		_Slider_Service
  2997 ;; This function uses a non-reentrant model
  2998 ;;
  2999                           
  3000                           	psect	text20
  3001   0022D0                     __ptext20:
  3002                           	callstack 0
  3003   0022D0                     _calculate_position:
  3004                           	callstack 18
  3005                           
  3006                           ; BSR set to: 1
  3007                           ;mcc_generated_files/touch/mtouch_slider.c: 658: static uint16_t calculate_position(mtou
      +                          ch_slider_t* slider);mcc_generated_files/touch/mtouch_slider.c: 659: {;mcc_generated_fil
      +                          es/touch/mtouch_slider.c: 660:     uint16_t raw_position, filtered_position, position;;m
      +                          cc_generated_files/touch/mtouch_slider.c: 663:     raw_position = calculate_raw_position
      +                          (slider);
  3008                           
  3009                           ; BSR set to: 1
  3010                           ;incstack = 0
  3011   0022D0  C030  F029         	movff	calculate_position@slider,calculate_raw_position@slider
  3012   0022D4  ECC5  F007         	call	_calculate_raw_position
  3013   0022D8  C029  F0F4         	movff	?_calculate_raw_position,calculate_position@raw_position
  3014   0022DC  C02A  F0F5         	movff	?_calculate_raw_position+1,calculate_position@raw_position+1
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;mcc_generated_files/touch/mtouch_slider.c: 666:     if ((slider->sliderStatus & (uint8_
      +                          t)((uint8_t)3u<<0u)) != MTOUCH_SLIDER_STATE_pressed)
  3018   0022E0  5030               	movf	calculate_position@slider^0,w,c
  3019   0022E2  EC74  F012         	call	PL145	;call to abstracted procedure
  3020   0022E6  50DF               	movf	indf2,w,c
  3021   0022E8  0B03               	andlw	3
  3022   0022EA  0A02               	xorlw	2
  3023   0022EC  E005               	bz	l5856
  3024                           
  3025                           ; BSR set to: 0
  3026                           ;mcc_generated_files/touch/mtouch_slider.c: 667:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 669:         filtered_position = raw_position;
  3027   0022EE  C0F4  F0F2         	movff	calculate_position@raw_position,calculate_position@filtered_position
  3028   0022F2  C0F5  F0F3         	movff	calculate_position@raw_position+1,calculate_position@filtered_position+1
  3029                           
  3030                           ;mcc_generated_files/touch/mtouch_slider.c: 670:     }
  3031   0022F6  D00C               	goto	l5858
  3032   0022F8                     l5856:
  3033                           
  3034                           ; BSR set to: 0
  3035                           ;mcc_generated_files/touch/mtouch_slider.c: 672:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 673:         filtered_position = moving_average_filter(slider, raw_position);
  3036   0022F8  C030  F021         	movff	calculate_position@slider,moving_average_filter@slider
  3037   0022FC  C0F4  F022         	movff	calculate_position@raw_position,moving_average_filter@current_position
  3038   002300  C0F5  F023         	movff	calculate_position@raw_position+1,moving_average_filter@current_position+1
  3039   002304  EC41  F00E         	call	_moving_average_filter	;wreg free
  3040   002308  C021  F0F2         	movff	?_moving_average_filter,calculate_position@filtered_position
  3041   00230C  C022  F0F3         	movff	?_moving_average_filter+1,calculate_position@filtered_position+1
  3042   002310                     l5858:
  3043                           
  3044                           ;mcc_generated_files/touch/mtouch_slider.c: 676:     slider->rawPosition = raw_position;
  3045   002310  5030               	movf	calculate_position@slider^0,w,c
  3046   002312  D815               	call	PL199	;call to abstracted procedure
  3047   002314  C0F4  FFDE         	movff	calculate_position@raw_position,postinc2
  3048   002318  C0F5  FFDD         	movff	calculate_position@raw_position+1,postdec2
  3049                           
  3050                           ;mcc_generated_files/touch/mtouch_slider.c: 679:     position = positional_hysteresis(sl
      +                          ider, filtered_position);
  3051   00231C  C030  F021         	movff	calculate_position@slider,positional_hysteresis@slider
  3052   002320  C0F2  F022         	movff	calculate_position@filtered_position,positional_hysteresis@current_position
  3053   002324  C0F3  F023         	movff	calculate_position@filtered_position+1,positional_hysteresis@current_position+1
  3054   002328  ECA7  F00C         	call	_positional_hysteresis	;wreg free
  3055   00232C  C021  F0F0         	movff	?_positional_hysteresis,calculate_position@position
  3056   002330  C022  F0F1         	movff	?_positional_hysteresis+1,calculate_position@position+1
  3057                           
  3058                           ;mcc_generated_files/touch/mtouch_slider.c: 681:     return position;
  3059   002334  C0F0  F030         	movff	calculate_position@position,?_calculate_position
  3060   002338  C0F1  F031         	movff	calculate_position@position+1,?_calculate_position+1
  3061   00233C  0012               	return		;funcret
  3062   00233E                     __end_of_calculate_position:
  3063                           	callstack 0
  3064   00233E                     PL199:
  3065                           	callstack 19
  3066   00233E  6ED9               	movwf	fsr2l,c
  3067   002340  6ADA               	clrf	fsr2h,c
  3068   002342  0E0A               	movlw	10
  3069   002344  26D9               	addwf	fsr2l,f,c
  3070   002346  0C0A               	retlw	10
  3071   002348                     __end_ofPL199:
  3072                           	callstack 0
  3073                           
  3074 ;; *************** function _positional_hysteresis *****************
  3075 ;; Defined at:
  3076 ;;		line 289 in file "mcc_generated_files/touch/mtouch_slider.c"
  3077 ;; Parameters:    Size  Location     Type
  3078 ;;  slider          1   32[COMRAM] PTR struct .
  3079 ;;		 -> mtouch_slider(17), 
  3080 ;;  current_posi    2   33[COMRAM] unsigned short 
  3081 ;; Auto vars:     Size  Location     Type
  3082 ;;  distance        2   44[COMRAM] short 
  3083 ;;  filtered_pos    2   40[COMRAM] unsigned short 
  3084 ;;  previous_pos    2   38[COMRAM] unsigned short 
  3085 ;;  polarity        1   43[COMRAM] unsigned char 
  3086 ;;  hyst_width      1   42[COMRAM] unsigned char 
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  2   32[COMRAM] unsigned short 
  3089 ;; Registers used:
  3090 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3091 ;; Tracked objects:
  3092 ;;		On entry : 0/0
  3093 ;;		On exit  : 0/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  3096 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3097 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3098 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3099 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3100 ;;Total ram usage:       14 bytes
  3101 ;; Hardware stack levels used: 1
  3102 ;; Hardware stack levels required when called: 7
  3103 ;; This function calls:
  3104 ;;		_get_difference
  3105 ;; This function is called by:
  3106 ;;		_calculate_position
  3107 ;; This function uses a non-reentrant model
  3108 ;;
  3109                           
  3110                           	psect	text21
  3111   00194E                     __ptext21:
  3112                           	callstack 0
  3113   00194E                     _positional_hysteresis:
  3114                           	callstack 19
  3115                           
  3116                           ;mcc_generated_files/touch/mtouch_slider.c: 289: static uint16_t positional_hysteresis(m
      +                          touch_slider_t* slider, uint16_t current_position);mcc_generated_files/touch/mtouch_slid
      +                          er.c: 290: {;mcc_generated_files/touch/mtouch_slider.c: 291:     uint16_t filtered_posit
      +                          ion, previous_position;;mcc_generated_files/touch/mtouch_slider.c: 292:     uint8_t hyst
      +                          _width;;mcc_generated_files/touch/mtouch_slider.c: 293:     int16_t distance;;mcc_genera
      +                          ted_files/touch/mtouch_slider.c: 294:     uint8_t polarity = 0u;
  3117                           
  3118                           ;incstack = 0
  3119   00194E  6A2C               	clrf	positional_hysteresis@polarity^0,c
  3120                           
  3121                           ;mcc_generated_files/touch/mtouch_slider.c: 297:     hyst_width = slider->positionHyster
      +                          esis;
  3122   001950  5021               	movf	positional_hysteresis@slider^0,w,c
  3123   001952  6ED9               	movwf	fsr2l,c
  3124   001954  6ADA               	clrf	fsr2h,c
  3125   001956  0E05               	movlw	5
  3126   001958  26D9               	addwf	fsr2l,f,c
  3127   00195A  50DF               	movf	indf2,w,c
  3128   00195C  6E2B               	movwf	positional_hysteresis@hyst_width^0,c
  3129                           
  3130                           ;mcc_generated_files/touch/mtouch_slider.c: 298:     previous_position = slider->sliderP
      +                          osition;
  3131   00195E  5021               	movf	positional_hysteresis@slider^0,w,c
  3132   001960  EC82  F009         	call	PL163	;call to abstracted procedure
  3133   001964  CFDE F027          	movff	postinc2,positional_hysteresis@previous_position
  3134   001968  CFDD F028          	movff	postdec2,positional_hysteresis@previous_position+1
  3135                           
  3136                           ;mcc_generated_files/touch/mtouch_slider.c: 301:     distance = get_difference(slider, p
      +                          revious_position, current_position);
  3137   00196C  C021  F015         	movff	positional_hysteresis@slider,get_difference@slider
  3138   001970  C027  F016         	movff	positional_hysteresis@previous_position,get_difference@previous_position
  3139   001974  C028  F017         	movff	positional_hysteresis@previous_position+1,get_difference@previous_position+1
  3140   001978  C022  F018         	movff	positional_hysteresis@current_position,get_difference@current_position
  3141   00197C  C023  F019         	movff	positional_hysteresis@current_position+1,get_difference@current_position+1
  3142   001980  ECA4  F011         	call	_get_difference	;wreg free
  3143   001984  C015  F02D         	movff	?_get_difference,positional_hysteresis@distance
  3144   001988  C016  F02E         	movff	?_get_difference+1,positional_hysteresis@distance+1
  3145                           
  3146                           ;mcc_generated_files/touch/mtouch_slider.c: 303:     if (distance < 0)
  3147   00198C  AE2E               	btfss	(positional_hysteresis@distance+1)^0,7,c
  3148   00198E  D00A               	goto	l5548
  3149                           
  3150                           ;mcc_generated_files/touch/mtouch_slider.c: 304:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 305:         distance = (0 - distance);
  3151   001990  502D               	movf	positional_hysteresis@distance^0,w,c
  3152   001992  0800               	sublw	0
  3153   001994  6E2D               	movwf	positional_hysteresis@distance^0,c
  3154   001996  502E               	movf	(positional_hysteresis@distance+1)^0,w,c
  3155   001998  A0D8               	btfss	status,0,c
  3156   00199A  2AE8               	incf	wreg,f,c
  3157   00199C  0800               	sublw	0
  3158   00199E  6E2E               	movwf	(positional_hysteresis@distance+1)^0,c
  3159                           
  3160                           ;mcc_generated_files/touch/mtouch_slider.c: 306:         polarity = 1u;
  3161   0019A0  0E01               	movlw	1
  3162   0019A2  6E2C               	movwf	positional_hysteresis@polarity^0,c
  3163   0019A4                     l5548:
  3164                           
  3165                           ;mcc_generated_files/touch/mtouch_slider.c: 311:     if ((polarity == 1u) && (distance >
      +                           (int16_t) slider->leftHysteresis))
  3166   0019A4  042C               	decf	positional_hysteresis@polarity^0,w,c
  3167   0019A6  E10F               	bnz	l5556
  3168   0019A8  5021               	movf	positional_hysteresis@slider^0,w,c
  3169   0019AA  D825               	call	PL123	;call to abstracted procedure
  3170   0019AC  D829               	call	PL153	;call to abstracted procedure
  3171   0019AE  E20B               	bc	l5556
  3172                           
  3173                           ;mcc_generated_files/touch/mtouch_slider.c: 312:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 314:         slider->rightHysteresis = hyst_width;
  3174   0019B0  D833               	call	PL177	;call to abstracted procedure
  3175   0019B2  C02B  FFDF         	movff	positional_hysteresis@hyst_width,indf2
  3176                           
  3177                           ;mcc_generated_files/touch/mtouch_slider.c: 315:         slider->leftHysteresis = 0u;
  3178   0019B6  5021               	movf	positional_hysteresis@slider^0,w,c
  3179   0019B8  D81E               	call	PL123	;call to abstracted procedure
  3180   0019BA  6ADF               	clrf	indf2,c
  3181   0019BC                     l5554:
  3182                           
  3183                           ;mcc_generated_files/touch/mtouch_slider.c: 316:         filtered_position = current_pos
      +                          ition;
  3184   0019BC  C022  F029         	movff	positional_hysteresis@current_position,positional_hysteresis@filtered_position
  3185   0019C0  C023  F02A         	movff	positional_hysteresis@current_position+1,positional_hysteresis@filtered_position+
      +                          1
  3186                           
  3187                           ;mcc_generated_files/touch/mtouch_slider.c: 317:     }
  3188   0019C4  D013               	goto	l5566
  3189   0019C6                     l5556:
  3190   0019C6  502C               	movf	positional_hysteresis@polarity^0,w,c
  3191   0019C8  E10A               	bnz	l5564
  3192   0019CA  D826               	call	PL177	;call to abstracted procedure
  3193   0019CC  D819               	call	PL153	;call to abstracted procedure
  3194   0019CE  E207               	bc	l5564
  3195                           
  3196                           ;mcc_generated_files/touch/mtouch_slider.c: 319:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 321:         slider->rightHysteresis = 0u;
  3197   0019D0  D823               	call	PL177	;call to abstracted procedure
  3198   0019D2  6ADF               	clrf	indf2,c
  3199                           
  3200                           ;mcc_generated_files/touch/mtouch_slider.c: 322:         slider->leftHysteresis = hyst_w
      +                          idth;
  3201   0019D4  5021               	movf	positional_hysteresis@slider^0,w,c
  3202   0019D6  D80F               	call	PL123	;call to abstracted procedure
  3203   0019D8  C02B  FFDF         	movff	positional_hysteresis@hyst_width,indf2
  3204   0019DC  D7EF               	goto	l5554
  3205   0019DE                     l5564:
  3206                           
  3207                           ;mcc_generated_files/touch/mtouch_slider.c: 326:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 328:         filtered_position = slider->sliderPosition;
  3208   0019DE  5021               	movf	positional_hysteresis@slider^0,w,c
  3209   0019E0  EC82  F009         	call	PL163	;call to abstracted procedure
  3210   0019E4  CFDE F029          	movff	postinc2,positional_hysteresis@filtered_position
  3211   0019E8  CFDD F02A          	movff	postdec2,positional_hysteresis@filtered_position+1
  3212   0019EC                     l5566:
  3213                           
  3214                           ;mcc_generated_files/touch/mtouch_slider.c: 331:     return filtered_position;
  3215   0019EC  C029  F021         	movff	positional_hysteresis@filtered_position,?_positional_hysteresis
  3216   0019F0  C02A  F022         	movff	positional_hysteresis@filtered_position+1,?_positional_hysteresis+1
  3217   0019F4  0012               	return		;funcret
  3218   0019F6                     __end_of_positional_hysteresis:
  3219                           	callstack 0
  3220   0019F6                     PL123:
  3221                           	callstack 19
  3222   0019F6  6ED9               	movwf	fsr2l,c
  3223   0019F8  6ADA               	clrf	fsr2h,c
  3224   0019FA  0E09               	movlw	9
  3225   0019FC  26D9               	addwf	fsr2l,f,c
  3226   0019FE  0C09               	retlw	9
  3227   001A00                     __end_ofPL123:
  3228                           	callstack 0
  3229   001A00                     PL153:
  3230                           	callstack 19
  3231   001A00  50DF               	movf	indf2,w,c
  3232   001A02  6E24               	movwf	??_positional_hysteresis^0,c
  3233   001A04  6A25               	clrf	(??_positional_hysteresis+1)^0,c
  3234   001A06  502D               	movf	positional_hysteresis@distance^0,w,c
  3235   001A08  5C24               	subwf	??_positional_hysteresis^0,w,c
  3236   001A0A  5025               	movf	(??_positional_hysteresis+1)^0,w,c
  3237   001A0C  0A80               	xorlw	128
  3238   001A0E  6E26               	movwf	(??_positional_hysteresis+2)^0,c
  3239   001A10  502E               	movf	(positional_hysteresis@distance+1)^0,w,c
  3240   001A12  0A80               	xorlw	128
  3241   001A14  5826               	subwfb	(??_positional_hysteresis+2)^0,w,c
  3242   001A16  0012               	return	
  3243   001A18                     __end_ofPL153:
  3244                           	callstack 0
  3245   001A18                     PL177:
  3246                           	callstack 19
  3247   001A18  5021               	movf	positional_hysteresis@slider^0,w,c
  3248   001A1A  6ED9               	movwf	fsr2l,c
  3249   001A1C  6ADA               	clrf	fsr2h,c
  3250   001A1E  0E08               	movlw	8
  3251   001A20  26D9               	addwf	fsr2l,f,c
  3252   001A22  0C08               	retlw	8
  3253   001A24                     __end_ofPL177:
  3254                           	callstack 0
  3255                           
  3256 ;; *************** function _moving_average_filter *****************
  3257 ;; Defined at:
  3258 ;;		line 341 in file "mcc_generated_files/touch/mtouch_slider.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;  slider          1   32[COMRAM] PTR struct .
  3261 ;;		 -> mtouch_slider(17), 
  3262 ;;  current_posi    2   33[COMRAM] unsigned short 
  3263 ;; Auto vars:     Size  Location     Type
  3264 ;;  distance        2   43[COMRAM] short 
  3265 ;;  dist_temp       2   41[COMRAM] unsigned short 
  3266 ;;  previous_pos    2   39[COMRAM] unsigned short 
  3267 ;;  filtered_pos    2   37[COMRAM] unsigned short 
  3268 ;; Return value:  Size  Location     Type
  3269 ;;                  2   32[COMRAM] unsigned short 
  3270 ;; Registers used:
  3271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3272 ;; Tracked objects:
  3273 ;;		On entry : 3F/0
  3274 ;;		On exit  : 0/0
  3275 ;;		Unchanged: 0/0
  3276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  3277 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3278 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3279 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3280 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3281 ;;Total ram usage:       13 bytes
  3282 ;; Hardware stack levels used: 1
  3283 ;; Hardware stack levels required when called: 7
  3284 ;; This function calls:
  3285 ;;		_get_difference
  3286 ;; This function is called by:
  3287 ;;		_calculate_position
  3288 ;; This function uses a non-reentrant model
  3289 ;;
  3290                           
  3291                           	psect	text22
  3292   001C82                     __ptext22:
  3293                           	callstack 0
  3294   001C82                     _moving_average_filter:
  3295                           	callstack 19
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;mcc_generated_files/touch/mtouch_slider.c: 341: static uint16_t moving_average_filter(m
      +                          touch_slider_t* slider, uint16_t current_position);mcc_generated_files/touch/mtouch_slid
      +                          er.c: 342: {;mcc_generated_files/touch/mtouch_slider.c: 343:     uint16_t filtered_posit
      +                          ion, dist_temp;;mcc_generated_files/touch/mtouch_slider.c: 344:     uint16_t previous_po
      +                          sition;;mcc_generated_files/touch/mtouch_slider.c: 345:     int16_t distance;;mcc_genera
      +                          ted_files/touch/mtouch_slider.c: 347:     previous_position = slider->rawPosition;
  3299                           
  3300                           ;incstack = 0
  3301   001C82  5021               	movf	moving_average_filter@slider^0,w,c
  3302   001C84  EC9F  F011         	call	PL199	;call to abstracted procedure
  3303   001C88  CFDE F028          	movff	postinc2,moving_average_filter@previous_position
  3304   001C8C  CFDD F029          	movff	postdec2,moving_average_filter@previous_position+1
  3305                           
  3306                           ; BSR set to: 0
  3307                           ;mcc_generated_files/touch/mtouch_slider.c: 349:     distance = get_difference(slider, p
      +                          revious_position, current_position);
  3308   001C90  C021  F015         	movff	moving_average_filter@slider,get_difference@slider
  3309   001C94  C028  F016         	movff	moving_average_filter@previous_position,get_difference@previous_position
  3310   001C98  C029  F017         	movff	moving_average_filter@previous_position+1,get_difference@previous_position+1
  3311   001C9C  C022  F018         	movff	moving_average_filter@current_position,get_difference@current_position
  3312   001CA0  C023  F019         	movff	moving_average_filter@current_position+1,get_difference@current_position+1
  3313   001CA4  ECA4  F011         	call	_get_difference	;wreg free
  3314   001CA8  C015  F02C         	movff	?_get_difference,moving_average_filter@distance
  3315   001CAC  C016  F02D         	movff	?_get_difference+1,moving_average_filter@distance+1
  3316                           
  3317                           ;mcc_generated_files/touch/mtouch_slider.c: 352:     if ((distance == 1) || (distance ==
      +                           -1))
  3318   001CB0  042C               	decf	moving_average_filter@distance^0,w,c
  3319   001CB2  102D               	iorwf	(moving_average_filter@distance+1)^0,w,c
  3320   001CB4  E004               	bz	u4670
  3321   001CB6  282C               	incf	moving_average_filter@distance^0,w,c
  3322   001CB8  E107               	bnz	l5578
  3323   001CBA  282D               	incf	(moving_average_filter@distance+1)^0,w,c
  3324   001CBC  E105               	bnz	l5578
  3325   001CBE                     u4670:
  3326                           
  3327                           ;mcc_generated_files/touch/mtouch_slider.c: 353:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 354:         filtered_position = previous_position;
  3328   001CBE  C028  F026         	movff	moving_average_filter@previous_position,moving_average_filter@filtered_position
  3329   001CC2  C029  F027         	movff	moving_average_filter@previous_position+1,moving_average_filter@filtered_position
      +                          +1
  3330                           
  3331                           ;mcc_generated_files/touch/mtouch_slider.c: 355:     }
  3332   001CC6  D023               	goto	l5588
  3333   001CC8                     l5578:
  3334                           
  3335                           ;mcc_generated_files/touch/mtouch_slider.c: 357:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 359:         if (distance < 0)
  3336   001CC8  AE2D               	btfss	(moving_average_filter@distance+1)^0,7,c
  3337   001CCA  D00C               	goto	l848
  3338                           
  3339                           ;mcc_generated_files/touch/mtouch_slider.c: 360:         {;mcc_generated_files/touch/mto
      +                          uch_slider.c: 361:             distance = (0 - distance);
  3340   001CCC  502C               	movf	moving_average_filter@distance^0,w,c
  3341   001CCE  0800               	sublw	0
  3342   001CD0  6E2C               	movwf	moving_average_filter@distance^0,c
  3343   001CD2  502D               	movf	(moving_average_filter@distance+1)^0,w,c
  3344   001CD4  D82D               	call	PL231	;call to abstracted procedure
  3345                           
  3346                           ;mcc_generated_files/touch/mtouch_slider.c: 362:             dist_temp = (uint16_t) dist
      +                          ance;
  3347                           
  3348                           ;mcc_generated_files/touch/mtouch_slider.c: 363:             dist_temp = dist_temp >> 1u
      +                          ;
  3349   001CD6  D820               	call	PL151	;call to abstracted procedure
  3350                           
  3351                           ;mcc_generated_files/touch/mtouch_slider.c: 364:             distance = (int16_t) (0 - (
      +                          int16_t) dist_temp);
  3352   001CD8  502A               	movf	moving_average_filter@dist_temp^0,w,c
  3353   001CDA  0800               	sublw	0
  3354   001CDC  6E2C               	movwf	moving_average_filter@distance^0,c
  3355   001CDE  502B               	movf	(moving_average_filter@dist_temp+1)^0,w,c
  3356   001CE0  D827               	call	PL231	;call to abstracted procedure
  3357                           
  3358                           ;mcc_generated_files/touch/mtouch_slider.c: 366:         }
  3359   001CE2  D005               	goto	l849
  3360   001CE4                     l848:
  3361                           
  3362                           ;mcc_generated_files/touch/mtouch_slider.c: 368:         {;mcc_generated_files/touch/mto
      +                          uch_slider.c: 369:             dist_temp = (uint16_t) (distance);
  3363                           
  3364                           ;mcc_generated_files/touch/mtouch_slider.c: 370:             dist_temp = dist_temp >> 1u
      +                          ;
  3365   001CE4  D819               	call	PL151	;call to abstracted procedure
  3366                           
  3367                           ;mcc_generated_files/touch/mtouch_slider.c: 371:             distance = (int16_t) (dist_
      +                          temp);
  3368   001CE6  C02A  F02C         	movff	moving_average_filter@dist_temp,moving_average_filter@distance
  3369   001CEA  C02B  F02D         	movff	moving_average_filter@dist_temp+1,moving_average_filter@distance+1
  3370   001CEE                     l849:
  3371                           
  3372                           ;mcc_generated_files/touch/mtouch_slider.c: 373:         filtered_position = (previous_p
      +                          osition) + (uint16_t) (distance);
  3373   001CEE  5028               	movf	moving_average_filter@previous_position^0,w,c
  3374   001CF0  242C               	addwf	moving_average_filter@distance^0,w,c
  3375   001CF2  6E26               	movwf	moving_average_filter@filtered_position^0,c
  3376   001CF4  5029               	movf	(moving_average_filter@previous_position+1)^0,w,c
  3377   001CF6  202D               	addwfc	(moving_average_filter@distance+1)^0,w,c
  3378   001CF8  6E27               	movwf	(moving_average_filter@filtered_position+1)^0,c
  3379                           
  3380                           ;mcc_generated_files/touch/mtouch_slider.c: 374:         filtered_position &= (resol_val
      +                          ue - 1u);
  3381   001CFA  0EFF               	movlw	255
  3382   001CFC  243D               	addwf	_resol_value^0,w,c
  3383   001CFE  6E24               	movwf	??_moving_average_filter^0,c
  3384   001D00  0EFF               	movlw	255
  3385   001D02  203E               	addwfc	(_resol_value+1)^0,w,c
  3386   001D04  6E25               	movwf	(??_moving_average_filter+1)^0,c
  3387   001D06  5024               	movf	??_moving_average_filter^0,w,c
  3388   001D08  1626               	andwf	moving_average_filter@filtered_position^0,f,c
  3389   001D0A  5025               	movf	(??_moving_average_filter+1)^0,w,c
  3390   001D0C  1627               	andwf	(moving_average_filter@filtered_position+1)^0,f,c
  3391   001D0E                     l5588:
  3392                           
  3393                           ;mcc_generated_files/touch/mtouch_slider.c: 377:     return filtered_position;
  3394   001D0E  C026  F021         	movff	moving_average_filter@filtered_position,?_moving_average_filter
  3395   001D12  C027  F022         	movff	moving_average_filter@filtered_position+1,?_moving_average_filter+1
  3396   001D16  0012               	return		;funcret
  3397   001D18                     __end_of_moving_average_filter:
  3398                           	callstack 0
  3399   001D18                     PL151:
  3400                           	callstack 19
  3401   001D18  C02C  F02A         	movff	moving_average_filter@distance,moving_average_filter@dist_temp
  3402   001D1C  C02D  F02B         	movff	moving_average_filter@distance+1,moving_average_filter@dist_temp+1
  3403   001D20  90D8               	bcf	status,0,c
  3404   001D22  302B               	rrcf	(moving_average_filter@dist_temp+1)^0,w,c
  3405   001D24  6E24               	movwf	??_moving_average_filter^0,c
  3406   001D26  302A               	rrcf	moving_average_filter@dist_temp^0,w,c
  3407   001D28  6E2A               	movwf	moving_average_filter@dist_temp^0,c
  3408   001D2A  C024  F02B         	movff	??_moving_average_filter,moving_average_filter@dist_temp+1
  3409   001D2E  0012               	return	
  3410   001D30                     __end_ofPL151:
  3411                           	callstack 0
  3412   001D30                     PL231:
  3413                           	callstack 19
  3414   001D30  A0D8               	btfss	status,0,c
  3415   001D32  2AE8               	incf	wreg,f,c
  3416   001D34  0800               	sublw	0
  3417   001D36  6E2D               	movwf	(moving_average_filter@distance+1)^0,c
  3418   001D38  0012               	return	
  3419   001D3A                     __end_ofPL231:
  3420                           	callstack 0
  3421                           
  3422 ;; *************** function _get_difference *****************
  3423 ;; Defined at:
  3424 ;;		line 251 in file "mcc_generated_files/touch/mtouch_slider.c"
  3425 ;; Parameters:    Size  Location     Type
  3426 ;;  slider          1   20[COMRAM] PTR struct .
  3427 ;;		 -> mtouch_slider(17), 
  3428 ;;  previous_pos    2   21[COMRAM] unsigned short 
  3429 ;;  current_posi    2   23[COMRAM] unsigned short 
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;  diff            2   30[COMRAM] short 
  3432 ;;  rollover_thr    2   28[COMRAM] unsigned short 
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  2   20[COMRAM] short 
  3435 ;; Registers used:
  3436 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  3442 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3443 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3444 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3445 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3446 ;;Total ram usage:       12 bytes
  3447 ;; Hardware stack levels used: 1
  3448 ;; Hardware stack levels required when called: 6
  3449 ;; This function calls:
  3450 ;;		Nothing
  3451 ;; This function is called by:
  3452 ;;		_positional_hysteresis
  3453 ;;		_moving_average_filter
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           	psect	text23
  3458   002348                     __ptext23:
  3459                           	callstack 0
  3460   002348                     _get_difference:
  3461                           	callstack 19
  3462                           
  3463                           ;mcc_generated_files/touch/mtouch_slider.c: 251: static int16_t get_difference(mtouch_sl
      +                          ider_t* slider, uint16_t previous_position, uint16_t current_position);mcc_generated_fil
      +                          es/touch/mtouch_slider.c: 252: {;mcc_generated_files/touch/mtouch_slider.c: 253:     int
      +                          16_t diff;;mcc_generated_files/touch/mtouch_slider.c: 254:     uint16_t rollover_thresho
      +                          ld;;mcc_generated_files/touch/mtouch_slider.c: 257:     rollover_threshold = resol_value
      +                           >> 1u;
  3464                           
  3465                           ;incstack = 0
  3466   002348  90D8               	bcf	status,0,c
  3467   00234A  303E               	rrcf	(_resol_value+1)^0,w,c
  3468   00234C  6E1A               	movwf	??_get_difference^0,c
  3469   00234E  303D               	rrcf	_resol_value^0,w,c
  3470   002350  6E1D               	movwf	get_difference@rollover_threshold^0,c
  3471   002352  C01A  F01E         	movff	??_get_difference,get_difference@rollover_threshold+1
  3472                           
  3473                           ;mcc_generated_files/touch/mtouch_slider.c: 260:     diff = ((int16_t) current_position 
      +                          - (int16_t) previous_position);
  3474   002356  5016               	movf	get_difference@previous_position^0,w,c
  3475   002358  5C18               	subwf	get_difference@current_position^0,w,c
  3476   00235A  6E1F               	movwf	get_difference@diff^0,c
  3477   00235C  5017               	movf	(get_difference@previous_position+1)^0,w,c
  3478   00235E  5819               	subwfb	(get_difference@current_position+1)^0,w,c
  3479   002360  6E20               	movwf	(get_difference@diff+1)^0,c
  3480                           
  3481                           ;mcc_generated_files/touch/mtouch_slider.c: 263:     if (slider->type == MTOUCH_TYPE_WHE
      +                          EL)
  3482   002362  5015               	movf	get_difference@slider^0,w,c
  3483   002364  EC6A  F010         	call	PL189	;call to abstracted procedure
  3484   002368  E126               	bnz	l5422
  3485                           
  3486                           ;mcc_generated_files/touch/mtouch_slider.c: 264:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 265:         if (diff < (int16_t) 0u)
  3487   00236A  AE20               	btfss	(get_difference@diff+1)^0,7,c
  3488   00236C  D015               	goto	l5418
  3489                           
  3490                           ;mcc_generated_files/touch/mtouch_slider.c: 266:         {;mcc_generated_files/touch/mto
      +                          uch_slider.c: 267:             if ((0 - (int16_t) rollover_threshold) > diff)
  3491   00236E  6A1A               	clrf	??_get_difference^0,c
  3492   002370  6A1B               	clrf	(??_get_difference+1)^0,c
  3493   002372  501D               	movf	get_difference@rollover_threshold^0,w,c
  3494   002374  5E1A               	subwf	??_get_difference^0,f,c
  3495   002376  501E               	movf	(get_difference@rollover_threshold+1)^0,w,c
  3496   002378  5A1B               	subwfb	(??_get_difference+1)^0,f,c
  3497   00237A  501A               	movf	??_get_difference^0,w,c
  3498   00237C  5C1F               	subwf	get_difference@diff^0,w,c
  3499   00237E  5020               	movf	(get_difference@diff+1)^0,w,c
  3500   002380  0A80               	xorlw	128
  3501   002382  6E1C               	movwf	(??_get_difference+2)^0,c
  3502   002384  501B               	movf	(??_get_difference+1)^0,w,c
  3503   002386  0A80               	xorlw	128
  3504   002388  581C               	subwfb	(??_get_difference+2)^0,w,c
  3505   00238A  E215               	bc	l5422
  3506                           
  3507                           ;mcc_generated_files/touch/mtouch_slider.c: 268:             {;mcc_generated_files/touch
      +                          /mtouch_slider.c: 269:                 diff = (diff + (int16_t) resol_value);
  3508   00238C  501F               	movf	get_difference@diff^0,w,c
  3509   00238E  243D               	addwf	_resol_value^0,w,c
  3510   002390  6E1F               	movwf	get_difference@diff^0,c
  3511   002392  5020               	movf	(get_difference@diff+1)^0,w,c
  3512   002394  203E               	addwfc	(_resol_value+1)^0,w,c
  3513   002396  D00E               	goto	L1
  3514   002398                     l5418:
  3515                           
  3516                           ;mcc_generated_files/touch/mtouch_slider.c: 273:         {;mcc_generated_files/touch/mto
      +                          uch_slider.c: 274:             if (diff > ((int16_t) rollover_threshold))
  3517   002398  501F               	movf	get_difference@diff^0,w,c
  3518   00239A  5C1D               	subwf	get_difference@rollover_threshold^0,w,c
  3519   00239C  501E               	movf	(get_difference@rollover_threshold+1)^0,w,c
  3520   00239E  0A80               	xorlw	128
  3521   0023A0  6E1A               	movwf	??_get_difference^0,c
  3522   0023A2  5020               	movf	(get_difference@diff+1)^0,w,c
  3523   0023A4  0A80               	xorlw	128
  3524   0023A6  581A               	subwfb	??_get_difference^0,w,c
  3525   0023A8  E206               	bc	l5422
  3526                           
  3527                           ;mcc_generated_files/touch/mtouch_slider.c: 275:             {;mcc_generated_files/touch
      +                          /mtouch_slider.c: 276:                 diff = (diff - (int16_t) resol_value);
  3528   0023AA  503D               	movf	_resol_value^0,w,c
  3529   0023AC  5C1F               	subwf	get_difference@diff^0,w,c
  3530   0023AE  6E1F               	movwf	get_difference@diff^0,c
  3531   0023B0  503E               	movf	(_resol_value+1)^0,w,c
  3532   0023B2  5820               	subwfb	(get_difference@diff+1)^0,w,c
  3533   0023B4                     L1:
  3534   0023B4  6E20               	movwf	(get_difference@diff+1)^0,c
  3535   0023B6                     l5422:
  3536                           
  3537                           ;mcc_generated_files/touch/mtouch_slider.c: 281:     return diff;
  3538   0023B6  C01F  F015         	movff	get_difference@diff,?_get_difference
  3539   0023BA  C020  F016         	movff	get_difference@diff+1,?_get_difference+1
  3540   0023BE  0012               	return		;funcret
  3541   0023C0                     __end_of_get_difference:
  3542                           	callstack 0
  3543                           
  3544 ;; *************** function _calculate_raw_position *****************
  3545 ;; Defined at:
  3546 ;;		line 522 in file "mcc_generated_files/touch/mtouch_slider.c"
  3547 ;; Parameters:    Size  Location     Type
  3548 ;;  slider          1   40[COMRAM] PTR struct .
  3549 ;;		 -> mtouch_slider(17), 
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;  position        2    8[BANK0 ] unsigned short 
  3552 ;;  deadband        2    4[BANK0 ] unsigned short 
  3553 ;;  deadband_set    2    1[BANK0 ] unsigned short 
  3554 ;;  size            1    7[BANK0 ] unsigned char 
  3555 ;;  interpolatio    1    6[BANK0 ] unsigned char 
  3556 ;;  interpolatio    1    3[BANK0 ] unsigned char 
  3557 ;;  ref_node        1    0[BANK0 ] unsigned char 
  3558 ;; Return value:  Size  Location     Type
  3559 ;;                  2   40[COMRAM] unsigned short 
  3560 ;; Registers used:
  3561 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3562 ;; Tracked objects:
  3563 ;;		On entry : 3F/1
  3564 ;;		On exit  : 3F/0
  3565 ;;		Unchanged: 0/0
  3566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  3567 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3568 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3569 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3570 ;;      Totals:         7      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3571 ;;Total ram usage:       17 bytes
  3572 ;; Hardware stack levels used: 1
  3573 ;; Hardware stack levels required when called: 8
  3574 ;; This function calls:
  3575 ;;		_divide
  3576 ;;		_interpolate
  3577 ;; This function is called by:
  3578 ;;		_calculate_position
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           	psect	text24
  3583   000F8A                     __ptext24:
  3584                           	callstack 0
  3585   000F8A                     _calculate_raw_position:
  3586                           	callstack 18
  3587                           
  3588                           ; BSR set to: 1
  3589                           ;mcc_generated_files/touch/mtouch_slider.c: 522: static uint16_t calculate_raw_position(
      +                          mtouch_slider_t* slider);mcc_generated_files/touch/mtouch_slider.c: 523: {;mcc_generated
      +                          _files/touch/mtouch_slider.c: 524:     uint8_t ref_node;;mcc_generated_files/touch/mtouc
      +                          h_slider.c: 525:     uint8_t interpolation_bits;;mcc_generated_files/touch/mtouch_slider
      +                          .c: 526:     uint8_t interpolation_scale;;mcc_generated_files/touch/mtouch_slider.c: 527
      +                          :     uint8_t size;;mcc_generated_files/touch/mtouch_slider.c: 528:     uint16_t positio
      +                          n, deadband, deadband_set;
  3590                           
  3591                           ;incstack = 0
  3592   000F8A  5029               	movf	calculate_raw_position@slider^0,w,c
  3593   000F8C  EC25  F011         	call	PL115	;call to abstracted procedure
  3594   000F90  0100               	movlb	0	; () banked
  3595   000F92  6FE6               	movwf	calculate_raw_position@ref_node& (0+255),b
  3596                           
  3597                           ;mcc_generated_files/touch/mtouch_slider.c: 532:     size = slider->segmentCount;
  3598   000F94  5029               	movf	calculate_raw_position@slider^0,w,c
  3599   000F96  EC3A  F00B         	call	PL119	;call to abstracted procedure
  3600   000F9A  6FED               	movwf	calculate_raw_position@size& (0+255),b
  3601                           
  3602                           ; BSR set to: 0
  3603                           ;mcc_generated_files/touch/mtouch_slider.c: 541:     if (size < 16u)
  3604   000F9C  0E10               	movlw	16
  3605   000F9E  61ED               	cpfslt	calculate_raw_position@size& (0+255),b
  3606   000FA0  D004               	goto	l5646
  3607                           
  3608                           ; BSR set to: 0
  3609                           ;mcc_generated_files/touch/mtouch_slider.c: 542:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 543:         interpolation_bits = 12u;
  3610   000FA2  0E0C               	movlw	12
  3611   000FA4  6FEC               	movwf	calculate_raw_position@interpolation_bits& (0+255),b
  3612                           
  3613                           ; BSR set to: 0
  3614                           ;mcc_generated_files/touch/mtouch_slider.c: 544:         interpolation_scale = 0u;
  3615   000FA6  6BE9               	clrf	calculate_raw_position@interpolation_scale& (0+255),b
  3616                           
  3617                           ;mcc_generated_files/touch/mtouch_slider.c: 545:     }
  3618   000FA8  D004               	goto	l5648
  3619   000FAA                     l5646:
  3620                           
  3621                           ; BSR set to: 0
  3622                           ;mcc_generated_files/touch/mtouch_slider.c: 547:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 548:         interpolation_bits = 8u;
  3623   000FAA  0E08               	movlw	8
  3624   000FAC  6FEC               	movwf	calculate_raw_position@interpolation_bits& (0+255),b
  3625                           
  3626                           ;mcc_generated_files/touch/mtouch_slider.c: 549:         interpolation_scale = 4u;
  3627   000FAE  0E04               	movlw	4
  3628   000FB0  6FE9               	movwf	calculate_raw_position@interpolation_scale& (0+255),b
  3629   000FB2                     l5648:
  3630                           
  3631                           ; BSR set to: 0
  3632                           ;mcc_generated_files/touch/mtouch_slider.c: 553:     if (wheel_sensor_middle_channel_zer
      +                          o == 1u)
  3633   000FB2  0446               	decf	_wheel_sensor_middle_channel_zero^0,w,c
  3634   000FB4  E10B               	bnz	l5652
  3635                           
  3636                           ; BSR set to: 0
  3637                           ;mcc_generated_files/touch/mtouch_slider.c: 554:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 555:         position = (uint16_t) ((uint16_t) (size) << interpolation_bits);
  3638   000FB6  C0EC  F02B         	movff	calculate_raw_position@interpolation_bits,??_calculate_raw_position
  3639   000FBA  51ED               	movf	calculate_raw_position@size& (0+255),w,b
  3640   000FBC  6E2C               	movwf	(??_calculate_raw_position+1)^0,c
  3641   000FBE  6A2D               	clrf	(??_calculate_raw_position+2)^0,c
  3642   000FC0  2A2B               	incf	??_calculate_raw_position^0,f,c
  3643   000FC2  D001               	goto	u4804
  3644   000FC4                     u4805:
  3645   000FC4  D8D1               	call	PL225	;call to abstracted procedure
  3646   000FC6                     u4804:
  3647   000FC6  2E2B               	decfsz	??_calculate_raw_position^0,f,c
  3648   000FC8  D7FD               	goto	u4805
  3649   000FCA  D00E               	goto	L2
  3650   000FCC                     l5652:
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;mcc_generated_files/touch/mtouch_slider.c: 558:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 559:         position = (uint16_t) ((middle_node - ref_node) << interpolation_
      +                          bits);
  3654   000FCC  C0EC  F02B         	movff	calculate_raw_position@interpolation_bits,??_calculate_raw_position
  3655   000FD0  51E6               	movf	calculate_raw_position@ref_node& (0+255),w,b
  3656   000FD2  C047  F02C         	movff	_middle_node,??_calculate_raw_position+1
  3657   000FD6  6A2D               	clrf	(??_calculate_raw_position+2)^0,c
  3658   000FD8  5E2C               	subwf	(??_calculate_raw_position+1)^0,f,c
  3659   000FDA  0E00               	movlw	0
  3660   000FDC  5A2D               	subwfb	(??_calculate_raw_position+2)^0,f,c
  3661   000FDE  2A2B               	incf	??_calculate_raw_position^0,f,c
  3662   000FE0  D001               	goto	u4814
  3663   000FE2                     u4815:
  3664   000FE2  D8C2               	call	PL225	;call to abstracted procedure
  3665   000FE4                     u4814:
  3666   000FE4  2E2B               	decfsz	??_calculate_raw_position^0,f,c
  3667   000FE6  D7FD               	goto	u4815
  3668   000FE8                     L2:
  3669   000FE8  D8B5               	call	PL217	;call to abstracted procedure
  3670                           
  3671                           ;mcc_generated_files/touch/mtouch_slider.c: 563:     position += interpolate((uint16_t) 
      +                          left_signal, (uint16_t) middle_signal, (uint16_t) right_signal, interpolation_bits);
  3672   000FEA  C03B  F01C         	movff	_left_signal,interpolate@delta1
  3673   000FEE  C03C  F01D         	movff	_left_signal+1,interpolate@delta1+1
  3674   000FF2  C037  F01E         	movff	_middle_signal,interpolate@delta2
  3675   000FF6  C038  F01F         	movff	_middle_signal+1,interpolate@delta2+1
  3676   000FFA  C039  F020         	movff	_right_signal,interpolate@delta3
  3677   000FFE  C03A  F021         	movff	_right_signal+1,interpolate@delta3+1
  3678   001002  C0EC  F022         	movff	calculate_raw_position@interpolation_bits,interpolate@num_bits
  3679   001006  EC9D  F00E         	call	_interpolate	;wreg free
  3680   00100A  501C               	movf	?_interpolate^0,w,c
  3681   00100C  0100               	movlb	0	; () banked
  3682   00100E  27EE               	addwf	calculate_raw_position@position& (0+255),f,b
  3683   001010  501D               	movf	(?_interpolate+1)^0,w,c
  3684   001012  23EF               	addwfc	(calculate_raw_position@position+1)& (0+255),f,b
  3685                           
  3686                           ; BSR set to: 0
  3687                           ;mcc_generated_files/touch/mtouch_slider.c: 566:     if (size > 2u)
  3688   001014  0E02               	movlw	2
  3689   001016  65ED               	cpfsgt	calculate_raw_position@size& (0+255),b
  3690   001018  D019               	goto	l5664
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;mcc_generated_files/touch/mtouch_slider.c: 567:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 568:         if (slider->type == MTOUCH_TYPE_WHEEL)
  3694   00101A  5029               	movf	calculate_raw_position@slider^0,w,c
  3695   00101C  EC6A  F010         	call	PL189	;call to abstracted procedure
  3696   001020  E109               	bnz	l5662
  3697                           
  3698                           ; BSR set to: 0
  3699                           ;mcc_generated_files/touch/mtouch_slider.c: 569:         {;mcc_generated_files/touch/mto
      +                          uch_slider.c: 570:             position = divide(position, (uint16_t) (size), interpolat
      +                          ion_scale);
  3700   001022  D893               	call	PL195	;call to abstracted procedure
  3701   001024  C0ED  F017         	movff	calculate_raw_position@size,divide@denominator
  3702   001028  6A18               	clrf	(divide@denominator+1)^0,c
  3703   00102A  C0E9  F019         	movff	calculate_raw_position@interpolation_scale,divide@exponent
  3704   00102E  ECAF  F010         	call	_divide	;wreg free
  3705   001032  D00B               	goto	L3
  3706   001034                     l5662:
  3707                           
  3708                           ; BSR set to: 0
  3709                           ;mcc_generated_files/touch/mtouch_slider.c: 573:         {;mcc_generated_files/touch/mto
      +                          uch_slider.c: 574:             position = divide(position, (uint16_t) ((uint16_t) size -
      +                           1u), interpolation_scale);
  3710   001034  D88A               	call	PL195	;call to abstracted procedure
  3711   001036  0EFF               	movlw	255
  3712   001038  25ED               	addwf	calculate_raw_position@size& (0+255),w,b
  3713   00103A  6E17               	movwf	divide@denominator^0,c
  3714   00103C  6A18               	clrf	(divide@denominator+1)^0,c
  3715   00103E  0EFF               	movlw	255
  3716   001040  2218               	addwfc	(divide@denominator+1)^0,f,c
  3717   001042  C0E9  F019         	movff	calculate_raw_position@interpolation_scale,divide@exponent
  3718   001046  ECAF  F010         	call	_divide	;wreg free
  3719   00104A                     L3:
  3720   00104A  D889               	call	PL223	;call to abstracted procedure
  3721   00104C                     l5664:
  3722                           
  3723                           ;mcc_generated_files/touch/mtouch_slider.c: 579:     if (position > (uint16_t)((uint16_t
      +                          )1u << 12u))
  3724   00104C  0100               	movlb	0	; () banked
  3725   00104E  05EE               	decf	calculate_raw_position@position& (0+255),w,b
  3726   001050  0E10               	movlw	16
  3727   001052  59EF               	subwfb	(calculate_raw_position@position+1)& (0+255),w,b
  3728   001054  E303               	bnc	l5668
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;mcc_generated_files/touch/mtouch_slider.c: 580:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 581:         position = (uint16_t)((uint16_t)1u << 12u);
  3732   001056  0E10               	movlw	16
  3733   001058  6FEF               	movwf	(calculate_raw_position@position+1)& (0+255),b
  3734   00105A  6BEE               	clrf	calculate_raw_position@position& (0+255),b
  3735   00105C                     l5668:
  3736                           
  3737                           ; BSR set to: 0
  3738                           ;mcc_generated_files/touch/mtouch_slider.c: 585:     if ((slider->type == MTOUCH_TYPE_SL
      +                          IDER) && (0u != (slider->resolDeadband & (0x0Fu))))
  3739   00105C  5029               	movf	calculate_raw_position@slider^0,w,c
  3740   00105E  EC19  F00A         	call	PL205	;call to abstracted procedure
  3741   001062  E13F               	bnz	l5690
  3742                           
  3743                           ; BSR set to: 0
  3744   001064  5029               	movf	calculate_raw_position@slider^0,w,c
  3745   001066  EC0B  F00A         	call	PL137	;call to abstracted procedure
  3746   00106A  50DF               	movf	indf2,w,c
  3747   00106C  6E2B               	movwf	??_calculate_raw_position^0,c
  3748   00106E  0E0F               	movlw	15
  3749   001070  162B               	andwf	??_calculate_raw_position^0,f,c
  3750   001072  E037               	bz	l5690
  3751                           
  3752                           ; BSR set to: 0
  3753                           ;mcc_generated_files/touch/mtouch_slider.c: 586:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 588:         deadband = 0u;
  3754   001074  6BEA               	clrf	calculate_raw_position@deadband& (0+255),b
  3755   001076  6BEB               	clrf	(calculate_raw_position@deadband+1)& (0+255),b
  3756                           
  3757                           ; BSR set to: 0
  3758                           ;mcc_generated_files/touch/mtouch_slider.c: 589:         deadband_set = (uint8_t) (slide
      +                          r->resolDeadband & (0x0Fu));
  3759   001078  5029               	movf	calculate_raw_position@slider^0,w,c
  3760   00107A  EC0B  F00A         	call	PL137	;call to abstracted procedure
  3761   00107E  50DF               	movf	indf2,w,c
  3762   001080  0B0F               	andlw	15
  3763   001082  6FE7               	movwf	calculate_raw_position@deadband_set& (0+255),b
  3764   001084  6BE8               	clrf	(calculate_raw_position@deadband_set+1)& (0+255),b
  3765                           
  3766                           ;mcc_generated_files/touch/mtouch_slider.c: 590:         while (deadband_set > 0u)
  3767   001086  D007               	goto	l5680
  3768   001088                     l5676:
  3769                           
  3770                           ; BSR set to: 0
  3771                           ;mcc_generated_files/touch/mtouch_slider.c: 591:         {;mcc_generated_files/touch/mto
      +                          uch_slider.c: 592:             deadband_set--;
  3772   001088  07E7               	decf	calculate_raw_position@deadband_set& (0+255),f,b
  3773   00108A  A0D8               	btfss	status,0,c
  3774   00108C  07E8               	decf	(calculate_raw_position@deadband_set+1)& (0+255),f,b
  3775                           
  3776                           ; BSR set to: 0
  3777                           ;mcc_generated_files/touch/mtouch_slider.c: 593:             deadband += ((uint16_t)((ui
      +                          nt16_t)1u << 12u)/100u);
  3778   00108E  0E28               	movlw	40
  3779   001090  27EA               	addwf	calculate_raw_position@deadband& (0+255),f,b
  3780   001092  0E00               	movlw	0
  3781   001094  23EB               	addwfc	(calculate_raw_position@deadband+1)& (0+255),f,b
  3782   001096                     l5680:
  3783                           
  3784                           ; BSR set to: 0
  3785                           ;mcc_generated_files/touch/mtouch_slider.c: 590:         while (deadband_set > 0u)
  3786   001096  51E7               	movf	calculate_raw_position@deadband_set& (0+255),w,b
  3787   001098  11E8               	iorwf	(calculate_raw_position@deadband_set+1)& (0+255),w,b
  3788   00109A  E1F6               	bnz	l5676
  3789                           
  3790                           ; BSR set to: 0
  3791                           ;mcc_generated_files/touch/mtouch_slider.c: 596:         if (position < deadband)
  3792   00109C  51EA               	movf	calculate_raw_position@deadband& (0+255),w,b
  3793   00109E  5DEE               	subwf	calculate_raw_position@position& (0+255),w,b
  3794   0010A0  51EB               	movf	(calculate_raw_position@deadband+1)& (0+255),w,b
  3795   0010A2  59EF               	subwfb	(calculate_raw_position@position+1)& (0+255),w,b
  3796   0010A4  E203               	bc	l5686
  3797                           
  3798                           ; BSR set to: 0
  3799                           ;mcc_generated_files/touch/mtouch_slider.c: 597:         {;mcc_generated_files/touch/mto
      +                          uch_slider.c: 598:             position = 0u;
  3800   0010A6  6BEE               	clrf	calculate_raw_position@position& (0+255),b
  3801   0010A8  6BEF               	clrf	(calculate_raw_position@position+1)& (0+255),b
  3802                           
  3803                           ;mcc_generated_files/touch/mtouch_slider.c: 599:         }
  3804   0010AA  D006               	goto	l5688
  3805   0010AC                     l5686:
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;mcc_generated_files/touch/mtouch_slider.c: 601:         {;mcc_generated_files/touch/mto
      +                          uch_slider.c: 602:             position = (uint16_t) (position - deadband);
  3809   0010AC  51EA               	movf	calculate_raw_position@deadband& (0+255),w,b
  3810   0010AE  5DEE               	subwf	calculate_raw_position@position& (0+255),w,b
  3811   0010B0  6FEE               	movwf	calculate_raw_position@position& (0+255),b
  3812   0010B2  51EB               	movf	(calculate_raw_position@deadband+1)& (0+255),w,b
  3813   0010B4  59EF               	subwfb	(calculate_raw_position@position+1)& (0+255),w,b
  3814   0010B6  6FEF               	movwf	(calculate_raw_position@position+1)& (0+255),b
  3815   0010B8                     l5688:
  3816                           
  3817                           ; BSR set to: 0
  3818                           ;mcc_generated_files/touch/mtouch_slider.c: 608:         position = divide(position, (ui
      +                          nt16_t) ((uint16_t)((uint16_t)1u << 12u) - (uint16_t) (deadband << 1u)), 12u);
  3819   0010B8  D848               	call	PL195	;call to abstracted procedure
  3820   0010BA  C0EA  F02B         	movff	calculate_raw_position@deadband,??_calculate_raw_position
  3821   0010BE  C0EB  F02C         	movff	calculate_raw_position@deadband+1,??_calculate_raw_position+1
  3822   0010C2  90D8               	bcf	status,0,c
  3823   0010C4  362B               	rlcf	??_calculate_raw_position^0,f,c
  3824   0010C6  362C               	rlcf	(??_calculate_raw_position+1)^0,f,c
  3825   0010C8  502B               	movf	??_calculate_raw_position^0,w,c
  3826   0010CA  0800               	sublw	0
  3827   0010CC  6E17               	movwf	divide@denominator^0,c
  3828   0010CE  502C               	movf	(??_calculate_raw_position+1)^0,w,c
  3829   0010D0  A0D8               	btfss	status,0,c
  3830   0010D2  2AE8               	incf	wreg,f,c
  3831   0010D4  0810               	sublw	16
  3832   0010D6  6E18               	movwf	(divide@denominator+1)^0,c
  3833   0010D8  0E0C               	movlw	12
  3834   0010DA  6E19               	movwf	divide@exponent^0,c
  3835   0010DC  ECAF  F010         	call	_divide	;wreg free
  3836   0010E0  D83E               	call	PL223	;call to abstracted procedure
  3837   0010E2                     l5690:
  3838                           
  3839                           ;mcc_generated_files/touch/mtouch_slider.c: 612:     position = position >> (12u - resol
      +                          _bits);
  3840   0010E2  504A               	movf	_resol_bits^0,w,c
  3841   0010E4  080C               	sublw	12
  3842   0010E6  6E2B               	movwf	??_calculate_raw_position^0,c
  3843   0010E8  C0EE  F02C         	movff	calculate_raw_position@position,??_calculate_raw_position+1
  3844   0010EC  C0EF  F02D         	movff	calculate_raw_position@position+1,??_calculate_raw_position+2
  3845   0010F0  2A2B               	incf	??_calculate_raw_position^0,f,c
  3846   0010F2  D003               	goto	u4894
  3847   0010F4                     u4895:
  3848   0010F4  90D8               	bcf	status,0,c
  3849   0010F6  322D               	rrcf	(??_calculate_raw_position+2)^0,f,c
  3850   0010F8  322C               	rrcf	(??_calculate_raw_position+1)^0,f,c
  3851   0010FA                     u4894:
  3852   0010FA  2E2B               	decfsz	??_calculate_raw_position^0,f,c
  3853   0010FC  D7FB               	goto	u4895
  3854   0010FE  D82A               	call	PL217	;call to abstracted procedure
  3855                           
  3856                           ;mcc_generated_files/touch/mtouch_slider.c: 615:     if (position > (uint16_t) (((uint16
      +                          _t) 1 << resol_bits)) - 1u)
  3857   001100  D815               	call	PL131	;call to abstracted procedure
  3858   001102  6E2E               	movwf	(??_calculate_raw_position+3)^0,c
  3859   001104  0EFF               	movlw	255
  3860   001106  202D               	addwfc	(??_calculate_raw_position+2)^0,w,c
  3861   001108  6E2F               	movwf	(??_calculate_raw_position+4)^0,c
  3862   00110A  0100               	movlb	0	; () banked
  3863   00110C  51EE               	movf	calculate_raw_position@position& (0+255),w,b
  3864   00110E  5C2E               	subwf	(??_calculate_raw_position+3)^0,w,c
  3865   001110  51EF               	movf	(calculate_raw_position@position+1)& (0+255),w,b
  3866   001112  582F               	subwfb	(??_calculate_raw_position+4)^0,w,c
  3867   001114  E206               	bc	l5696
  3868                           
  3869                           ; BSR set to: 0
  3870                           ;mcc_generated_files/touch/mtouch_slider.c: 616:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 617:         position = (uint16_t) ((uint16_t) 1 << resol_bits) - 1u;
  3871   001116  D80A               	call	PL131	;call to abstracted procedure
  3872   001118  0100               	movlb	0	; () banked
  3873   00111A  6FEE               	movwf	calculate_raw_position@position& (0+255),b
  3874   00111C  0EFF               	movlw	255
  3875   00111E  202D               	addwfc	(??_calculate_raw_position+2)^0,w,c
  3876   001120  6FEF               	movwf	(calculate_raw_position@position+1)& (0+255),b
  3877   001122                     l5696:
  3878                           
  3879                           ; BSR set to: 0
  3880                           ;mcc_generated_files/touch/mtouch_slider.c: 620:     return position;
  3881   001122  C0EE  F029         	movff	calculate_raw_position@position,?_calculate_raw_position
  3882   001126  C0EF  F02A         	movff	calculate_raw_position@position+1,?_calculate_raw_position+1
  3883                           
  3884                           ; BSR set to: 0
  3885   00112A  0012               	return		;funcret
  3886   00112C                     __end_of_calculate_raw_position:
  3887                           	callstack 0
  3888   00112C                     PL131:
  3889                           	callstack 18
  3890   00112C  C04A  F02B         	movff	_resol_bits,??_calculate_raw_position
  3891   001130  0E01               	movlw	1
  3892   001132  6E2C               	movwf	(??_calculate_raw_position+1)^0,c
  3893   001134  6A2D               	clrf	(??_calculate_raw_position+2)^0,c
  3894   001136  2A2B               	incf	??_calculate_raw_position^0,f,c
  3895   001138  D003               	goto	u4904
  3896   00113A                     u4905:
  3897   00113A  90D8               	bcf	status,0,c
  3898   00113C  362C               	rlcf	(??_calculate_raw_position+1)^0,f,c
  3899   00113E  362D               	rlcf	(??_calculate_raw_position+2)^0,f,c
  3900   001140                     u4904:
  3901   001140  2E2B               	decfsz	??_calculate_raw_position^0,f,c
  3902   001142  D7FB               	goto	u4905
  3903   001144  0EFF               	movlw	255
  3904   001146  242C               	addwf	(??_calculate_raw_position+1)^0,w,c
  3905   001148  0012               	return	
  3906   00114A                     __end_ofPL131:
  3907                           	callstack 0
  3908   00114A                     PL195:
  3909                           	callstack 18
  3910   00114A  C0EE  F015         	movff	calculate_raw_position@position,divide@numerator
  3911   00114E  C0EF  F016         	movff	calculate_raw_position@position+1,divide@numerator+1
  3912   001152  0012               	return	
  3913   001154                     __end_ofPL195:
  3914                           	callstack 0
  3915   001154                     PL217:
  3916                           	callstack 18
  3917   001154  C02C  F0EE         	movff	??_calculate_raw_position+1,calculate_raw_position@position
  3918   001158  C02D  F0EF         	movff	??_calculate_raw_position+2,calculate_raw_position@position+1
  3919   00115C  0012               	return	
  3920   00115E                     __end_ofPL217:
  3921                           	callstack 0
  3922   00115E                     PL223:
  3923                           	callstack 18
  3924   00115E  C015  F0EE         	movff	?_divide,calculate_raw_position@position
  3925   001162  C016  F0EF         	movff	?_divide+1,calculate_raw_position@position+1
  3926   001166  0012               	return	
  3927   001168                     __end_ofPL223:
  3928                           	callstack 0
  3929   001168                     PL225:
  3930                           	callstack 18
  3931   001168  90D8               	bcf	status,0,c
  3932   00116A  362C               	rlcf	(??_calculate_raw_position+1)^0,f,c
  3933   00116C  362D               	rlcf	(??_calculate_raw_position+2)^0,f,c
  3934   00116E  0012               	return	
  3935   001170                     __end_ofPL225:
  3936                           	callstack 0
  3937                           
  3938 ;; *************** function _interpolate *****************
  3939 ;; Defined at:
  3940 ;;		line 385 in file "mcc_generated_files/touch/mtouch_slider.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;  delta1          2   27[COMRAM] unsigned short 
  3943 ;;  delta2          2   29[COMRAM] unsigned short 
  3944 ;;  delta3          2   31[COMRAM] unsigned short 
  3945 ;;  num_bits        1   33[COMRAM] unsigned char 
  3946 ;; Auto vars:     Size  Location     Type
  3947 ;;  rtnval          2   38[COMRAM] unsigned short 
  3948 ;; Return value:  Size  Location     Type
  3949 ;;                  2   27[COMRAM] unsigned short 
  3950 ;; Registers used:
  3951 ;;		wreg, status,2, status,0, cstack
  3952 ;; Tracked objects:
  3953 ;;		On entry : 0/0
  3954 ;;		On exit  : 0/0
  3955 ;;		Unchanged: 0/0
  3956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  3957 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3958 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3959 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3960 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  3961 ;;Total ram usage:       13 bytes
  3962 ;; Hardware stack levels used: 1
  3963 ;; Hardware stack levels required when called: 7
  3964 ;; This function calls:
  3965 ;;		_divide
  3966 ;; This function is called by:
  3967 ;;		_calculate_raw_position
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           	psect	text25
  3972   001D3A                     __ptext25:
  3973                           	callstack 0
  3974   001D3A                     _interpolate:
  3975                           	callstack 18
  3976                           
  3977                           ;mcc_generated_files/touch/mtouch_slider.c: 385: static uint16_t interpolate(uint16_t de
      +                          lta1, uint16_t delta2, uint16_t delta3, uint8_t num_bits);mcc_generated_files/touch/mtou
      +                          ch_slider.c: 386: {;mcc_generated_files/touch/mtouch_slider.c: 387:     uint16_t rtnval;
      +                          ;mcc_generated_files/touch/mtouch_slider.c: 389:     if (delta1 >= delta3)
  3978                           
  3979                           ; BSR set to: 0
  3980                           ;incstack = 0
  3981   001D3A  5020               	movf	interpolate@delta3^0,w,c
  3982   001D3C  5C1C               	subwf	interpolate@delta1^0,w,c
  3983   001D3E  5021               	movf	(interpolate@delta3+1)^0,w,c
  3984   001D40  581D               	subwfb	(interpolate@delta1+1)^0,w,c
  3985   001D42  E326               	bnc	l5432
  3986                           
  3987                           ;mcc_generated_files/touch/mtouch_slider.c: 390:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 391:         rtnval = (uint16_t) ((delta2 - delta3) + (delta1 - delta3));
  3988   001D44  C020  F023         	movff	interpolate@delta3,??_interpolate
  3989   001D48  C021  F024         	movff	interpolate@delta3+1,??_interpolate+1
  3990   001D4C  D83D               	call	PL159	;call to abstracted procedure
  3991   001D4E  501C               	movf	interpolate@delta1^0,w,c
  3992   001D50  2425               	addwf	(??_interpolate+2)^0,w,c
  3993   001D52  6E27               	movwf	interpolate@rtnval^0,c
  3994   001D54  501D               	movf	(interpolate@delta1+1)^0,w,c
  3995   001D56  2026               	addwfc	(??_interpolate+3)^0,w,c
  3996   001D58  6E28               	movwf	(interpolate@rtnval+1)^0,c
  3997                           
  3998                           ;mcc_generated_files/touch/mtouch_slider.c: 392:         rtnval = (uint16_t) (divide((ui
      +                          nt16_t) (delta2 - delta3), rtnval, num_bits) - (uint16_t) ((uint16_t) 1u << (num_bits)))
      +                          ;
  3999   001D5A  C022  F023         	movff	interpolate@num_bits,??_interpolate
  4000   001D5E  0E01               	movlw	1
  4001   001D60  6E24               	movwf	(??_interpolate+1)^0,c
  4002   001D62  6A25               	clrf	(??_interpolate+2)^0,c
  4003   001D64  2A23               	incf	??_interpolate^0,f,c
  4004   001D66  D003               	goto	u4444
  4005   001D68                     u4445:
  4006   001D68  90D8               	bcf	status,0,c
  4007   001D6A  3624               	rlcf	(??_interpolate+1)^0,f,c
  4008   001D6C  3625               	rlcf	(??_interpolate+2)^0,f,c
  4009   001D6E                     u4444:
  4010   001D6E  2E23               	decfsz	??_interpolate^0,f,c
  4011   001D70  D7FB               	goto	u4445
  4012   001D72  5020               	movf	interpolate@delta3^0,w,c
  4013   001D74  5C1E               	subwf	interpolate@delta2^0,w,c
  4014   001D76  6E15               	movwf	divide@numerator^0,c
  4015   001D78  5021               	movf	(interpolate@delta3+1)^0,w,c
  4016   001D7A  581F               	subwfb	(interpolate@delta2+1)^0,w,c
  4017   001D7C  D82F               	call	PL179	;call to abstracted procedure
  4018   001D7E  ECAF  F010         	call	_divide	;wreg free
  4019   001D82  5024               	movf	(??_interpolate+1)^0,w,c
  4020   001D84  5C15               	subwf	?_divide^0,w,c
  4021   001D86  6E27               	movwf	interpolate@rtnval^0,c
  4022   001D88  5025               	movf	(??_interpolate+2)^0,w,c
  4023   001D8A  5816               	subwfb	(?_divide+1)^0,w,c
  4024   001D8C  6E28               	movwf	(interpolate@rtnval+1)^0,c
  4025                           
  4026                           ;mcc_generated_files/touch/mtouch_slider.c: 393:     }
  4027   001D8E  D017               	goto	l5436
  4028   001D90                     l5432:
  4029                           
  4030                           ;mcc_generated_files/touch/mtouch_slider.c: 395:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 396:         rtnval = (uint16_t) ((delta2 - delta1) + (delta3 - delta1));
  4031   001D90  C01C  F023         	movff	interpolate@delta1,??_interpolate
  4032   001D94  C01D  F024         	movff	interpolate@delta1+1,??_interpolate+1
  4033   001D98  D817               	call	PL159	;call to abstracted procedure
  4034   001D9A  5020               	movf	interpolate@delta3^0,w,c
  4035   001D9C  2425               	addwf	(??_interpolate+2)^0,w,c
  4036   001D9E  6E27               	movwf	interpolate@rtnval^0,c
  4037   001DA0  5021               	movf	(interpolate@delta3+1)^0,w,c
  4038   001DA2  2026               	addwfc	(??_interpolate+3)^0,w,c
  4039   001DA4  6E28               	movwf	(interpolate@rtnval+1)^0,c
  4040                           
  4041                           ;mcc_generated_files/touch/mtouch_slider.c: 397:         rtnval = divide((uint16_t) (del
      +                          ta3 - delta1), rtnval, num_bits);
  4042   001DA6  501C               	movf	interpolate@delta1^0,w,c
  4043   001DA8  5C20               	subwf	interpolate@delta3^0,w,c
  4044   001DAA  6E15               	movwf	divide@numerator^0,c
  4045   001DAC  501D               	movf	(interpolate@delta1+1)^0,w,c
  4046   001DAE  5821               	subwfb	(interpolate@delta3+1)^0,w,c
  4047   001DB0  D815               	call	PL179	;call to abstracted procedure
  4048   001DB2  ECAF  F010         	call	_divide	;wreg free
  4049   001DB6  C015  F027         	movff	?_divide,interpolate@rtnval
  4050   001DBA  C016  F028         	movff	?_divide+1,interpolate@rtnval+1
  4051   001DBE                     l5436:
  4052                           
  4053                           ;mcc_generated_files/touch/mtouch_slider.c: 400:     return rtnval;
  4054   001DBE  C027  F01C         	movff	interpolate@rtnval,?_interpolate
  4055   001DC2  C028  F01D         	movff	interpolate@rtnval+1,?_interpolate+1
  4056   001DC6  0012               	return		;funcret
  4057   001DC8                     __end_of_interpolate:
  4058                           	callstack 0
  4059   001DC8                     PL159:
  4060                           	callstack 18
  4061   001DC8  90D8               	bcf	status,0,c
  4062   001DCA  3623               	rlcf	??_interpolate^0,f,c
  4063   001DCC  3624               	rlcf	(??_interpolate+1)^0,f,c
  4064   001DCE  5023               	movf	??_interpolate^0,w,c
  4065   001DD0  5C1E               	subwf	interpolate@delta2^0,w,c
  4066   001DD2  6E25               	movwf	(??_interpolate+2)^0,c
  4067   001DD4  5024               	movf	(??_interpolate+1)^0,w,c
  4068   001DD6  581F               	subwfb	(interpolate@delta2+1)^0,w,c
  4069   001DD8  6E26               	movwf	(??_interpolate+3)^0,c
  4070   001DDA  0012               	return	
  4071   001DDC                     __end_ofPL159:
  4072                           	callstack 0
  4073   001DDC                     PL179:
  4074                           	callstack 18
  4075   001DDC  6E16               	movwf	(divide@numerator+1)^0,c
  4076   001DDE  C027  F017         	movff	interpolate@rtnval,divide@denominator
  4077   001DE2  C028  F018         	movff	interpolate@rtnval+1,divide@denominator+1
  4078   001DE6  C022  F019         	movff	interpolate@num_bits,divide@exponent
  4079   001DEA  0012               	return	
  4080   001DEC                     __end_ofPL179:
  4081                           	callstack 0
  4082                           
  4083 ;; *************** function _divide *****************
  4084 ;; Defined at:
  4085 ;;		line 191 in file "mcc_generated_files/touch/mtouch_slider.c"
  4086 ;; Parameters:    Size  Location     Type
  4087 ;;  numerator       2   20[COMRAM] unsigned short 
  4088 ;;  denominator     2   22[COMRAM] unsigned short 
  4089 ;;  exponent        1   24[COMRAM] unsigned char 
  4090 ;; Auto vars:     Size  Location     Type
  4091 ;;  result          2   25[COMRAM] unsigned short 
  4092 ;; Return value:  Size  Location     Type
  4093 ;;                  2   20[COMRAM] unsigned short 
  4094 ;; Registers used:
  4095 ;;		wreg, status,2, status,0
  4096 ;; Tracked objects:
  4097 ;;		On entry : 0/0
  4098 ;;		On exit  : 0/0
  4099 ;;		Unchanged: 0/0
  4100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  4101 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4102 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4104 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4105 ;;Total ram usage:        7 bytes
  4106 ;; Hardware stack levels used: 1
  4107 ;; Hardware stack levels required when called: 6
  4108 ;; This function calls:
  4109 ;;		Nothing
  4110 ;; This function is called by:
  4111 ;;		_interpolate
  4112 ;;		_calculate_raw_position
  4113 ;; This function uses a non-reentrant model
  4114 ;;
  4115                           
  4116                           	psect	text26
  4117   00215E                     __ptext26:
  4118                           	callstack 0
  4119   00215E                     _divide:
  4120                           	callstack 18
  4121                           
  4122                           ;mcc_generated_files/touch/mtouch_slider.c: 191: static uint16_t divide(uint16_t numerat
      +                          or, uint16_t denominator, uint8_t exponent);mcc_generated_files/touch/mtouch_slider.c: 1
      +                          92: {;mcc_generated_files/touch/mtouch_slider.c: 193:     uint16_t result = 0u;
  4123                           
  4124                           ;incstack = 0
  4125   00215E  6A1A               	clrf	divide@result^0,c
  4126   002160  6A1B               	clrf	(divide@result+1)^0,c
  4127                           
  4128                           ;mcc_generated_files/touch/mtouch_slider.c: 196:     exponent++;
  4129   002162  2A19               	incf	divide@exponent^0,f,c
  4130                           
  4131                           ;mcc_generated_files/touch/mtouch_slider.c: 198:     if (denominator != 0u)
  4132   002164  5017               	movf	divide@denominator^0,w,c
  4133   002166  1018               	iorwf	(divide@denominator+1)^0,w,c
  4134   002168  E107               	bnz	l5338
  4135   00216A  D02D               	goto	l808
  4136   00216C                     l5334:
  4137                           
  4138                           ;mcc_generated_files/touch/mtouch_slider.c: 206:         {;mcc_generated_files/touch/mto
      +                          uch_slider.c: 207:             exponent--;
  4139   00216C  0619               	decf	divide@exponent^0,f,c
  4140                           
  4141                           ;mcc_generated_files/touch/mtouch_slider.c: 208:             numerator = (uint16_t) (num
      +                          erator << 1);
  4142   00216E  90D8               	bcf	status,0,c
  4143   002170  3415               	rlcf	divide@numerator^0,w,c
  4144   002172  6E15               	movwf	divide@numerator^0,c
  4145   002174  3416               	rlcf	(divide@numerator+1)^0,w,c
  4146   002176  6E16               	movwf	(divide@numerator+1)^0,c
  4147   002178                     l5338:
  4148                           
  4149                           ;mcc_generated_files/touch/mtouch_slider.c: 205:         while (((numerator & 0x8000u) =
      +                          = 0u) && (exponent != 0u))
  4150   002178  BE16               	btfsc	(divide@numerator+1)^0,7,c
  4151   00217A  D009               	goto	l5346
  4152   00217C  5019               	movf	divide@exponent^0,w,c
  4153   00217E  E007               	bz	l5346
  4154   002180  D7F5               	goto	l5334
  4155   002182                     l5342:
  4156                           
  4157                           ;mcc_generated_files/touch/mtouch_slider.c: 212:         {;mcc_generated_files/touch/mto
      +                          uch_slider.c: 213:             exponent++;
  4158   002182  2A19               	incf	divide@exponent^0,f,c
  4159                           
  4160                           ;mcc_generated_files/touch/mtouch_slider.c: 214:             denominator = (uint16_t) (d
      +                          enominator << 1);
  4161   002184  90D8               	bcf	status,0,c
  4162   002186  3417               	rlcf	divide@denominator^0,w,c
  4163   002188  6E17               	movwf	divide@denominator^0,c
  4164   00218A  3418               	rlcf	(divide@denominator+1)^0,w,c
  4165   00218C  6E18               	movwf	(divide@denominator+1)^0,c
  4166   00218E                     l5346:
  4167                           
  4168                           ;mcc_generated_files/touch/mtouch_slider.c: 211:         while ((denominator & 0x8000u) 
      +                          == 0u)
  4169   00218E  AE18               	btfss	(divide@denominator+1)^0,7,c
  4170   002190  D7F8               	goto	l5342
  4171   002192  D014               	goto	l5360
  4172   002194                     l5348:
  4173                           
  4174                           ;mcc_generated_files/touch/mtouch_slider.c: 219:         {;mcc_generated_files/touch/mto
      +                          uch_slider.c: 220:             result = (uint16_t) (result << 1);
  4175   002194  90D8               	bcf	status,0,c
  4176   002196  341A               	rlcf	divide@result^0,w,c
  4177   002198  6E1A               	movwf	divide@result^0,c
  4178   00219A  341B               	rlcf	(divide@result+1)^0,w,c
  4179   00219C  6E1B               	movwf	(divide@result+1)^0,c
  4180                           
  4181                           ;mcc_generated_files/touch/mtouch_slider.c: 221:             exponent--;
  4182   00219E  0619               	decf	divide@exponent^0,f,c
  4183                           
  4184                           ;mcc_generated_files/touch/mtouch_slider.c: 222:             if (numerator >= denominato
      +                          r)
  4185   0021A0  5017               	movf	divide@denominator^0,w,c
  4186   0021A2  5C15               	subwf	divide@numerator^0,w,c
  4187   0021A4  5018               	movf	(divide@denominator+1)^0,w,c
  4188   0021A6  5816               	subwfb	(divide@numerator+1)^0,w,c
  4189   0021A8  E306               	bnc	l5358
  4190                           
  4191                           ;mcc_generated_files/touch/mtouch_slider.c: 223:             {;mcc_generated_files/touch
      +                          /mtouch_slider.c: 224:                 numerator -= denominator;
  4192   0021AA  5017               	movf	divide@denominator^0,w,c
  4193   0021AC  5E15               	subwf	divide@numerator^0,f,c
  4194   0021AE  5018               	movf	(divide@denominator+1)^0,w,c
  4195   0021B0  5A16               	subwfb	(divide@numerator+1)^0,f,c
  4196                           
  4197                           ;mcc_generated_files/touch/mtouch_slider.c: 225:                 result++;
  4198   0021B2  4A1A               	infsnz	divide@result^0,f,c
  4199   0021B4  2A1B               	incf	(divide@result+1)^0,f,c
  4200   0021B6                     l5358:
  4201                           
  4202                           ;mcc_generated_files/touch/mtouch_slider.c: 227:             denominator >>= 1;
  4203   0021B6  90D8               	bcf	status,0,c
  4204   0021B8  3218               	rrcf	(divide@denominator+1)^0,f,c
  4205   0021BA  3217               	rrcf	divide@denominator^0,f,c
  4206   0021BC                     l5360:
  4207                           
  4208                           ;mcc_generated_files/touch/mtouch_slider.c: 218:         while ((exponent != 0u) && ((re
      +                          sult & 0x8000u) == 0u))
  4209   0021BC  5019               	movf	divide@exponent^0,w,c
  4210   0021BE  E005               	bz	l5364
  4211   0021C0  AE1B               	btfss	(divide@result+1)^0,7,c
  4212   0021C2  D7E8               	goto	l5348
  4213   0021C4  D002               	goto	l5364
  4214   0021C6                     l808:
  4215                           
  4216                           ;mcc_generated_files/touch/mtouch_slider.c: 231:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 232:         result = 0xffffu;
  4217   0021C6  681A               	setf	divide@result^0,c
  4218   0021C8  681B               	setf	(divide@result+1)^0,c
  4219   0021CA                     l5364:
  4220                           
  4221                           ;mcc_generated_files/touch/mtouch_slider.c: 236:     if (exponent)
  4222   0021CA  5019               	movf	divide@exponent^0,w,c
  4223   0021CC  E002               	bz	l824
  4224                           
  4225                           ;mcc_generated_files/touch/mtouch_slider.c: 237:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 238:         result = 0xffffu;
  4226   0021CE  681A               	setf	divide@result^0,c
  4227   0021D0  681B               	setf	(divide@result+1)^0,c
  4228   0021D2                     l824:
  4229                           
  4230                           ;mcc_generated_files/touch/mtouch_slider.c: 241:     return result;
  4231   0021D2  C01A  F015         	movff	divide@result,?_divide
  4232   0021D6  C01B  F016         	movff	divide@result+1,?_divide+1
  4233   0021DA  0012               	return		;funcret
  4234   0021DC                     __end_of_divide:
  4235                           	callstack 0
  4236                           
  4237 ;; *************** function _calculate_contact_size *****************
  4238 ;; Defined at:
  4239 ;;		line 628 in file "mcc_generated_files/touch/mtouch_slider.c"
  4240 ;; Parameters:    Size  Location     Type
  4241 ;;  slider          1   32[COMRAM] PTR struct .
  4242 ;;		 -> mtouch_slider(17), 
  4243 ;; Auto vars:     Size  Location     Type
  4244 ;;  contact_size    2   36[COMRAM] unsigned short 
  4245 ;; Return value:  Size  Location     Type
  4246 ;;                  2   32[COMRAM] unsigned short 
  4247 ;; Registers used:
  4248 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  4254 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4255 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4256 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4257 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4258 ;;Total ram usage:        6 bytes
  4259 ;; Hardware stack levels used: 1
  4260 ;; Hardware stack levels required when called: 8
  4261 ;; This function calls:
  4262 ;;		_Slider_FindLeft
  4263 ;;		_Slider_FindMiddle
  4264 ;;		_Slider_FindRight
  4265 ;; This function is called by:
  4266 ;;		_Slider_Service
  4267 ;; This function uses a non-reentrant model
  4268 ;;
  4269                           
  4270                           	psect	text27
  4271   0023C0                     __ptext27:
  4272                           	callstack 0
  4273   0023C0                     _calculate_contact_size:
  4274                           	callstack 19
  4275                           
  4276                           ;mcc_generated_files/touch/mtouch_slider.c: 628: static uint16_t calculate_contact_size(
      +                          mtouch_slider_t* slider);mcc_generated_files/touch/mtouch_slider.c: 629: {;mcc_generated
      +                          _files/touch/mtouch_slider.c: 630:     uint16_t contact_size;;mcc_generated_files/touch/
      +                          mtouch_slider.c: 632:     middle_signal = Slider_FindMiddle(slider);
  4277                           
  4278                           ;incstack = 0
  4279   0023C0  C021  F016         	movff	calculate_contact_size@slider,Slider_FindMiddle@slider
  4280   0023C4  ECEE  F010         	call	_Slider_FindMiddle	;wreg free
  4281   0023C8  C016  F037         	movff	?_Slider_FindMiddle,_middle_signal
  4282   0023CC  C017  F038         	movff	?_Slider_FindMiddle+1,_middle_signal+1
  4283                           
  4284                           ;mcc_generated_files/touch/mtouch_slider.c: 633:     right_signal = Slider_FindRight(sli
      +                          der);
  4285   0023D0  C021  F016         	movff	calculate_contact_size@slider,Slider_FindRight@slider
  4286   0023D4  EC1B  F012         	call	_Slider_FindRight	;wreg free
  4287   0023D8  C016  F039         	movff	?_Slider_FindRight,_right_signal
  4288   0023DC  C017  F03A         	movff	?_Slider_FindRight+1,_right_signal+1
  4289                           
  4290                           ;mcc_generated_files/touch/mtouch_slider.c: 634:     left_signal = Slider_FindLeft(slide
      +                          r);
  4291   0023E0  C021  F016         	movff	calculate_contact_size@slider,Slider_FindLeft@slider
  4292   0023E4  EC2D  F010         	call	_Slider_FindLeft	;wreg free
  4293   0023E8  C016  F03B         	movff	?_Slider_FindLeft,_left_signal
  4294   0023EC  C017  F03C         	movff	?_Slider_FindLeft+1,_left_signal+1
  4295                           
  4296                           ;mcc_generated_files/touch/mtouch_slider.c: 636:     if (right_signal > left_signal)
  4297   0023F0  5039               	movf	_right_signal^0,w,c
  4298   0023F2  5C3B               	subwf	_left_signal^0,w,c
  4299   0023F4  503C               	movf	(_left_signal+1)^0,w,c
  4300   0023F6  0A80               	xorlw	128
  4301   0023F8  6E23               	movwf	??_calculate_contact_size^0,c
  4302   0023FA  503A               	movf	(_right_signal+1)^0,w,c
  4303   0023FC  0A80               	xorlw	128
  4304   0023FE  5823               	subwfb	??_calculate_contact_size^0,w,c
  4305   002400  E205               	bc	l5844
  4306                           
  4307                           ;mcc_generated_files/touch/mtouch_slider.c: 637:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 638:         contact_size = middle_signal + right_signal;
  4308   002402  5039               	movf	_right_signal^0,w,c
  4309   002404  2437               	addwf	_middle_signal^0,w,c
  4310   002406  6E25               	movwf	calculate_contact_size@contact_size^0,c
  4311   002408  503A               	movf	(_right_signal+1)^0,w,c
  4312   00240A  D004               	goto	L4
  4313   00240C                     l5844:
  4314                           
  4315                           ;mcc_generated_files/touch/mtouch_slider.c: 641:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 642:         contact_size = middle_signal + left_signal;
  4316   00240C  503B               	movf	_left_signal^0,w,c
  4317   00240E  2437               	addwf	_middle_signal^0,w,c
  4318   002410  6E25               	movwf	calculate_contact_size@contact_size^0,c
  4319   002412  503C               	movf	(_left_signal+1)^0,w,c
  4320   002414                     L4:
  4321   002414  2038               	addwfc	(_middle_signal+1)^0,w,c
  4322   002416  6E26               	movwf	(calculate_contact_size@contact_size+1)^0,c
  4323                           
  4324                           ;mcc_generated_files/touch/mtouch_slider.c: 645:     if (contact_size < slider->contactT
      +                          hreshold)
  4325   002418  5021               	movf	calculate_contact_size@slider^0,w,c
  4326   00241A  EC87  F009         	call	PL185	;call to abstracted procedure
  4327   00241E  50DE               	movf	postinc2,w,c
  4328   002420  5C25               	subwf	calculate_contact_size@contact_size^0,w,c
  4329   002422  50DE               	movf	postinc2,w,c
  4330   002424  5826               	subwfb	(calculate_contact_size@contact_size+1)^0,w,c
  4331   002426  E202               	bc	l902
  4332                           
  4333                           ;mcc_generated_files/touch/mtouch_slider.c: 646:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 647:         contact_size = 0u;
  4334   002428  6A25               	clrf	calculate_contact_size@contact_size^0,c
  4335   00242A  6A26               	clrf	(calculate_contact_size@contact_size+1)^0,c
  4336   00242C                     l902:
  4337                           
  4338                           ;mcc_generated_files/touch/mtouch_slider.c: 650:     return contact_size;
  4339   00242C  C025  F021         	movff	calculate_contact_size@contact_size,?_calculate_contact_size
  4340   002430  C026  F022         	movff	calculate_contact_size@contact_size+1,?_calculate_contact_size+1
  4341   002434  0012               	return		;funcret
  4342   002436                     __end_of_calculate_contact_size:
  4343                           	callstack 0
  4344                           
  4345 ;; *************** function _Slider_FindRight *****************
  4346 ;; Defined at:
  4347 ;;		line 484 in file "mcc_generated_files/touch/mtouch_slider.c"
  4348 ;; Parameters:    Size  Location     Type
  4349 ;;  slider          1   21[COMRAM] PTR struct .
  4350 ;;		 -> mtouch_slider(17), 
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;  ref_node        1   29[COMRAM] unsigned char 
  4353 ;; Return value:  Size  Location     Type
  4354 ;;                  2   21[COMRAM] short 
  4355 ;; Registers used:
  4356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4357 ;; Tracked objects:
  4358 ;;		On entry : 0/0
  4359 ;;		On exit  : 0/0
  4360 ;;		Unchanged: 0/0
  4361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  4362 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4363 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4364 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4365 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4366 ;;Total ram usage:        9 bytes
  4367 ;; Hardware stack levels used: 1
  4368 ;; Hardware stack levels required when called: 7
  4369 ;; This function calls:
  4370 ;;		_MTOUCH_Button_Deviation_Get
  4371 ;; This function is called by:
  4372 ;;		_calculate_contact_size
  4373 ;; This function uses a non-reentrant model
  4374 ;;
  4375                           
  4376                           	psect	text28
  4377   002436                     __ptext28:
  4378                           	callstack 0
  4379   002436                     _Slider_FindRight:
  4380                           	callstack 19
  4381                           
  4382                           ;mcc_generated_files/touch/mtouch_slider.c: 484: static int16_t Slider_FindRight(mtouch_
      +                          slider_t* slider);mcc_generated_files/touch/mtouch_slider.c: 485: {;mcc_generated_files/
      +                          touch/mtouch_slider.c: 486:     uint8_t ref_node = slider->startSegment;
  4383                           
  4384                           ;incstack = 0
  4385   002436  5016               	movf	Slider_FindRight@slider^0,w,c
  4386   002438  EC25  F011         	call	PL115	;call to abstracted procedure
  4387   00243C  6E1E               	movwf	Slider_FindRight@ref_node^0,c
  4388                           
  4389                           ;mcc_generated_files/touch/mtouch_slider.c: 489:     if (middle_node == (ref_node + slid
      +                          er->segmentCount - 1u))
  4390   00243E  5047               	movf	_middle_node^0,w,c
  4391   002440  6E18               	movwf	??_Slider_FindRight^0,c
  4392   002442  6A19               	clrf	(??_Slider_FindRight+1)^0,c
  4393   002444  5016               	movf	Slider_FindRight@slider^0,w,c
  4394   002446  EC3A  F00B         	call	PL119	;call to abstracted procedure
  4395   00244A  C01E  F01A         	movff	Slider_FindRight@ref_node,??_Slider_FindRight+2
  4396   00244E  6A1B               	clrf	(??_Slider_FindRight+3)^0,c
  4397   002450  261A               	addwf	(??_Slider_FindRight+2)^0,f,c
  4398   002452  0E00               	movlw	0
  4399   002454  221B               	addwfc	(??_Slider_FindRight+3)^0,f,c
  4400   002456  0EFF               	movlw	255
  4401   002458  241A               	addwf	(??_Slider_FindRight+2)^0,w,c
  4402   00245A  6E1C               	movwf	(??_Slider_FindRight+4)^0,c
  4403   00245C  0EFF               	movlw	255
  4404   00245E  201B               	addwfc	(??_Slider_FindRight+3)^0,w,c
  4405   002460  6E1D               	movwf	(??_Slider_FindRight+5)^0,c
  4406   002462  5018               	movf	??_Slider_FindRight^0,w,c
  4407   002464  181C               	xorwf	(??_Slider_FindRight+4)^0,w,c
  4408   002466  E10E               	bnz	l5632
  4409   002468  5019               	movf	(??_Slider_FindRight+1)^0,w,c
  4410   00246A  181D               	xorwf	(??_Slider_FindRight+5)^0,w,c
  4411   00246C  E10B               	bnz	l5632
  4412                           
  4413                           ;mcc_generated_files/touch/mtouch_slider.c: 490:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 491:         if (slider->type == MTOUCH_TYPE_WHEEL)
  4414   00246E  5016               	movf	Slider_FindRight@slider^0,w,c
  4415   002470  EC6A  F010         	call	PL189	;call to abstracted procedure
  4416   002474  E104               	bnz	l875
  4417                           
  4418                           ;mcc_generated_files/touch/mtouch_slider.c: 492:         {;mcc_generated_files/touch/mto
      +                          uch_slider.c: 495:             right_signal = (int16_t) MTOUCH_Button_Deviation_Get(ref_
      +                          node);
  4419   002476  501E               	movf	Slider_FindRight@ref_node^0,w,c
  4420   002478  ECB8  F015         	call	_MTOUCH_Button_Deviation_Get
  4421   00247C  D006               	goto	L5
  4422   00247E                     l875:
  4423                           
  4424                           ;mcc_generated_files/touch/mtouch_slider.c: 498:         {;mcc_generated_files/touch/mto
      +                          uch_slider.c: 500:             right_signal = 0;
  4425   00247E  6A39               	clrf	_right_signal^0,c
  4426   002480  6A3A               	clrf	(_right_signal+1)^0,c
  4427   002482  D007               	goto	l5634
  4428   002484                     l5632:
  4429                           
  4430                           ;mcc_generated_files/touch/mtouch_slider.c: 504:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 505:         right_signal = (int16_t) MTOUCH_Button_Deviation_Get(middle_node 
      +                          + 1u);
  4431   002484  2847               	incf	_middle_node^0,w,c
  4432   002486  ECB8  F015         	call	_MTOUCH_Button_Deviation_Get
  4433   00248A                     L5:
  4434   00248A  6E39               	movwf	_right_signal^0,c
  4435   00248C  6A3A               	clrf	(_right_signal+1)^0,c
  4436   00248E  BE39               	btfsc	_right_signal^0,7,c
  4437   002490  063A               	decf	(_right_signal+1)^0,f,c
  4438   002492                     l5634:
  4439                           
  4440                           ;mcc_generated_files/touch/mtouch_slider.c: 508:     if (right_signal < 0)
  4441   002492  AE3A               	btfss	(_right_signal+1)^0,7,c
  4442   002494  D002               	goto	l878
  4443                           
  4444                           ;mcc_generated_files/touch/mtouch_slider.c: 509:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 510:         right_signal = 0;
  4445   002496  6A39               	clrf	_right_signal^0,c
  4446   002498  6A3A               	clrf	(_right_signal+1)^0,c
  4447   00249A                     l878:
  4448                           
  4449                           ;mcc_generated_files/touch/mtouch_slider.c: 513:     return right_signal;
  4450   00249A  C039  F016         	movff	_right_signal,?_Slider_FindRight
  4451   00249E  C03A  F017         	movff	_right_signal+1,?_Slider_FindRight+1
  4452   0024A2  0012               	return		;funcret
  4453   0024A4                     __end_of_Slider_FindRight:
  4454                           	callstack 0
  4455                           
  4456 ;; *************** function _Slider_FindMiddle *****************
  4457 ;; Defined at:
  4458 ;;		line 408 in file "mcc_generated_files/touch/mtouch_slider.c"
  4459 ;; Parameters:    Size  Location     Type
  4460 ;;  slider          1   21[COMRAM] PTR struct .
  4461 ;;		 -> mtouch_slider(17), 
  4462 ;; Auto vars:     Size  Location     Type
  4463 ;;  maximumDelta    2   29[COMRAM] short 
  4464 ;;  channelDelta    2   27[COMRAM] short 
  4465 ;;  i               1   31[COMRAM] unsigned char 
  4466 ;; Return value:  Size  Location     Type
  4467 ;;                  2   21[COMRAM] short 
  4468 ;; Registers used:
  4469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4470 ;; Tracked objects:
  4471 ;;		On entry : 0/0
  4472 ;;		On exit  : 0/0
  4473 ;;		Unchanged: 0/0
  4474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  4475 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4476 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4477 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4478 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4479 ;;Total ram usage:       11 bytes
  4480 ;; Hardware stack levels used: 1
  4481 ;; Hardware stack levels required when called: 7
  4482 ;; This function calls:
  4483 ;;		_MTOUCH_Button_Deviation_Get
  4484 ;; This function is called by:
  4485 ;;		_calculate_contact_size
  4486 ;; This function uses a non-reentrant model
  4487 ;;
  4488                           
  4489                           	psect	text29
  4490   0021DC                     __ptext29:
  4491                           	callstack 0
  4492   0021DC                     _Slider_FindMiddle:
  4493                           	callstack 19
  4494                           
  4495                           ;mcc_generated_files/touch/mtouch_slider.c: 408: static int16_t Slider_FindMiddle(mtouch
      +                          _slider_t* slider);mcc_generated_files/touch/mtouch_slider.c: 409: {;mcc_generated_files
      +                          /touch/mtouch_slider.c: 410:     uint8_t i;;mcc_generated_files/touch/mtouch_slider.c: 4
      +                          11:     int16_t channelDelta, maximumDelta;;mcc_generated_files/touch/mtouch_slider.c: 4
      +                          13:     maximumDelta = 0;
  4496                           
  4497                           ;incstack = 0
  4498   0021DC  6A1E               	clrf	Slider_FindMiddle@maximumDelta^0,c
  4499   0021DE  6A1F               	clrf	(Slider_FindMiddle@maximumDelta+1)^0,c
  4500                           
  4501                           ;mcc_generated_files/touch/mtouch_slider.c: 414:     middle_node = slider->startSegment;
  4502   0021E0  5016               	movf	Slider_FindMiddle@slider^0,w,c
  4503   0021E2  D833               	call	PL115	;call to abstracted procedure
  4504   0021E4  6E47               	movwf	_middle_node^0,c
  4505                           
  4506                           ;mcc_generated_files/touch/mtouch_slider.c: 417:     for (i = slider->startSegment; i < 
      +                          (slider->startSegment + slider->segmentCount); i++)
  4507   0021E6  5016               	movf	Slider_FindMiddle@slider^0,w,c
  4508   0021E8  D830               	call	PL115	;call to abstracted procedure
  4509   0021EA  6E20               	movwf	Slider_FindMiddle@i^0,c
  4510   0021EC  D017               	goto	l5604
  4511   0021EE                     l5596:
  4512                           
  4513                           ;mcc_generated_files/touch/mtouch_slider.c: 418:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 420:         channelDelta = (int16_t) MTOUCH_Button_Deviation_Get(i);
  4514   0021EE  5020               	movf	Slider_FindMiddle@i^0,w,c
  4515   0021F0  ECB8  F015         	call	_MTOUCH_Button_Deviation_Get
  4516   0021F4  6E1C               	movwf	Slider_FindMiddle@channelDelta^0,c
  4517   0021F6  6A1D               	clrf	(Slider_FindMiddle@channelDelta+1)^0,c
  4518   0021F8  BE1C               	btfsc	Slider_FindMiddle@channelDelta^0,7,c
  4519   0021FA  061D               	decf	(Slider_FindMiddle@channelDelta+1)^0,f,c
  4520                           
  4521                           ;mcc_generated_files/touch/mtouch_slider.c: 423:         if (channelDelta > maximumDelta
      +                          )
  4522   0021FC  501C               	movf	Slider_FindMiddle@channelDelta^0,w,c
  4523   0021FE  5C1E               	subwf	Slider_FindMiddle@maximumDelta^0,w,c
  4524   002200  501F               	movf	(Slider_FindMiddle@maximumDelta+1)^0,w,c
  4525   002202  0A80               	xorlw	128
  4526   002204  6E18               	movwf	??_Slider_FindMiddle^0,c
  4527   002206  501D               	movf	(Slider_FindMiddle@channelDelta+1)^0,w,c
  4528   002208  0A80               	xorlw	128
  4529   00220A  5818               	subwfb	??_Slider_FindMiddle^0,w,c
  4530   00220C  E206               	bc	l5602
  4531                           
  4532                           ;mcc_generated_files/touch/mtouch_slider.c: 424:         {;mcc_generated_files/touch/mto
      +                          uch_slider.c: 425:             middle_node = i;
  4533   00220E  C020  F047         	movff	Slider_FindMiddle@i,_middle_node
  4534                           
  4535                           ;mcc_generated_files/touch/mtouch_slider.c: 426:             maximumDelta = channelDelta
      +                          ;
  4536   002212  C01C  F01E         	movff	Slider_FindMiddle@channelDelta,Slider_FindMiddle@maximumDelta
  4537   002216  C01D  F01F         	movff	Slider_FindMiddle@channelDelta+1,Slider_FindMiddle@maximumDelta+1
  4538   00221A                     l5602:
  4539                           
  4540                           ;mcc_generated_files/touch/mtouch_slider.c: 428:     }
  4541   00221A  2A20               	incf	Slider_FindMiddle@i^0,f,c
  4542   00221C                     l5604:
  4543   00221C  5016               	movf	Slider_FindMiddle@slider^0,w,c
  4544   00221E  D815               	call	PL115	;call to abstracted procedure
  4545   002220  6E18               	movwf	??_Slider_FindMiddle^0,c
  4546   002222  6A19               	clrf	(??_Slider_FindMiddle+1)^0,c
  4547   002224  5016               	movf	Slider_FindMiddle@slider^0,w,c
  4548   002226  EC3A  F00B         	call	PL119	;call to abstracted procedure
  4549   00222A  2618               	addwf	??_Slider_FindMiddle^0,f,c
  4550   00222C  0E00               	movlw	0
  4551   00222E  2219               	addwfc	(??_Slider_FindMiddle+1)^0,f,c
  4552   002230  5020               	movf	Slider_FindMiddle@i^0,w,c
  4553   002232  6E1A               	movwf	(??_Slider_FindMiddle+2)^0,c
  4554   002234  6A1B               	clrf	(??_Slider_FindMiddle+3)^0,c
  4555   002236  5018               	movf	??_Slider_FindMiddle^0,w,c
  4556   002238  5C1A               	subwf	(??_Slider_FindMiddle+2)^0,w,c
  4557   00223A  5019               	movf	(??_Slider_FindMiddle+1)^0,w,c
  4558   00223C  581B               	subwfb	(??_Slider_FindMiddle+3)^0,w,c
  4559   00223E  E3D7               	bnc	l5596
  4560                           
  4561                           ;mcc_generated_files/touch/mtouch_slider.c: 430:     return maximumDelta;
  4562   002240  C01E  F016         	movff	Slider_FindMiddle@maximumDelta,?_Slider_FindMiddle
  4563   002244  C01F  F017         	movff	Slider_FindMiddle@maximumDelta+1,?_Slider_FindMiddle+1
  4564   002248  0012               	return		;funcret
  4565   00224A                     __end_of_Slider_FindMiddle:
  4566                           	callstack 0
  4567   00224A                     PL115:
  4568                           	callstack 19
  4569   00224A  6ED9               	movwf	fsr2l,c
  4570   00224C  6ADA               	clrf	fsr2h,c
  4571   00224E  0E02               	movlw	2
  4572   002250  26D9               	addwf	fsr2l,f,c
  4573   002252  50DF               	movf	indf2,w,c
  4574   002254  0012               	return	
  4575   002256                     __end_ofPL115:
  4576                           	callstack 0
  4577                           
  4578 ;; *************** function _Slider_FindLeft *****************
  4579 ;; Defined at:
  4580 ;;		line 438 in file "mcc_generated_files/touch/mtouch_slider.c"
  4581 ;; Parameters:    Size  Location     Type
  4582 ;;  slider          1   21[COMRAM] PTR struct .
  4583 ;;		 -> mtouch_slider(17), 
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;  ref_node        1   24[COMRAM] unsigned char 
  4586 ;; Return value:  Size  Location     Type
  4587 ;;                  2   21[COMRAM] short 
  4588 ;; Registers used:
  4589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4590 ;; Tracked objects:
  4591 ;;		On entry : 0/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  4595 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4596 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4597 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4598 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4599 ;;Total ram usage:        4 bytes
  4600 ;; Hardware stack levels used: 1
  4601 ;; Hardware stack levels required when called: 7
  4602 ;; This function calls:
  4603 ;;		_MTOUCH_Button_Deviation_Get
  4604 ;; This function is called by:
  4605 ;;		_calculate_contact_size
  4606 ;; This function uses a non-reentrant model
  4607 ;;
  4608                           
  4609                           	psect	text30
  4610   00205A                     __ptext30:
  4611                           	callstack 0
  4612   00205A                     _Slider_FindLeft:
  4613                           	callstack 19
  4614                           
  4615                           ;mcc_generated_files/touch/mtouch_slider.c: 438: static int16_t Slider_FindLeft(mtouch_s
      +                          lider_t* slider);mcc_generated_files/touch/mtouch_slider.c: 439: {;mcc_generated_files/t
      +                          ouch/mtouch_slider.c: 440:     uint8_t ref_node = slider->startSegment;
  4616                           
  4617                           ;incstack = 0
  4618   00205A  5016               	movf	Slider_FindLeft@slider^0,w,c
  4619   00205C  EC25  F011         	call	PL115	;call to abstracted procedure
  4620   002060  6E19               	movwf	Slider_FindLeft@ref_node^0,c
  4621                           
  4622                           ;mcc_generated_files/touch/mtouch_slider.c: 442:     wheel_sensor_middle_channel_zero = 
      +                          0;
  4623   002062  6A46               	clrf	_wheel_sensor_middle_channel_zero^0,c
  4624                           
  4625                           ;mcc_generated_files/touch/mtouch_slider.c: 445:     if (middle_node == ref_node)
  4626   002064  5019               	movf	Slider_FindLeft@ref_node^0,w,c
  4627   002066  1847               	xorwf	_middle_node^0,w,c
  4628   002068  E125               	bnz	l5620
  4629                           
  4630                           ;mcc_generated_files/touch/mtouch_slider.c: 446:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 447:         if (slider->type == MTOUCH_TYPE_WHEEL)
  4631   00206A  5016               	movf	Slider_FindLeft@slider^0,w,c
  4632   00206C  D833               	call	PL189	;call to abstracted procedure
  4633   00206E  E11F               	bnz	l866
  4634                           
  4635                           ;mcc_generated_files/touch/mtouch_slider.c: 448:         {;mcc_generated_files/touch/mto
      +                          uch_slider.c: 451:             left_signal = (int16_t) MTOUCH_Button_Deviation_Get(ref_n
      +                          ode + slider->segmentCount - 1u);
  4636   002070  5016               	movf	Slider_FindLeft@slider^0,w,c
  4637   002072  EC3A  F00B         	call	PL119	;call to abstracted procedure
  4638   002076  2419               	addwf	Slider_FindLeft@ref_node^0,w,c
  4639   002078  6E18               	movwf	??_Slider_FindLeft^0,c
  4640   00207A  0418               	decf	??_Slider_FindLeft^0,w,c
  4641   00207C  ECB8  F015         	call	_MTOUCH_Button_Deviation_Get
  4642   002080  6E3B               	movwf	_left_signal^0,c
  4643   002082  6A3C               	clrf	(_left_signal+1)^0,c
  4644   002084  BE3B               	btfsc	_left_signal^0,7,c
  4645   002086  063C               	decf	(_left_signal+1)^0,f,c
  4646                           
  4647                           ;mcc_generated_files/touch/mtouch_slider.c: 454:             right_signal = (int16_t) MT
      +                          OUCH_Button_Deviation_Get(ref_node + 1u);
  4648   002088  2819               	incf	Slider_FindLeft@ref_node^0,w,c
  4649   00208A  ECB8  F015         	call	_MTOUCH_Button_Deviation_Get
  4650   00208E  6E39               	movwf	_right_signal^0,c
  4651   002090  6A3A               	clrf	(_right_signal+1)^0,c
  4652   002092  BE39               	btfsc	_right_signal^0,7,c
  4653   002094  063A               	decf	(_right_signal+1)^0,f,c
  4654                           
  4655                           ;mcc_generated_files/touch/mtouch_slider.c: 456:             if(left_signal > right_sign
      +                          al)
  4656   002096  503B               	movf	_left_signal^0,w,c
  4657   002098  5C39               	subwf	_right_signal^0,w,c
  4658   00209A  503A               	movf	(_right_signal+1)^0,w,c
  4659   00209C  0A80               	xorlw	128
  4660   00209E  6E18               	movwf	??_Slider_FindLeft^0,c
  4661   0020A0  503C               	movf	(_left_signal+1)^0,w,c
  4662   0020A2  0A80               	xorlw	128
  4663   0020A4  5818               	subwfb	??_Slider_FindLeft^0,w,c
  4664   0020A6  E20D               	bc	l5622
  4665                           
  4666                           ;mcc_generated_files/touch/mtouch_slider.c: 457:             {;mcc_generated_files/touch
      +                          /mtouch_slider.c: 458:                 wheel_sensor_middle_channel_zero = 1;
  4667   0020A8  0E01               	movlw	1
  4668   0020AA  6E46               	movwf	_wheel_sensor_middle_channel_zero^0,c
  4669   0020AC  D00A               	goto	l5622
  4670   0020AE                     l866:
  4671                           
  4672                           ;mcc_generated_files/touch/mtouch_slider.c: 462:         {;mcc_generated_files/touch/mto
      +                          uch_slider.c: 464:             left_signal = 0;
  4673   0020AE  6A3B               	clrf	_left_signal^0,c
  4674   0020B0  6A3C               	clrf	(_left_signal+1)^0,c
  4675   0020B2  D007               	goto	l5622
  4676   0020B4                     l5620:
  4677                           
  4678                           ;mcc_generated_files/touch/mtouch_slider.c: 468:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 469:         left_signal = (int16_t) MTOUCH_Button_Deviation_Get(middle_node -
      +                           1u);
  4679   0020B4  0447               	decf	_middle_node^0,w,c
  4680   0020B6  ECB8  F015         	call	_MTOUCH_Button_Deviation_Get
  4681   0020BA  6E3B               	movwf	_left_signal^0,c
  4682   0020BC  6A3C               	clrf	(_left_signal+1)^0,c
  4683   0020BE  BE3B               	btfsc	_left_signal^0,7,c
  4684   0020C0  063C               	decf	(_left_signal+1)^0,f,c
  4685   0020C2                     l5622:
  4686                           
  4687                           ;mcc_generated_files/touch/mtouch_slider.c: 472:     if (left_signal < 0)
  4688   0020C2  AE3C               	btfss	(_left_signal+1)^0,7,c
  4689   0020C4  D002               	goto	l870
  4690                           
  4691                           ;mcc_generated_files/touch/mtouch_slider.c: 473:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 474:         left_signal = 0;
  4692   0020C6  6A3B               	clrf	_left_signal^0,c
  4693   0020C8  6A3C               	clrf	(_left_signal+1)^0,c
  4694   0020CA                     l870:
  4695                           
  4696                           ;mcc_generated_files/touch/mtouch_slider.c: 476:     return left_signal;
  4697   0020CA  C03B  F016         	movff	_left_signal,?_Slider_FindLeft
  4698   0020CE  C03C  F017         	movff	_left_signal+1,?_Slider_FindLeft+1
  4699   0020D2  0012               	return		;funcret
  4700   0020D4                     __end_of_Slider_FindLeft:
  4701                           	callstack 0
  4702   0020D4                     PL189:
  4703                           	callstack 19
  4704   0020D4  6ED9               	movwf	fsr2l,c
  4705   0020D6  6ADA               	clrf	fsr2h,c
  4706   0020D8  2AD9               	incf	fsr2l,f,c
  4707   0020DA  04DE               	decf	postinc2,w,c
  4708   0020DC  0012               	return	
  4709   0020DE                     __end_ofPL189:
  4710                           	callstack 0
  4711                           
  4712 ;; *************** function _MTOUCH_Button_Deviation_Get *****************
  4713 ;; Defined at:
  4714 ;;		line 441 in file "mcc_generated_files/touch/mtouch_button.c"
  4715 ;; Parameters:    Size  Location     Type
  4716 ;;  name            1    wreg     enum E13138
  4717 ;; Auto vars:     Size  Location     Type
  4718 ;;  name            1   20[COMRAM] enum E13138
  4719 ;; Return value:  Size  Location     Type
  4720 ;;                  1    wreg      char 
  4721 ;; Registers used:
  4722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4723 ;; Tracked objects:
  4724 ;;		On entry : 0/0
  4725 ;;		On exit  : 0/0
  4726 ;;		Unchanged: 0/0
  4727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  4728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4729 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4731 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4732 ;;Total ram usage:        1 bytes
  4733 ;; Hardware stack levels used: 1
  4734 ;; Hardware stack levels required when called: 6
  4735 ;; This function calls:
  4736 ;;		Nothing
  4737 ;; This function is called by:
  4738 ;;		_Slider_FindMiddle
  4739 ;;		_Slider_FindLeft
  4740 ;;		_Slider_FindRight
  4741 ;; This function uses a non-reentrant model
  4742 ;;
  4743                           
  4744                           	psect	text31
  4745   002B70                     __ptext31:
  4746                           	callstack 0
  4747   002B70                     _MTOUCH_Button_Deviation_Get:
  4748                           	callstack 19
  4749                           
  4750                           ;incstack = 0
  4751                           ;MTOUCH_Button_Deviation_Get@name stored from wreg
  4752   002B70  6E15               	movwf	MTOUCH_Button_Deviation_Get@name^0,c
  4753                           
  4754                           ;mcc_generated_files/touch/mtouch_button.c: 441: mtouch_button_deviation_t MTOUCH_Button
      +                          _Deviation_Get(enum mtouch_button_names name);mcc_generated_files/touch/mtouch_button.c:
      +                           442: {;mcc_generated_files/touch/mtouch_button.c: 443:     if(name < 5u)
  4755   002B72  0E05               	movlw	5
  4756   002B74  6015               	cpfslt	MTOUCH_Button_Deviation_Get@name^0,c
  4757   002B76  0C00               	retlw	0
  4758                           
  4759                           ;mcc_generated_files/touch/mtouch_button.c: 444:         return mtouch_button[name].devi
      +                          ation;
  4760   002B78  5015               	movf	MTOUCH_Button_Deviation_Get@name^0,w,c
  4761   002B7A  0D11               	mullw	17
  4762   002B7C  0E0A               	movlw	low (_mtouch_button+10)
  4763   002B7E  24F3               	addwf	243,w,c
  4764   002B80  6ED9               	movwf	fsr2l,c
  4765   002B82  0E01               	movlw	high (_mtouch_button+10)
  4766   002B84  20F4               	addwfc	prodh,w,c
  4767   002B86  6EDA               	movwf	fsr2h,c
  4768   002B88  50DF               	movf	indf2,w,c
  4769   002B8A  0012               	return	
  4770   002B8C                     __end_of_MTOUCH_Button_Deviation_Get:
  4771                           	callstack 0
  4772                           
  4773 ;; *************** function _ProcessSliderChange *****************
  4774 ;; Defined at:
  4775 ;;		line 147 in file "application.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;  slider          1    wreg     enum E13166
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;  slider          1    0[COMRAM] enum E13166
  4780 ;; Return value:  Size  Location     Type
  4781 ;;                  1    wreg      void 
  4782 ;; Registers used:
  4783 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4784 ;; Tracked objects:
  4785 ;;		On entry : 3F/1
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  4789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4792 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4793 ;;Total ram usage:        0 bytes
  4794 ;; Hardware stack levels used: 1
  4795 ;; Hardware stack levels required when called: 7
  4796 ;; This function calls:
  4797 ;;		_MTOUCH_Slider_Position_Get
  4798 ;; This function is called by:
  4799 ;;		_main
  4800 ;;		_Slider_Service
  4801 ;; This function uses a non-reentrant model
  4802 ;;
  4803                           
  4804                           	psect	text32
  4805   002B8C                     __ptext32:
  4806                           	callstack 0
  4807   002B8C                     _ProcessSliderChange:
  4808                           	callstack 20
  4809                           
  4810                           ; BSR set to: 1
  4811                           ;application.c: 147: void ProcessSliderChange(enum mtouch_slider_names slider);applicati
      +                          on.c: 148: {;application.c: 149:     keyInfo.key = SLIDER;
  4812                           
  4813                           ;incstack = 0
  4814   002B8C  0E03               	movlw	3
  4815   002B8E  0100               	movlb	0	; () banked
  4816   002B90  6F8D               	movwf	_keyInfo& (0+255),b
  4817                           
  4818                           ;application.c: 150:     keyInfo.keyStatus = KEY_PRESSED;
  4819   002B92  0E01               	movlw	1
  4820   002B94  6F8E               	movwf	(_keyInfo+1)& (0+255),b
  4821                           
  4822                           ; BSR set to: 0
  4823                           ;application.c: 151:     keyInfo.sliderADCValue = MTOUCH_Slider_Position_Get(Slider0);
  4824   002B96  0E00               	movlw	0
  4825   002B98  EC46  F015         	call	_MTOUCH_Slider_Position_Get
  4826   002B9C  C015  F08F         	movff	?_MTOUCH_Slider_Position_Get,_keyInfo+2
  4827   002BA0  C016  F090         	movff	?_MTOUCH_Slider_Position_Get+1,_keyInfo+3
  4828   002BA4  0012               	return		;funcret
  4829   002BA6                     __end_of_ProcessSliderChange:
  4830                           	callstack 0
  4831                           
  4832 ;; *************** function _Slider_DefaultCallback *****************
  4833 ;; Defined at:
  4834 ;;		line 999 in file "mcc_generated_files/touch/mtouch_slider.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;  slider          1    wreg     enum E13201
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;  slider          1    0[COMRAM] enum E13201
  4839 ;; Return value:  Size  Location     Type
  4840 ;;                  1    wreg      void 
  4841 ;; Registers used:
  4842 ;;		wreg
  4843 ;; Tracked objects:
  4844 ;;		On entry : 3F/1
  4845 ;;		On exit  : 3F/1
  4846 ;;		Unchanged: 3F/0
  4847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  4848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4852 ;;Total ram usage:        0 bytes
  4853 ;; Hardware stack levels used: 1
  4854 ;; Hardware stack levels required when called: 6
  4855 ;; This function calls:
  4856 ;;		Nothing
  4857 ;; This function is called by:
  4858 ;;		_Slider_Service
  4859 ;; This function uses a non-reentrant model
  4860 ;;
  4861                           
  4862                           	psect	text33
  4863   002D3C                     __ptext33:
  4864                           	callstack 0
  4865   002D3C                     _Slider_DefaultCallback:
  4866                           	callstack 21
  4867                           
  4868                           ; BSR set to: 1
  4869                           
  4870                           ;incstack = 0
  4871   002D3C  0012               	return		;funcret
  4872   002D3E                     __end_of_Slider_DefaultCallback:
  4873                           	callstack 0
  4874                           
  4875 ;; *************** function _MTOUCH_Slider_Position_Get *****************
  4876 ;; Defined at:
  4877 ;;		line 904 in file "mcc_generated_files/touch/mtouch_slider.c"
  4878 ;; Parameters:    Size  Location     Type
  4879 ;;  sliderName      1    wreg     enum E13201
  4880 ;; Auto vars:     Size  Location     Type
  4881 ;;  sliderName      1   22[COMRAM] enum E13201
  4882 ;; Return value:  Size  Location     Type
  4883 ;;                  2   20[COMRAM] unsigned short 
  4884 ;; Registers used:
  4885 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4886 ;; Tracked objects:
  4887 ;;		On entry : 3F/0
  4888 ;;		On exit  : 0/0
  4889 ;;		Unchanged: 0/0
  4890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  4891 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4892 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4894 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4895 ;;Total ram usage:        3 bytes
  4896 ;; Hardware stack levels used: 1
  4897 ;; Hardware stack levels required when called: 6
  4898 ;; This function calls:
  4899 ;;		Nothing
  4900 ;; This function is called by:
  4901 ;;		_ProcessSliderChange
  4902 ;; This function uses a non-reentrant model
  4903 ;;
  4904                           
  4905                           	psect	text34
  4906   002A8C                     __ptext34:
  4907                           	callstack 0
  4908   002A8C                     _MTOUCH_Slider_Position_Get:
  4909                           	callstack 20
  4910                           
  4911                           ; BSR set to: 1
  4912                           ;incstack = 0
  4913                           ;MTOUCH_Slider_Position_Get@sliderName stored from wreg
  4914   002A8C  6E17               	movwf	MTOUCH_Slider_Position_Get@sliderName^0,c
  4915                           
  4916                           ;mcc_generated_files/touch/mtouch_slider.c: 904: uint16_t MTOUCH_Slider_Position_Get(enu
      +                          m mtouch_slider_names sliderName);mcc_generated_files/touch/mtouch_slider.c: 905: {;mcc_
      +                          generated_files/touch/mtouch_slider.c: 906:     if (sliderName < 1u)
  4917   002A8E  5017               	movf	MTOUCH_Slider_Position_Get@sliderName^0,w,c
  4918   002A90  E10B               	bnz	l962
  4919                           
  4920                           ;mcc_generated_files/touch/mtouch_slider.c: 907:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 908:         return (mtouch_slider[sliderName].sliderPosition);
  4921   002A92  5017               	movf	MTOUCH_Slider_Position_Get@sliderName^0,w,c
  4922   002A94  0D11               	mullw	17
  4923   002A96  50F3               	movf	243,w,c
  4924   002A98  0FE1               	addlw	low (_mtouch_slider+12)
  4925   002A9A  6ED9               	movwf	fsr2l,c
  4926   002A9C  6ADA               	clrf	fsr2h,c
  4927   002A9E  CFDE F015          	movff	postinc2,?_MTOUCH_Slider_Position_Get
  4928   002AA2  CFDD F016          	movff	postdec2,?_MTOUCH_Slider_Position_Get+1
  4929   002AA6  0012               	return	
  4930   002AA8                     l962:
  4931                           
  4932                           ;mcc_generated_files/touch/mtouch_slider.c: 911:         return 0u;
  4933   002AA8  6A15               	clrf	?_MTOUCH_Slider_Position_Get^0,c
  4934   002AAA  6A16               	clrf	(?_MTOUCH_Slider_Position_Get+1)^0,c
  4935   002AAC  0012               	return		;funcret
  4936   002AAE                     __end_of_MTOUCH_Slider_Position_Get:
  4937                           	callstack 0
  4938                           
  4939 ;; *************** function _MTOUCH_Button_isPressed *****************
  4940 ;; Defined at:
  4941 ;;		line 424 in file "mcc_generated_files/touch/mtouch_button.c"
  4942 ;; Parameters:    Size  Location     Type
  4943 ;;  name            1    wreg     enum E13138
  4944 ;; Auto vars:     Size  Location     Type
  4945 ;;  name            1   21[COMRAM] enum E13138
  4946 ;; Return value:  Size  Location     Type
  4947 ;;                  1    wreg      _Bool 
  4948 ;; Registers used:
  4949 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4950 ;; Tracked objects:
  4951 ;;		On entry : 3F/1
  4952 ;;		On exit  : 0/0
  4953 ;;		Unchanged: 0/0
  4954 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  4955 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4956 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4957 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4958 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  4959 ;;Total ram usage:        2 bytes
  4960 ;; Hardware stack levels used: 1
  4961 ;; Hardware stack levels required when called: 6
  4962 ;; This function calls:
  4963 ;;		Nothing
  4964 ;; This function is called by:
  4965 ;;		_Slider_Service
  4966 ;; This function uses a non-reentrant model
  4967 ;;
  4968                           
  4969                           	psect	text35
  4970   002AAE                     __ptext35:
  4971                           	callstack 0
  4972   002AAE                     _MTOUCH_Button_isPressed:
  4973                           	callstack 21
  4974                           
  4975                           ;incstack = 0
  4976                           ;MTOUCH_Button_isPressed@name stored from wreg
  4977   002AAE  6E16               	movwf	MTOUCH_Button_isPressed@name^0,c
  4978                           
  4979                           ;mcc_generated_files/touch/mtouch_button.c: 424: _Bool MTOUCH_Button_isPressed(enum mtou
      +                          ch_button_names name);mcc_generated_files/touch/mtouch_button.c: 425: {;mcc_generated_fi
      +                          les/touch/mtouch_button.c: 426:     if(name < 5u)
  4980   002AB0  0E05               	movlw	5
  4981   002AB2  6016               	cpfslt	MTOUCH_Button_isPressed@name^0,c
  4982   002AB4  0C00               	retlw	0
  4983                           
  4984                           ;mcc_generated_files/touch/mtouch_button.c: 427:         return (_Bool)((mtouch_button[n
      +                          ame].state == MTOUCH_BUTTON_STATE_pressed) ? 1 : 0);
  4985   002AB6  5016               	movf	MTOUCH_Button_isPressed@name^0,w,c
  4986   002AB8  0D11               	mullw	17
  4987   002ABA  0E02               	movlw	low (_mtouch_button+2)
  4988   002ABC  24F3               	addwf	243,w,c
  4989   002ABE  6ED9               	movwf	fsr2l,c
  4990   002AC0  0E01               	movlw	high (_mtouch_button+2)
  4991   002AC2  20F4               	addwfc	prodh,w,c
  4992   002AC4  6EDA               	movwf	fsr2h,c
  4993   002AC6  0E02               	movlw	2
  4994   002AC8  18DE               	xorwf	postinc2,w,c
  4995   002ACA  B4D8               	btfsc	status,2,c
  4996   002ACC  0C01               	retlw	1
  4997   002ACE  0C00               	retlw	0
  4998   002AD0                     __end_of_MTOUCH_Button_isPressed:
  4999                           	callstack 0
  5000                           
  5001 ;; *************** function _MTOUCH_Sensor_SampleAll *****************
  5002 ;; Defined at:
  5003 ;;		line 349 in file "mcc_generated_files/touch/mtouch_sensor.c"
  5004 ;; Parameters:    Size  Location     Type
  5005 ;;		None
  5006 ;; Auto vars:     Size  Location     Type
  5007 ;;		None
  5008 ;; Return value:  Size  Location     Type
  5009 ;;                  1    wreg      _Bool 
  5010 ;; Registers used:
  5011 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5012 ;; Tracked objects:
  5013 ;;		On entry : 0/E
  5014 ;;		On exit  : 0/0
  5015 ;;		Unchanged: 0/0
  5016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  5017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5021 ;;Total ram usage:        0 bytes
  5022 ;; Hardware stack levels used: 1
  5023 ;; Hardware stack levels required when called: 9
  5024 ;; This function calls:
  5025 ;;		_MTOUCH_Sensor_isSamplingComplete
  5026 ;;		_MTOUCH_Sensor_postAcquisitionProcess
  5027 ;;		_Sensor_FrequencyHopping
  5028 ;; This function is called by:
  5029 ;;		_MTOUCH_Service_Mainloop
  5030 ;; This function uses a non-reentrant model
  5031 ;;
  5032                           
  5033                           	psect	text36
  5034   002BD4                     __ptext36:
  5035                           	callstack 0
  5036   002BD4                     _MTOUCH_Sensor_SampleAll:
  5037                           	callstack 20
  5038                           
  5039                           ;mcc_generated_files/touch/mtouch_sensor.c: 351:     if(MTOUCH_Sensor_isSamplingComplete
      +                          () == 0)
  5040                           
  5041                           ;incstack = 0
  5042   002BD4  EC97  F014         	call	_MTOUCH_Sensor_isSamplingComplete	;wreg free
  5043   002BD8  0900               	iorlw	0
  5044   002BDA  E101               	bnz	l6084
  5045                           
  5046                           ;mcc_generated_files/touch/mtouch_sensor.c: 352:     {;mcc_generated_files/touch/mtouch_
      +                          sensor.c: 353:         return 0;
  5047   002BDC  0C00               	retlw	0
  5048   002BDE                     l6084:
  5049                           
  5050                           ;mcc_generated_files/touch/mtouch_sensor.c: 357:     Sensor_FrequencyHopping();
  5051   002BDE  EC8E  F016         	call	_Sensor_FrequencyHopping	;wreg free
  5052                           
  5053                           ;mcc_generated_files/touch/mtouch_sensor.c: 358:     MTOUCH_Sensor_postAcquisitionProces
      +                          s();
  5054   002BE2  ECAE  F014         	call	_MTOUCH_Sensor_postAcquisitionProcess	;wreg free
  5055                           
  5056                           ;mcc_generated_files/touch/mtouch_sensor.c: 360:     return 1;
  5057   002BE6  0C01               	retlw	1	;funcret
  5058   002BE8                     __end_of_MTOUCH_Sensor_SampleAll:
  5059                           	callstack 0
  5060                           
  5061 ;; *************** function _Sensor_FrequencyHopping *****************
  5062 ;; Defined at:
  5063 ;;		line 699 in file "mcc_generated_files/touch/mtouch_sensor.c"
  5064 ;; Parameters:    Size  Location     Type
  5065 ;;		None
  5066 ;; Auto vars:     Size  Location     Type
  5067 ;;		None
  5068 ;; Return value:  Size  Location     Type
  5069 ;;                  1    wreg      void 
  5070 ;; Registers used:
  5071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5072 ;; Tracked objects:
  5073 ;;		On entry : 0/E
  5074 ;;		On exit  : 0/0
  5075 ;;		Unchanged: 0/0
  5076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  5077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5081 ;;Total ram usage:        0 bytes
  5082 ;; Hardware stack levels used: 1
  5083 ;; Hardware stack levels required when called: 7
  5084 ;; This function calls:
  5085 ;;		_Sensor_setSamplePeriod
  5086 ;; This function is called by:
  5087 ;;		_MTOUCH_Sensor_SampleAll
  5088 ;; This function uses a non-reentrant model
  5089 ;;
  5090                           
  5091                           	psect	text37
  5092   002D1C                     __ptext37:
  5093                           	callstack 0
  5094   002D1C                     _Sensor_FrequencyHopping:
  5095                           	callstack 21
  5096                           
  5097                           ;mcc_generated_files/touch/mtouch_sensor.c: 703:     Sensor_setSamplePeriod();
  5098                           
  5099                           ;incstack = 0
  5100   002D1C  EFD3  F015         	goto	_Sensor_setSamplePeriod	;wreg free
  5101   002D20                     __end_of_Sensor_FrequencyHopping:
  5102                           	callstack 0
  5103                           
  5104 ;; *************** function _Sensor_setSamplePeriod *****************
  5105 ;; Defined at:
  5106 ;;		line 610 in file "mcc_generated_files/touch/mtouch_sensor.c"
  5107 ;; Parameters:    Size  Location     Type
  5108 ;;		None
  5109 ;; Auto vars:     Size  Location     Type
  5110 ;;		None
  5111 ;; Return value:  Size  Location     Type
  5112 ;;                  1    wreg      void 
  5113 ;; Registers used:
  5114 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5115 ;; Tracked objects:
  5116 ;;		On entry : 0/E
  5117 ;;		On exit  : 0/0
  5118 ;;		Unchanged: 0/0
  5119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  5120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5124 ;;Total ram usage:        0 bytes
  5125 ;; Hardware stack levels used: 1
  5126 ;; Hardware stack levels required when called: 6
  5127 ;; This function calls:
  5128 ;;		Nothing
  5129 ;; This function is called by:
  5130 ;;		_Sensor_FrequencyHopping
  5131 ;; This function uses a non-reentrant model
  5132 ;;
  5133                           
  5134                           	psect	text38
  5135   002BA6                     __ptext38:
  5136                           	callstack 0
  5137   002BA6                     _Sensor_setSamplePeriod:
  5138                           	callstack 21
  5139                           
  5140                           ;mcc_generated_files/touch/mtouch_sensor.c: 612:     if(++freq_index >= sizeof(freq_hop)
      +                           )
  5141                           
  5142                           ;incstack = 0
  5143   002BA6  2A41               	incf	_freq_index^0,f,c
  5144   002BA8  0E02               	movlw	2
  5145   002BAA  6441               	cpfsgt	_freq_index^0,c
  5146   002BAC  D001               	goto	l4622
  5147                           
  5148                           ;mcc_generated_files/touch/mtouch_sensor.c: 613:         freq_index = 0;
  5149   002BAE  6A41               	clrf	_freq_index^0,c
  5150   002BB0                     l4622:
  5151                           
  5152                           ;mcc_generated_files/touch/mtouch_sensor.c: 615:     sample_delay = freq_hop[freq_index]
      +                          ;
  5153   002BB0  5041               	movf	_freq_index^0,w,c
  5154   002BB2  0FCC               	addlw	low _freq_hop
  5155   002BB4  6ED9               	movwf	fsr2l,c
  5156   002BB6  6ADA               	clrf	fsr2h,c
  5157   002BB8  50DF               	movf	indf2,w,c
  5158   002BBA  6E40               	movwf	_sample_delay^0,c
  5159   002BBC  0012               	return		;funcret
  5160   002BBE                     __end_of_Sensor_setSamplePeriod:
  5161                           	callstack 0
  5162                           
  5163 ;; *************** function _MTOUCH_Sensor_postAcquisitionProcess *****************
  5164 ;; Defined at:
  5165 ;;		line 518 in file "mcc_generated_files/touch/mtouch_sensor.c"
  5166 ;; Parameters:    Size  Location     Type
  5167 ;;		None
  5168 ;; Auto vars:     Size  Location     Type
  5169 ;;  name            1   30[COMRAM] enum E13072
  5170 ;; Return value:  Size  Location     Type
  5171 ;;                  1    wreg      void 
  5172 ;; Registers used:
  5173 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5174 ;; Tracked objects:
  5175 ;;		On entry : 0/E
  5176 ;;		On exit  : 0/0
  5177 ;;		Unchanged: 0/0
  5178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  5179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5180 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5182 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5183 ;;Total ram usage:        1 bytes
  5184 ;; Hardware stack levels used: 1
  5185 ;; Hardware stack levels required when called: 8
  5186 ;; This function calls:
  5187 ;;		_Sensor_DefaultCallback
  5188 ;;		_Sensor_RawSample_Update
  5189 ;; This function is called by:
  5190 ;;		_MTOUCH_Sensor_SampleAll
  5191 ;; This function uses a non-reentrant model
  5192 ;;
  5193                           
  5194                           	psect	text39
  5195   00295C                     __ptext39:
  5196                           	callstack 0
  5197   00295C                     _MTOUCH_Sensor_postAcquisitionProcess:
  5198                           	callstack 20
  5199                           
  5200                           ;mcc_generated_files/touch/mtouch_sensor.c: 520:     enum mtouch_sensor_names name;;mcc_
      +                          generated_files/touch/mtouch_sensor.c: 522:     for (name = 0; name < 5u; name++)
  5201                           
  5202                           ;incstack = 0
  5203   00295C  6A1F               	clrf	MTOUCH_Sensor_postAcquisitionProcess@name^0,c
  5204   00295E                     l4858:
  5205                           
  5206                           ;mcc_generated_files/touch/mtouch_sensor.c: 523:     {;mcc_generated_files/touch/mtouch_
      +                          sensor.c: 524:         if(mtouch_sensor[name].sampled)
  5207   00295E  501F               	movf	MTOUCH_Sensor_postAcquisitionProcess@name^0,w,c
  5208   002960  EC6D  F00D         	call	PL113	;call to abstracted procedure
  5209   002964  A2DF               	btfss	indf2,1,c
  5210   002966  D00A               	goto	l4864
  5211                           
  5212                           ; BSR set to: 0
  5213                           ;mcc_generated_files/touch/mtouch_sensor.c: 525:         {;mcc_generated_files/touch/mto
      +                          uch_sensor.c: 526:             Sensor_RawSample_Update(&mtouch_sensor[name]);
  5214   002968  501F               	movf	MTOUCH_Sensor_postAcquisitionProcess@name^0,w,c
  5215   00296A  0D0A               	mullw	10
  5216   00296C  50F3               	movf	243,w,c
  5217   00296E  0F91               	addlw	low _mtouch_sensor
  5218   002970  6E1C               	movwf	Sensor_RawSample_Update@sensor^0,c
  5219   002972  EC02  F014         	call	_Sensor_RawSample_Update	;wreg free
  5220                           
  5221                           ;mcc_generated_files/touch/mtouch_sensor.c: 527:             callback_sampled(name);
  5222   002976  501F               	movf	MTOUCH_Sensor_postAcquisitionProcess@name^0,w,c
  5223   002978  EC9F  F016         	call	_Sensor_DefaultCallback
  5224   00297C                     l4864:
  5225                           
  5226                           ;mcc_generated_files/touch/mtouch_sensor.c: 529:     }
  5227   00297C  2A1F               	incf	MTOUCH_Sensor_postAcquisitionProcess@name^0,f,c
  5228   00297E  0E04               	movlw	4
  5229   002980  641F               	cpfsgt	MTOUCH_Sensor_postAcquisitionProcess@name^0,c
  5230   002982  D7ED               	goto	l4858
  5231   002984  0C04               	retlw	4
  5232   002986                     __end_of_MTOUCH_Sensor_postAcquisitionProcess:
  5233                           	callstack 0
  5234                           
  5235 ;; *************** function _Sensor_RawSample_Update *****************
  5236 ;; Defined at:
  5237 ;;		line 641 in file "mcc_generated_files/touch/mtouch_sensor.c"
  5238 ;; Parameters:    Size  Location     Type
  5239 ;;  sensor          1   27[COMRAM] PTR struct .
  5240 ;;		 -> mtouch_sensor(50), 
  5241 ;; Auto vars:     Size  Location     Type
  5242 ;;  result          2   28[COMRAM] unsigned short 
  5243 ;; Return value:  Size  Location     Type
  5244 ;;                  1    wreg      void 
  5245 ;; Registers used:
  5246 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5247 ;; Tracked objects:
  5248 ;;		On entry : 3F/0
  5249 ;;		On exit  : 0/0
  5250 ;;		Unchanged: 0/0
  5251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  5252 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5253 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5255 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5256 ;;Total ram usage:        3 bytes
  5257 ;; Hardware stack levels used: 1
  5258 ;; Hardware stack levels required when called: 7
  5259 ;; This function calls:
  5260 ;;		_medianFilter
  5261 ;; This function is called by:
  5262 ;;		_MTOUCH_Sensor_postAcquisitionProcess
  5263 ;; This function uses a non-reentrant model
  5264 ;;
  5265                           
  5266                           	psect	text40
  5267   002804                     __ptext40:
  5268                           	callstack 0
  5269   002804                     _Sensor_RawSample_Update:
  5270                           	callstack 20
  5271                           
  5272                           ; BSR set to: 0
  5273                           ;mcc_generated_files/touch/mtouch_sensor.c: 641: static void Sensor_RawSample_Update(mto
      +                          uch_sensor_t* sensor);mcc_generated_files/touch/mtouch_sensor.c: 642: {;mcc_generated_fi
      +                          les/touch/mtouch_sensor.c: 643:     mtouch_sensor_sample_t result = medianFilter(sensor-
      +                          >sensor_name);
  5274                           
  5275                           ;incstack = 0
  5276   002804  501C               	movf	Sensor_RawSample_Update@sensor^0,w,c
  5277   002806  6ED9               	movwf	fsr2l,c
  5278   002808  6ADA               	clrf	fsr2h,c
  5279   00280A  50DF               	movf	indf2,w,c
  5280   00280C  ECDF  F00D         	call	_medianFilter
  5281   002810  C015  F01D         	movff	?_medianFilter,Sensor_RawSample_Update@result
  5282   002814  C016  F01E         	movff	?_medianFilter+1,Sensor_RawSample_Update@result+1
  5283                           
  5284                           ;mcc_generated_files/touch/mtouch_sensor.c: 645:     if (GIE == (uint8_t)1)
  5285   002818  AEF2               	btfss	4082,7,c	;volatile
  5286   00281A  D004               	goto	l4614
  5287                           
  5288                           ;mcc_generated_files/touch/mtouch_sensor.c: 646:     {;mcc_generated_files/touch/mtouch_
      +                          sensor.c: 647:         GIE = (uint8_t)0;
  5289   00281C  9EF2               	bcf	4082,7,c	;volatile
  5290                           
  5291                           ;mcc_generated_files/touch/mtouch_sensor.c: 648:         sensor->rawSample = result;
  5292   00281E  D804               	call	PL161	;call to abstracted procedure
  5293                           
  5294                           ;mcc_generated_files/touch/mtouch_sensor.c: 649:         GIE = (uint8_t)1;
  5295   002820  8EF2               	bsf	4082,7,c	;volatile
  5296                           
  5297                           ;mcc_generated_files/touch/mtouch_sensor.c: 650:     }
  5298   002822  0C07               	retlw	7
  5299   002824                     l4614:
  5300                           
  5301                           ;mcc_generated_files/touch/mtouch_sensor.c: 652:     {;mcc_generated_files/touch/mtouch_
      +                          sensor.c: 653:         sensor->rawSample = result;
  5302   002824  D801               	call	PL161	;call to abstracted procedure
  5303   002826  0C07               	retlw	7	;funcret
  5304   002828                     __end_of_Sensor_RawSample_Update:
  5305                           	callstack 0
  5306   002828                     PL161:
  5307                           	callstack 20
  5308   002828  501C               	movf	Sensor_RawSample_Update@sensor^0,w,c
  5309   00282A  6ED9               	movwf	fsr2l,c
  5310   00282C  6ADA               	clrf	fsr2h,c
  5311   00282E  0E07               	movlw	7
  5312   002830  26D9               	addwf	fsr2l,f,c
  5313   002832  C01D  FFDE         	movff	Sensor_RawSample_Update@result,postinc2
  5314   002836  C01E  FFDD         	movff	Sensor_RawSample_Update@result+1,postdec2
  5315   00283A  0C07               	retlw	7
  5316   00283C                     __end_ofPL161:
  5317                           	callstack 0
  5318                           
  5319 ;; *************** function _medianFilter *****************
  5320 ;; Defined at:
  5321 ;;		line 658 in file "mcc_generated_files/touch/mtouch_sensor.c"
  5322 ;; Parameters:    Size  Location     Type
  5323 ;;  sensor          1    wreg     enum E13072
  5324 ;; Auto vars:     Size  Location     Type
  5325 ;;  sensor          1   26[COMRAM] enum E13072
  5326 ;; Return value:  Size  Location     Type
  5327 ;;                  2   20[COMRAM] unsigned short 
  5328 ;; Registers used:
  5329 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5330 ;; Tracked objects:
  5331 ;;		On entry : 3F/0
  5332 ;;		On exit  : 0/0
  5333 ;;		Unchanged: 0/0
  5334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  5335 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5336 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5337 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5338 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5339 ;;Total ram usage:        7 bytes
  5340 ;; Hardware stack levels used: 1
  5341 ;; Hardware stack levels required when called: 6
  5342 ;; This function calls:
  5343 ;;		Nothing
  5344 ;; This function is called by:
  5345 ;;		_Sensor_RawSample_Update
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text41
  5350   001BBE                     __ptext41:
  5351                           	callstack 0
  5352   001BBE                     _medianFilter:
  5353                           	callstack 20
  5354                           
  5355                           ;incstack = 0
  5356                           ;medianFilter@sensor stored from wreg
  5357   001BBE  6E1B               	movwf	medianFilter@sensor^0,c
  5358                           
  5359                           ;mcc_generated_files/touch/mtouch_sensor.c: 658: static mtouch_sensor_packetsample_t med
      +                          ianFilter(enum mtouch_sensor_names sensor);mcc_generated_files/touch/mtouch_sensor.c: 65
      +                          9: {;mcc_generated_files/touch/mtouch_sensor.c: 660:     static uint8_t bufferIndex[5u];
      +                          ;mcc_generated_files/touch/mtouch_sensor.c: 662:     sensor_medianBuffer[sensor][bufferI
      +                          ndex[sensor]++] = packet_sample[sensor];
  5360   001BC0  501B               	movf	medianFilter@sensor^0,w,c
  5361   001BC2  EC74  F00D         	call	PL173	;call to abstracted procedure
  5362   001BC6  501B               	movf	medianFilter@sensor^0,w,c
  5363   001BC8  0F88               	addlw	low medianFilter@bufferIndex
  5364   001BCA  6EE1               	movwf	fsr1l,c
  5365   001BCC  6AE2               	clrf	fsr1h,c
  5366   001BCE  50E7               	movf	indf1,w,c
  5367   001BD0  2AE7               	incf	indf1,f,c
  5368   001BD2  0D02               	mullw	2
  5369   001BD4  CFF3 F017          	movff	prodl,??_medianFilter
  5370   001BD8  D837               	call	PL127	;call to abstracted procedure
  5371   001BDA  2417               	addwf	??_medianFilter^0,w,c
  5372   001BDC  6EE1               	movwf	fsr1l,c
  5373   001BDE  6AE2               	clrf	fsr1h,c
  5374   001BE0  CFDE FFE6          	movff	postinc2,postinc1
  5375   001BE4  CFDD FFE5          	movff	postdec2,postdec1
  5376                           
  5377                           ;mcc_generated_files/touch/mtouch_sensor.c: 664:     if(bufferIndex[sensor]>=3)
  5378   001BE8  D847               	call	PL235	;call to abstracted procedure
  5379   001BEA  0E02               	movlw	2
  5380   001BEC  64DF               	cpfsgt	indf2,c
  5381   001BEE  D002               	goto	l4252
  5382                           
  5383                           ;mcc_generated_files/touch/mtouch_sensor.c: 665:         bufferIndex[sensor] = 0;
  5384   001BF0  D843               	call	PL235	;call to abstracted procedure
  5385   001BF2  6ADF               	clrf	indf2,c
  5386   001BF4                     l4252:
  5387                           
  5388                           ;mcc_generated_files/touch/mtouch_sensor.c: 667:     if(sensor_medianBuffer[sensor][0]>=
      +                          sensor_medianBuffer[sensor][1])
  5389   001BF4  D83C               	call	PL187	;call to abstracted procedure
  5390   001BF6  6ED9               	movwf	fsr2l,c
  5391   001BF8  6ADA               	clrf	fsr2h,c
  5392   001BFA  D826               	call	PL127	;call to abstracted procedure
  5393   001BFC  D82A               	call	PL129	;call to abstracted procedure
  5394   001BFE  E311               	bnc	l4274
  5395                           
  5396                           ;mcc_generated_files/touch/mtouch_sensor.c: 668:     {;mcc_generated_files/touch/mtouch_
      +                          sensor.c: 669:         if(sensor_medianBuffer[sensor][1]>=sensor_medianBuffer[sensor][2]
      +                          )
  5397   001C00  D819               	call	PL121	;call to abstracted procedure
  5398   001C02  0F62               	addlw	low (_sensor_medianBuffer+2)
  5399   001C04  D826               	call	PL129	;call to abstracted procedure
  5400   001C06  E302               	bnc	l4262
  5401   001C08                     u2910:
  5402                           
  5403                           ;mcc_generated_files/touch/mtouch_sensor.c: 670:             return sensor_medianBuffer[
      +                          sensor][1];
  5404   001C08  D832               	call	PL187	;call to abstracted procedure
  5405   001C0A  D02A               	goto	PL141	;call to abstracted procedure
  5406   001C0C                     l4262:
  5407                           
  5408                           ;mcc_generated_files/touch/mtouch_sensor.c: 672:         {;mcc_generated_files/touch/mto
      +                          uch_sensor.c: 673:             if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[se
      +                          nsor][2])
  5409   001C0C  D813               	call	PL121	;call to abstracted procedure
  5410   001C0E  0F60               	addlw	low _sensor_medianBuffer
  5411   001C10  D820               	call	PL129	;call to abstracted procedure
  5412   001C12  E305               	bnc	l4270
  5413   001C14                     u2920:
  5414                           
  5415                           ;mcc_generated_files/touch/mtouch_sensor.c: 674:                 return sensor_medianBuf
      +                          fer[sensor][2];
  5416   001C14  501B               	movf	medianFilter@sensor^0,w,c
  5417   001C16  0D06               	mullw	6
  5418   001C18  50F3               	movf	243,w,c
  5419   001C1A  0F64               	addlw	low (_sensor_medianBuffer+4)
  5420   001C1C  D021               	goto	PL141	;call to abstracted procedure
  5421   001C1E                     l4270:
  5422                           
  5423                           ;mcc_generated_files/touch/mtouch_sensor.c: 676:                 return sensor_medianBuf
      +                          fer[sensor][0];
  5424   001C1E  D814               	call	PL127	;call to abstracted procedure
  5425   001C20  D01F               	goto	PL141	;call to abstracted procedure
  5426   001C22                     l4274:
  5427                           
  5428                           ;mcc_generated_files/touch/mtouch_sensor.c: 681:     {;mcc_generated_files/touch/mtouch_
      +                          sensor.c: 682:         if(sensor_medianBuffer[sensor][0]>=sensor_medianBuffer[sensor][2]
      +                          )
  5429   001C22  D808               	call	PL121	;call to abstracted procedure
  5430   001C24  0F60               	addlw	low _sensor_medianBuffer
  5431   001C26  D815               	call	PL129	;call to abstracted procedure
  5432   001C28  E2FA               	bc	l4270
  5433                           
  5434                           ;mcc_generated_files/touch/mtouch_sensor.c: 685:         {;mcc_generated_files/touch/mto
      +                          uch_sensor.c: 686:             if(sensor_medianBuffer[sensor][1]>=sensor_medianBuffer[se
      +                          nsor][2])
  5435   001C2A  D804               	call	PL121	;call to abstracted procedure
  5436   001C2C  0F62               	addlw	low (_sensor_medianBuffer+2)
  5437   001C2E  D811               	call	PL129	;call to abstracted procedure
  5438   001C30  E2F1               	bc	u2920
  5439   001C32  D7EA               	goto	u2910
  5440   001C34                     __end_of_medianFilter:
  5441                           	callstack 0
  5442   001C34                     PL121:
  5443                           	callstack 20
  5444   001C34  501B               	movf	medianFilter@sensor^0,w,c
  5445   001C36  0D06               	mullw	6
  5446   001C38  50F3               	movf	243,w,c
  5447   001C3A  0F64               	addlw	low (_sensor_medianBuffer+4)
  5448   001C3C  6ED9               	movwf	fsr2l,c
  5449   001C3E  6ADA               	clrf	fsr2h,c
  5450   001C40  501B               	movf	medianFilter@sensor^0,w,c
  5451   001C42  0D06               	mullw	6
  5452   001C44  50F3               	movf	243,w,c
  5453   001C46  0012               	return	
  5454   001C48                     __end_ofPL121:
  5455                           	callstack 0
  5456   001C48                     PL127:
  5457                           	callstack 20
  5458   001C48  501B               	movf	medianFilter@sensor^0,w,c
  5459   001C4A  0D06               	mullw	6
  5460   001C4C  50F3               	movf	243,w,c
  5461   001C4E  0F60               	addlw	low _sensor_medianBuffer
  5462   001C50  0012               	return	
  5463   001C52                     __end_ofPL127:
  5464                           	callstack 0
  5465   001C52                     PL129:
  5466                           	callstack 20
  5467   001C52  6EE1               	movwf	fsr1l,c
  5468   001C54  6AE2               	clrf	fsr1h,c
  5469   001C56  50DE               	movf	postinc2,w,c
  5470   001C58  5CE6               	subwf	postinc1,w,c
  5471   001C5A  50DE               	movf	postinc2,w,c
  5472   001C5C  58E6               	subwfb	postinc1,w,c
  5473   001C5E  0012               	return	
  5474   001C60                     __end_ofPL129:
  5475                           	callstack 0
  5476   001C60                     PL141:
  5477                           	callstack 20
  5478   001C60  6ED9               	movwf	fsr2l,c
  5479   001C62  6ADA               	clrf	fsr2h,c
  5480   001C64  CFDE F015          	movff	postinc2,?_medianFilter
  5481   001C68  CFDD F016          	movff	postdec2,?_medianFilter+1
  5482   001C6C  0012               	return	
  5483   001C6E                     __end_ofPL141:
  5484                           	callstack 0
  5485   001C6E                     PL187:
  5486                           	callstack 20
  5487   001C6E  501B               	movf	medianFilter@sensor^0,w,c
  5488   001C70  0D06               	mullw	6
  5489   001C72  50F3               	movf	243,w,c
  5490   001C74  0F62               	addlw	low (_sensor_medianBuffer+2)
  5491   001C76  0012               	return	
  5492   001C78                     __end_ofPL187:
  5493                           	callstack 0
  5494   001C78                     PL235:
  5495                           	callstack 20
  5496   001C78  501B               	movf	medianFilter@sensor^0,w,c
  5497   001C7A  0F88               	addlw	low medianFilter@bufferIndex
  5498   001C7C  6ED9               	movwf	fsr2l,c
  5499   001C7E  6ADA               	clrf	fsr2h,c
  5500   001C80  0012               	return	
  5501   001C82                     __end_ofPL235:
  5502                           	callstack 0
  5503                           
  5504 ;; *************** function _Sensor_DefaultCallback *****************
  5505 ;; Defined at:
  5506 ;;		line 712 in file "mcc_generated_files/touch/mtouch_sensor.c"
  5507 ;; Parameters:    Size  Location     Type
  5508 ;;  sensor          1    wreg     enum E13072
  5509 ;; Auto vars:     Size  Location     Type
  5510 ;;  sensor          1    0[COMRAM] enum E13072
  5511 ;; Return value:  Size  Location     Type
  5512 ;;                  1    wreg      void 
  5513 ;; Registers used:
  5514 ;;		wreg
  5515 ;; Tracked objects:
  5516 ;;		On entry : 0/0
  5517 ;;		On exit  : 0/0
  5518 ;;		Unchanged: 0/0
  5519 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  5520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5521 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5523 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5524 ;;Total ram usage:        0 bytes
  5525 ;; Hardware stack levels used: 1
  5526 ;; Hardware stack levels required when called: 6
  5527 ;; This function calls:
  5528 ;;		Nothing
  5529 ;; This function is called by:
  5530 ;;		_MTOUCH_Sensor_postAcquisitionProcess
  5531 ;; This function uses a non-reentrant model
  5532 ;;
  5533                           
  5534                           	psect	text42
  5535   002D3E                     __ptext42:
  5536                           	callstack 0
  5537   002D3E                     _Sensor_DefaultCallback:
  5538                           	callstack 21
  5539                           
  5540                           ;incstack = 0
  5541   002D3E  0012               	return		;funcret
  5542   002D40                     __end_of_Sensor_DefaultCallback:
  5543                           	callstack 0
  5544                           
  5545 ;; *************** function _MTOUCH_Sensor_isSamplingComplete *****************
  5546 ;; Defined at:
  5547 ;;		line 329 in file "mcc_generated_files/touch/mtouch_sensor.c"
  5548 ;; Parameters:    Size  Location     Type
  5549 ;;		None
  5550 ;; Auto vars:     Size  Location     Type
  5551 ;;  sensor          1   31[COMRAM] enum E13072
  5552 ;; Return value:  Size  Location     Type
  5553 ;;                  1    wreg      _Bool 
  5554 ;; Registers used:
  5555 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5556 ;; Tracked objects:
  5557 ;;		On entry : 0/E
  5558 ;;		On exit  : 0/0
  5559 ;;		Unchanged: 0/0
  5560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  5561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5562 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5564 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5565 ;;Total ram usage:        1 bytes
  5566 ;; Hardware stack levels used: 1
  5567 ;; Hardware stack levels required when called: 8
  5568 ;; This function calls:
  5569 ;;		_MTOUCH_Sensor_isEnabled
  5570 ;;		_MTOUCH_Sensor_isSampling
  5571 ;;		_MTOUCH_Sensor_wasSampled
  5572 ;;		_Sensor_scheduleNextScan
  5573 ;; This function is called by:
  5574 ;;		_MTOUCH_Sensor_SampleAll
  5575 ;; This function uses a non-reentrant model
  5576 ;;
  5577                           
  5578                           	psect	text43
  5579   00292E                     __ptext43:
  5580                           	callstack 0
  5581   00292E                     _MTOUCH_Sensor_isSamplingComplete:
  5582                           	callstack 20
  5583                           
  5584                           ;mcc_generated_files/touch/mtouch_sensor.c: 331:     enum mtouch_sensor_names sensor;;mc
      +                          c_generated_files/touch/mtouch_sensor.c: 333:     for (sensor = 0; sensor < 5u; sensor++
      +                          )
  5585                           
  5586                           ;incstack = 0
  5587   00292E  6A20               	clrf	MTOUCH_Sensor_isSamplingComplete@sensor^0,c
  5588   002930                     l6050:
  5589                           
  5590                           ;mcc_generated_files/touch/mtouch_sensor.c: 334:     {;mcc_generated_files/touch/mtouch_
      +                          sensor.c: 335:         if(MTOUCH_Sensor_wasSampled(sensor)==0 && MTOUCH_Sensor_isEnabled
      +                          (sensor))
  5591   002930  5020               	movf	MTOUCH_Sensor_isSamplingComplete@sensor^0,w,c
  5592   002932  ECFE  F015         	call	_MTOUCH_Sensor_wasSampled
  5593   002936  0900               	iorlw	0
  5594   002938  E10C               	bnz	l6062
  5595   00293A  5020               	movf	MTOUCH_Sensor_isSamplingComplete@sensor^0,w,c
  5596   00293C  EC12  F016         	call	_MTOUCH_Sensor_isEnabled
  5597   002940  0900               	iorlw	0
  5598   002942  E007               	bz	l6062
  5599                           
  5600                           ;mcc_generated_files/touch/mtouch_sensor.c: 336:         {;mcc_generated_files/touch/mto
      +                          uch_sensor.c: 337:             if(MTOUCH_Sensor_isSampling() == 0)
  5601   002944  EC90  F016         	call	_MTOUCH_Sensor_isSampling	;wreg free
  5602   002948  0900               	iorlw	0
  5603   00294A  B4D8               	btfsc	status,2,c
  5604                           
  5605                           ;mcc_generated_files/touch/mtouch_sensor.c: 338:             {;mcc_generated_files/touch
      +                          /mtouch_sensor.c: 339:                 Sensor_scheduleNextScan();
  5606   00294C  ECBC  F00A         	call	_Sensor_scheduleNextScan	;wreg free
  5607                           
  5608                           ;mcc_generated_files/touch/mtouch_sensor.c: 341:             return 0;
  5609   002950  0C00               	retlw	0
  5610   002952                     l6062:
  5611                           
  5612                           ;mcc_generated_files/touch/mtouch_sensor.c: 343:     }
  5613   002952  2A20               	incf	MTOUCH_Sensor_isSamplingComplete@sensor^0,f,c
  5614   002954  0E04               	movlw	4
  5615   002956  6420               	cpfsgt	MTOUCH_Sensor_isSamplingComplete@sensor^0,c
  5616   002958  D7EB               	goto	l6050
  5617   00295A  0C01               	retlw	1
  5618   00295C                     __end_of_MTOUCH_Sensor_isSamplingComplete:
  5619                           	callstack 0
  5620                           
  5621 ;; *************** function _Sensor_scheduleNextScan *****************
  5622 ;; Defined at:
  5623 ;;		line 405 in file "mcc_generated_files/touch/mtouch_sensor.c"
  5624 ;; Parameters:    Size  Location     Type
  5625 ;;		None
  5626 ;; Auto vars:     Size  Location     Type
  5627 ;;  sensor          1   30[COMRAM] PTR struct .
  5628 ;;		 -> mtouch_sensor(50), 
  5629 ;;  skipScan        1   29[COMRAM] _Bool 
  5630 ;;  state           1   28[COMRAM] _Bool 
  5631 ;; Return value:  Size  Location     Type
  5632 ;;                  1    wreg      void 
  5633 ;; Registers used:
  5634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5635 ;; Tracked objects:
  5636 ;;		On entry : 0/E
  5637 ;;		On exit  : 0/0
  5638 ;;		Unchanged: 0/0
  5639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  5640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5641 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5642 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5643 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5644 ;;Total ram usage:        7 bytes
  5645 ;; Hardware stack levels used: 1
  5646 ;; Hardware stack levels required when called: 7
  5647 ;; This function calls:
  5648 ;;		_MTOUCH_Sensor_isEnabled
  5649 ;;		_MTOUCH_Sensor_wasSampled
  5650 ;;		_Sensor_SetTrisBit
  5651 ;;		_Sensor_isCalibrated
  5652 ;;		_Sensor_isCalibratingAcqTime
  5653 ;; This function is called by:
  5654 ;;		_MTOUCH_Sensor_isSamplingComplete
  5655 ;; This function uses a non-reentrant model
  5656 ;;
  5657                           
  5658                           	psect	text44
  5659   001578                     __ptext44:
  5660                           	callstack 0
  5661   001578                     _Sensor_scheduleNextScan:
  5662                           	callstack 20
  5663                           
  5664                           ;mcc_generated_files/touch/mtouch_sensor.c: 407:     mtouch_sensor_t* sensor;;mcc_genera
      +                          ted_files/touch/mtouch_sensor.c: 408:     _Bool skipScan = (_Bool)0;
  5665                           
  5666                           ;incstack = 0
  5667   001578  6A1E               	clrf	Sensor_scheduleNextScan@skipScan^0,c
  5668                           
  5669                           ;mcc_generated_files/touch/mtouch_sensor.c: 409:     _Bool state = (_Bool)GIE;
  5670   00157A  0E00               	movlw	0
  5671   00157C  BEF2               	btfsc	4082,7,c	;volatile
  5672   00157E  0E01               	movlw	1
  5673   001580  6E1D               	movwf	Sensor_scheduleNextScan@state^0,c
  5674                           
  5675                           ;mcc_generated_files/touch/mtouch_sensor.c: 412:     while(MTOUCH_Sensor_wasSampled(curr
      +                          entScanSensor) || !MTOUCH_Sensor_isEnabled(currentScanSensor))
  5676   001582  D009               	goto	l5880
  5677   001584                     l5874:
  5678                           
  5679                           ;mcc_generated_files/touch/mtouch_sensor.c: 413:     {;mcc_generated_files/touch/mtouch_
      +                          sensor.c: 414:         if(++currentScanSensor == 5u)
  5680   001584  2A45               	incf	_currentScanSensor^0,f,c
  5681   001586  0E05               	movlw	5
  5682   001588  1845               	xorwf	_currentScanSensor^0,w,c
  5683   00158A  E105               	bnz	l5880
  5684                           
  5685                           ;mcc_generated_files/touch/mtouch_sensor.c: 415:         {;mcc_generated_files/touch/mto
      +                          uch_sensor.c: 416:             currentScanSensor = 0;
  5686   00158C  6A45               	clrf	_currentScanSensor^0,c
  5687                           
  5688                           ;mcc_generated_files/touch/mtouch_sensor.c: 417:             sampling_flag = 0;
  5689   00158E  6A44               	clrf	_sampling_flag^0,c
  5690                           
  5691                           ;mcc_generated_files/touch/mtouch_sensor.c: 418:             skipScan = 1;
  5692   001590  0E01               	movlw	1
  5693   001592  6E1E               	movwf	Sensor_scheduleNextScan@skipScan^0,c
  5694                           
  5695                           ;mcc_generated_files/touch/mtouch_sensor.c: 419:             break;
  5696   001594  D00A               	goto	u5260
  5697   001596                     l5880:
  5698                           
  5699                           ;mcc_generated_files/touch/mtouch_sensor.c: 412:     while(MTOUCH_Sensor_wasSampled(curr
      +                          entScanSensor) || !MTOUCH_Sensor_isEnabled(currentScanSensor))
  5700   001596  5045               	movf	_currentScanSensor^0,w,c
  5701   001598  ECFE  F015         	call	_MTOUCH_Sensor_wasSampled
  5702   00159C  0900               	iorlw	0
  5703   00159E  E1F2               	bnz	l5874
  5704   0015A0  5045               	movf	_currentScanSensor^0,w,c
  5705   0015A2  EC12  F016         	call	_MTOUCH_Sensor_isEnabled
  5706   0015A6  0900               	iorlw	0
  5707   0015A8  E0ED               	bz	l5874
  5708   0015AA                     u5260:
  5709                           
  5710                           ;mcc_generated_files/touch/mtouch_sensor.c: 424:     if(skipScan==0)
  5711   0015AA  501E               	movf	Sensor_scheduleNextScan@skipScan^0,w,c
  5712   0015AC  A4D8               	btfss	status,2,c
  5713   0015AE  0012               	return	
  5714                           
  5715                           ;mcc_generated_files/touch/mtouch_sensor.c: 425:     {;mcc_generated_files/touch/mtouch_
      +                          sensor.c: 426:         sensor = &mtouch_sensor[currentScanSensor];
  5716   0015B0  EC1E  F00A         	call	PL207	;call to abstracted procedure
  5717   0015B4  6E1F               	movwf	Sensor_scheduleNextScan@sensor^0,c
  5718                           
  5719                           ;mcc_generated_files/touch/mtouch_sensor.c: 427:         if(Sensor_isCalibrated(sensor))
  5720   0015B6  C01F  F015         	movff	Sensor_scheduleNextScan@sensor,Sensor_isCalibrated@sensor
  5721   0015BA                     i1L__ptext46:
  5722                           	callstack 20
  5723   0015BA                     i1L_Sensor_isCalibrated:
  5724                           	callstack 20
  5725   0015BA                     i1Ll4238:
  5726                           	callstack 20
  5727                           
  5728                           ;mcc_generated_files/touch/mtouch_sensor.c: 811: static __attribute__((inline)) _Bool Se
      +                          nsor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/touch/mtouch_sensor.c: 81
      +                          2: {;mcc_generated_files/touch/mtouch_sensor.c: 813:     return (_Bool)sensor->calibrate
      +                          d;
  5729   0015BA  5015               	movf	Sensor_isCalibrated@sensor^0,w,c
  5730   0015BC  ECFB  F00C         	call	PL123	;call to abstracted procedure
  5731   0015C0  B6DF               	btfsc	indf2,3,c
  5732   0015C2  D001               	goto	i1Lu2871
  5733   0015C4  D002               	goto	i1Lu2870
  5734   0015C6                     i1Lu2871:
  5735                           	callstack 20
  5736   0015C6  0E01               	movlw	1
  5737   0015C8  D001               	goto	i1Lu2876
  5738   0015CA                     i1Lu2870:
  5739                           	callstack 20
  5740   0015CA  0E00               	movlw	0
  5741   0015CC                     i1Lu2876:
  5742                           	callstack 20
  5743   0015CC                     i1Ll1303:
  5744                           	callstack 20
  5745   0015CC  0900               	iorlw	0
  5746   0015CE  E009               	bz	l5892
  5747                           
  5748                           ;mcc_generated_files/touch/mtouch_sensor.c: 428:         {;mcc_generated_files/touch/mto
      +                          uch_sensor.c: 429:             ADACQ = (mtouch_sensor_time_t)sensor->acquisition_time;
  5749   0015D0  501F               	movf	Sensor_scheduleNextScan@sensor^0,w,c
  5750   0015D2  D850               	call	PL119	;call to abstracted procedure
  5751   0015D4  010F               	movlb	15	; () banked
  5752   0015D6  6F57               	movwf	87,b	;volatile
  5753                           
  5754                           ;mcc_generated_files/touch/mtouch_sensor.c: 430:             ADPRE = (mtouch_sensor_time
      +                          _t)sensor->precharge_time;
  5755   0015D8  501F               	movf	Sensor_scheduleNextScan@sensor^0,w,c
  5756   0015DA  EC25  F011         	call	PL115	;call to abstracted procedure
  5757   0015DE  6F59               	movwf	89,b	;volatile
  5758                           
  5759                           ;mcc_generated_files/touch/mtouch_sensor.c: 431:         }
  5760   0015E0  D018               	goto	l5898
  5761   0015E2                     l5892:
  5762                           
  5763                           ;mcc_generated_files/touch/mtouch_sensor.c: 433:         {;mcc_generated_files/touch/mto
      +                          uch_sensor.c: 434:             if(Sensor_isCalibratingAcqTime(sensor))
  5764   0015E2  C01F  F015         	movff	Sensor_scheduleNextScan@sensor,Sensor_isCalibratingAcqTime@sensor
  5765   0015E6                     i2L__ptext45:
  5766                           	callstack 20
  5767   0015E6                     i2L_Sensor_isCalibratingAcqTime:
  5768                           	callstack 20
  5769   0015E6                     i2Ll4242:
  5770                           	callstack 20
  5771                           
  5772                           ;mcc_generated_files/touch/mtouch_sensor.c: 829: static __attribute__((inline)) _Bool Se
      +                          nsor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/touch/mtouch_sens
      +                          or.c: 830: {;mcc_generated_files/touch/mtouch_sensor.c: 831:     return (_Bool)sensor->a
      +                          cqTime_cal;
  5773   0015E6  5015               	movf	Sensor_isCalibratingAcqTime@sensor^0,w,c
  5774   0015E8  ECFB  F00C         	call	PL123	;call to abstracted procedure
  5775   0015EC  B8DF               	btfsc	indf2,4,c
  5776   0015EE  D001               	goto	i2Lu2881
  5777   0015F0  D002               	goto	i2Lu2880
  5778   0015F2                     i2Lu2881:
  5779                           	callstack 20
  5780   0015F2  0E01               	movlw	1
  5781   0015F4  D001               	goto	i2Lu2886
  5782   0015F6                     i2Lu2880:
  5783                           	callstack 20
  5784   0015F6  0E00               	movlw	0
  5785   0015F8                     i2Lu2886:
  5786                           	callstack 20
  5787   0015F8                     i2Ll1312:
  5788                           	callstack 20
  5789   0015F8  0900               	iorlw	0
  5790   0015FA  E008               	bz	l5896
  5791                           
  5792                           ;mcc_generated_files/touch/mtouch_sensor.c: 435:             {;mcc_generated_files/touch
      +                          /mtouch_sensor.c: 436:                 ADPRE = (mtouch_sensor_time_t)sensor->precharge_t
      +                          ime;
  5793   0015FC  501F               	movf	Sensor_scheduleNextScan@sensor^0,w,c
  5794   0015FE  EC25  F011         	call	PL115	;call to abstracted procedure
  5795   001602  010F               	movlb	15	; () banked
  5796   001604  6F59               	movwf	89,b	;volatile
  5797                           
  5798                           ;mcc_generated_files/touch/mtouch_sensor.c: 437:                 ADACQ = (mtouch_sensor_
      +                          time_t)sensor->acquisition_time;
  5799   001606  501F               	movf	Sensor_scheduleNextScan@sensor^0,w,c
  5800   001608  D835               	call	PL119	;call to abstracted procedure
  5801   00160A  D002               	goto	L6
  5802   00160C                     l5896:
  5803                           
  5804                           ;mcc_generated_files/touch/mtouch_sensor.c: 440:             {;mcc_generated_files/touch
      +                          /mtouch_sensor.c: 441:                 ADPRE = ((mtouch_sensor_time_t)((mtouch_sensor_ti
      +                          me_t)48 << (uint8_t)2));
  5805   00160C  EC28  F00A         	call	PL239	;call to abstracted procedure
  5806   001610                     L6:
  5807                           
  5808                           ;mcc_generated_files/touch/mtouch_sensor.c: 442:                 ADACQ = ((mtouch_sensor
      +                          _time_t)((mtouch_sensor_time_t)48 << (uint8_t)2));
  5809   001610  6F57               	movwf	87,b	;volatile
  5810   001612                     l5898:
  5811                           
  5812                           ; BSR set to: 15
  5813                           ;mcc_generated_files/touch/mtouch_sensor.c: 446:         ADPRE +=(uint8_t)sample_delay;
  5814   001612  5040               	movf	_sample_delay^0,w,c	;volatile
  5815   001614  2759               	addwf	89,f,b	;volatile
  5816                           
  5817                           ; BSR set to: 15
  5818                           ;mcc_generated_files/touch/mtouch_sensor.c: 447:         ADPCH = (uint8_t)sensor->adpch;
  5819   001616  501F               	movf	Sensor_scheduleNextScan@sensor^0,w,c
  5820   001618  EC19  F00A         	call	PL205	;call to abstracted procedure
  5821   00161C  6F5A               	movwf	90,b	;volatile
  5822                           
  5823                           ; BSR set to: 15
  5824                           ;mcc_generated_files/touch/mtouch_sensor.c: 448:         ADRPT = (uint8_t)(sensor->overs
      +                          ampling>>1);
  5825   00161E  501F               	movf	Sensor_scheduleNextScan@sensor^0,w,c
  5826   001620  EC0B  F00A         	call	PL137	;call to abstracted procedure
  5827   001624  D82D               	call	PL213	;call to abstracted procedure
  5828   001626  90D8               	bcf	status,0,c
  5829   001628  301A               	rrcf	(??_Sensor_scheduleNextScan+1)^0,w,c
  5830   00162A  6E1C               	movwf	(??_Sensor_scheduleNextScan+3)^0,c
  5831   00162C  3019               	rrcf	??_Sensor_scheduleNextScan^0,w,c
  5832   00162E  6E1B               	movwf	(??_Sensor_scheduleNextScan+2)^0,c
  5833   001630  501B               	movf	(??_Sensor_scheduleNextScan+2)^0,w,c
  5834   001632  6E61               	movwf	97,c	;volatile
  5835                           
  5836                           ; BSR set to: 15
  5837                           ;mcc_generated_files/touch/mtouch_sensor.c: 449:         ADCAP = (uint8_t)sensor->addcap
      +                          ;
  5838   001634  501F               	movf	Sensor_scheduleNextScan@sensor^0,w,c
  5839   001636  6ED9               	movwf	fsr2l,c
  5840                           
  5841                           ; BSR set to: 15
  5842                           ;mcc_generated_files/touch/mtouch_sensor.c: 450:         ADCON0bits.ADON = 1;
  5843                           
  5844                           ; BSR set to: 15
  5845                           ;mcc_generated_files/touch/mtouch_sensor.c: 451:         sampling_flag= 1;
  5846   001638  EC10  F00A         	call	PL167	;call to abstracted procedure
  5847                           
  5848                           ; BSR set to: 15
  5849                           ;mcc_generated_files/touch/mtouch_sensor.c: 452:         Sensor_SetTrisBit(currentScanSe
      +                          nsor,1);
  5850   00163C  6E15               	movwf	Sensor_SetTrisBit@TrisBit^0,c
  5851   00163E  5045               	movf	_currentScanSensor^0,w,c
  5852   001640  EC85  F012         	call	_Sensor_SetTrisBit
  5853                           
  5854                           ;mcc_generated_files/touch/mtouch_sensor.c: 453:         GIE = 0;
  5855   001644  9EF2               	bcf	4082,7,c	;volatile
  5856                           
  5857                           ;mcc_generated_files/touch/mtouch_sensor.c: 454:         ADCON0bits.GO = 1;
  5858   001646  010F               	movlb	15	; () banked
  5859   001648  815B               	bsf	91,0,b	;volatile
  5860                           
  5861                           ; BSR set to: 15
  5862                           ;mcc_generated_files/touch/mtouch_sensor.c: 455:         ADACC = ((mtouch_sensor_packets
      +                          ample_t)(sensor->oversampling)<<9);
  5863   00164A  501F               	movf	Sensor_scheduleNextScan@sensor^0,w,c
  5864   00164C  EC0B  F00A         	call	PL137	;call to abstracted procedure
  5865   001650  D817               	call	PL213	;call to abstracted procedure
  5866   001652  0E09               	movlw	9
  5867   001654                     u5305:
  5868   001654  90D8               	bcf	status,0,c
  5869   001656  3619               	rlcf	??_Sensor_scheduleNextScan^0,f,c
  5870   001658  361A               	rlcf	(??_Sensor_scheduleNextScan+1)^0,f,c
  5871   00165A  2EE8               	decfsz	wreg,f,c
  5872   00165C  D7FB               	goto	u5305
  5873   00165E  C019  FF6B         	movff	??_Sensor_scheduleNextScan,3947	;volatile
  5874   001662  C01A  FF6C         	movff	??_Sensor_scheduleNextScan+1,3948	;volatile
  5875                           
  5876                           ; BSR set to: 15
  5877                           ;mcc_generated_files/touch/mtouch_sensor.c: 456:         GIE = state;
  5878   001666  B01D               	btfsc	Sensor_scheduleNextScan@state^0,0,c
  5879   001668  D002               	bra	u5315
  5880   00166A  9EF2               	bcf	4082,7,c	;volatile
  5881   00166C  D001               	bra	u5316
  5882   00166E                     u5315:
  5883   00166E  8EF2               	bsf	4082,7,c	;volatile
  5884   001670                     u5316:
  5885                           
  5886                           ;mcc_generated_files/touch/mtouch_sensor.c: 457:         scanInterrupted = 0;
  5887   001670  6A43               	clrf	_scanInterrupted^0,c	;volatile
  5888   001672  0012               	return		;funcret
  5889   001674                     __end_of_Sensor_scheduleNextScan:
  5890                           	callstack 0
  5891   001674                     PL119:
  5892                           	callstack 19
  5893   001674  6ED9               	movwf	fsr2l,c
  5894   001676  6ADA               	clrf	fsr2h,c
  5895   001678  0E03               	movlw	3
  5896   00167A  26D9               	addwf	fsr2l,f,c
  5897   00167C  50DF               	movf	indf2,w,c
  5898   00167E  0012               	return	
  5899   001680                     __end_ofPL119:
  5900                           	callstack 0
  5901   001680                     PL213:
  5902                           	callstack 20
  5903   001680  CFDE F019          	movff	postinc2,??_Sensor_scheduleNextScan
  5904   001684  CFDD F01A          	movff	postdec2,??_Sensor_scheduleNextScan+1
  5905   001688  0012               	return	
  5906   00168A                     __end_ofPL213:
  5907                           	callstack 0
  5908                           
  5909 ;; *************** function _Sensor_isCalibratingAcqTime *****************
  5910 ;; Defined at:
  5911 ;;		line 829 in file "mcc_generated_files/touch/mtouch_sensor.c"
  5912 ;; Parameters:    Size  Location     Type
  5913 ;;  sensor          1   20[COMRAM] PTR struct .
  5914 ;;		 -> mtouch_sensor(50), 
  5915 ;; Auto vars:     Size  Location     Type
  5916 ;;		None
  5917 ;; Return value:  Size  Location     Type
  5918 ;;                  1    wreg      _Bool 
  5919 ;; Registers used:
  5920 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5921 ;; Tracked objects:
  5922 ;;		On entry : 0/E
  5923 ;;		On exit  : 0/0
  5924 ;;		Unchanged: 0/0
  5925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  5926 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5929 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5930 ;;Total ram usage:        1 bytes
  5931 ;; Hardware stack levels used: 1
  5932 ;; Hardware stack levels required when called: 6
  5933 ;; This function calls:
  5934 ;;		Nothing
  5935 ;; This function is called by:
  5936 ;;		_Sensor_scheduleNextScan
  5937 ;; This function uses a non-reentrant model
  5938 ;;
  5939                           
  5940                           	psect	text45
  5941   000000                     __ptext45:
  5942                           	callstack 0
  5943   000000                     _Sensor_isCalibratingAcqTime:
  5944                           	callstack 0
  5945   000000                     __end_of_Sensor_isCalibratingAcqTime:
  5946                           	callstack 0
  5947                           
  5948 ;; *************** function _Sensor_isCalibrated *****************
  5949 ;; Defined at:
  5950 ;;		line 811 in file "mcc_generated_files/touch/mtouch_sensor.c"
  5951 ;; Parameters:    Size  Location     Type
  5952 ;;  sensor          1   20[COMRAM] PTR struct .
  5953 ;;		 -> mtouch_sensor(50), 
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;		None
  5956 ;; Return value:  Size  Location     Type
  5957 ;;                  1    wreg      _Bool 
  5958 ;; Registers used:
  5959 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5960 ;; Tracked objects:
  5961 ;;		On entry : 0/E
  5962 ;;		On exit  : 0/0
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  5965 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5966 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5968 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  5969 ;;Total ram usage:        1 bytes
  5970 ;; Hardware stack levels used: 1
  5971 ;; Hardware stack levels required when called: 6
  5972 ;; This function calls:
  5973 ;;		Nothing
  5974 ;; This function is called by:
  5975 ;;		_Sensor_scheduleNextScan
  5976 ;; This function uses a non-reentrant model
  5977 ;;
  5978                           
  5979                           	psect	text46
  5980   000000                     __ptext46:
  5981                           	callstack 0
  5982   000000                     _Sensor_isCalibrated:
  5983                           	callstack 0
  5984   000000                     __end_of_Sensor_isCalibrated:
  5985                           	callstack 0
  5986                           
  5987 ;; *************** function _Sensor_SetTrisBit *****************
  5988 ;; Defined at:
  5989 ;;		line 242 in file "mcc_generated_files/touch/mtouch_sensor.c"
  5990 ;; Parameters:    Size  Location     Type
  5991 ;;  sensor          1    wreg     enum E13072
  5992 ;;  TrisBit         1   20[COMRAM] unsigned char 
  5993 ;; Auto vars:     Size  Location     Type
  5994 ;;  sensor          1   23[COMRAM] enum E13072
  5995 ;; Return value:  Size  Location     Type
  5996 ;;                  1    wreg      void 
  5997 ;; Registers used:
  5998 ;;		wreg, status,2, status,0
  5999 ;; Tracked objects:
  6000 ;;		On entry : 3F/F
  6001 ;;		On exit  : 0/0
  6002 ;;		Unchanged: 0/0
  6003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  6004 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6005 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6006 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6007 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6008 ;;Total ram usage:        4 bytes
  6009 ;; Hardware stack levels used: 1
  6010 ;; Hardware stack levels required when called: 6
  6011 ;; This function calls:
  6012 ;;		Nothing
  6013 ;; This function is called by:
  6014 ;;		_Sensor_scheduleNextScan
  6015 ;; This function uses a non-reentrant model
  6016 ;;
  6017                           
  6018                           	psect	text47
  6019   00250A                     __ptext47:
  6020                           	callstack 0
  6021   00250A                     _Sensor_SetTrisBit:
  6022                           	callstack 20
  6023                           
  6024                           ;incstack = 0
  6025                           ;Sensor_SetTrisBit@sensor stored from wreg
  6026   00250A  6E18               	movwf	Sensor_SetTrisBit@sensor^0,c
  6027                           
  6028                           ;mcc_generated_files/touch/mtouch_sensor.c: 242: static void Sensor_SetTrisBit(enum mtou
      +                          ch_sensor_names sensor,uint8_t TrisBit);mcc_generated_files/touch/mtouch_sensor.c: 243: 
      +                          {;mcc_generated_files/touch/mtouch_sensor.c: 244:     switch(sensor)
  6029   00250C  D01E               	goto	l4230
  6030   00250E                     l1128:
  6031                           
  6032                           ;mcc_generated_files/touch/mtouch_sensor.c: 247:             TRISAbits.TRISA2 = TrisBit;
  6033   00250E  B015               	btfsc	Sensor_SetTrisBit@TrisBit^0,0,c
  6034   002510  D002               	bra	u2825
  6035   002512  9487               	bcf	135,2,c	;volatile
  6036   002514  D001               	bra	u2826
  6037   002516                     u2825:
  6038   002516  8487               	bsf	135,2,c	;volatile
  6039   002518                     u2826:
  6040                           
  6041                           ;mcc_generated_files/touch/mtouch_sensor.c: 248:             break;
  6042   002518  0012               	return	
  6043   00251A                     l1130:
  6044                           
  6045                           ;mcc_generated_files/touch/mtouch_sensor.c: 250:             TRISDbits.TRISD7 = TrisBit;
  6046   00251A  B015               	btfsc	Sensor_SetTrisBit@TrisBit^0,0,c
  6047   00251C  D002               	bra	u2835
  6048   00251E  9E8A               	bcf	138,7,c	;volatile
  6049   002520  D001               	bra	u2836
  6050   002522                     u2835:
  6051   002522  8E8A               	bsf	138,7,c	;volatile
  6052   002524                     u2836:
  6053                           
  6054                           ;mcc_generated_files/touch/mtouch_sensor.c: 251:             break;
  6055   002524  0012               	return	
  6056   002526                     l1131:
  6057                           
  6058                           ;mcc_generated_files/touch/mtouch_sensor.c: 253:             TRISBbits.TRISB4 = TrisBit;
  6059   002526  B015               	btfsc	Sensor_SetTrisBit@TrisBit^0,0,c
  6060   002528  D002               	bra	u2845
  6061   00252A  9888               	bcf	136,4,c	;volatile
  6062   00252C  D001               	bra	u2846
  6063   00252E                     u2845:
  6064   00252E  8888               	bsf	136,4,c	;volatile
  6065   002530                     u2846:
  6066                           
  6067                           ;mcc_generated_files/touch/mtouch_sensor.c: 254:             break;
  6068   002530  0012               	return	
  6069   002532                     l1132:
  6070                           
  6071                           ;mcc_generated_files/touch/mtouch_sensor.c: 256:             TRISAbits.TRISA5 = TrisBit;
  6072   002532  B015               	btfsc	Sensor_SetTrisBit@TrisBit^0,0,c
  6073   002534  D002               	bra	u2855
  6074   002536  9A87               	bcf	135,5,c	;volatile
  6075   002538  D001               	bra	u2856
  6076   00253A                     u2855:
  6077   00253A  8A87               	bsf	135,5,c	;volatile
  6078   00253C                     u2856:
  6079                           
  6080                           ;mcc_generated_files/touch/mtouch_sensor.c: 257:             break;
  6081   00253C  0012               	return	
  6082   00253E                     l1133:
  6083                           
  6084                           ;mcc_generated_files/touch/mtouch_sensor.c: 259:             TRISAbits.TRISA4 = TrisBit;
  6085   00253E  B015               	btfsc	Sensor_SetTrisBit@TrisBit^0,0,c
  6086   002540  D002               	bra	u2865
  6087   002542  9887               	bcf	135,4,c	;volatile
  6088   002544  D001               	bra	u2866
  6089   002546                     u2865:
  6090   002546  8887               	bsf	135,4,c	;volatile
  6091   002548                     u2866:
  6092                           
  6093                           ;mcc_generated_files/touch/mtouch_sensor.c: 260:             break;
  6094   002548  0012               	return	
  6095   00254A                     l4230:
  6096   00254A  5018               	movf	Sensor_SetTrisBit@sensor^0,w,c
  6097   00254C  6E16               	movwf	??_Sensor_SetTrisBit^0,c
  6098   00254E  6A17               	clrf	(??_Sensor_SetTrisBit+1)^0,c
  6099                           
  6100                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6101                           ; Switch size 1, requested type "space"
  6102                           ; Number of cases is 1, Range of values is 0 to 0
  6103                           ; switch strategies available:
  6104                           ; Name         Instructions Cycles
  6105                           ; simple_byte            4     3 (average)
  6106                           ;	Chosen strategy is simple_byte
  6107   002550  5017               	movf	(??_Sensor_SetTrisBit+1)^0,w,c
  6108   002552  A4D8               	btfss	status,2,c
  6109   002554  0012               	return	
  6110                           
  6111                           ; Switch size 1, requested type "space"
  6112                           ; Number of cases is 5, Range of values is 0 to 4
  6113                           ; switch strategies available:
  6114                           ; Name         Instructions Cycles
  6115                           ; simple_byte           16     9 (average)
  6116                           ;	Chosen strategy is simple_byte
  6117   002556  5016               	movf	??_Sensor_SetTrisBit^0,w,c
  6118   002558  E0DA               	bz	l1128
  6119   00255A  0A01               	xorlw	1	; case 1
  6120   00255C  E0DE               	bz	l1130
  6121   00255E  0A03               	xorlw	3	; case 2
  6122   002560  E0E2               	bz	l1131
  6123   002562  0A01               	xorlw	1	; case 3
  6124   002564  E0E6               	bz	l1132
  6125   002566  0A07               	xorlw	7	; case 4
  6126   002568  E0EA               	bz	l1133
  6127   00256A  0012               	return		;funcret
  6128   00256C                     __end_of_Sensor_SetTrisBit:
  6129                           	callstack 0
  6130                           
  6131 ;; *************** function _MTOUCH_Sensor_isSampling *****************
  6132 ;; Defined at:
  6133 ;;		line 869 in file "mcc_generated_files/touch/mtouch_sensor.c"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;		None
  6136 ;; Auto vars:     Size  Location     Type
  6137 ;;		None
  6138 ;; Return value:  Size  Location     Type
  6139 ;;                  1    wreg      _Bool 
  6140 ;; Registers used:
  6141 ;;		wreg, status,2
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/E
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  6147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6148 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6150 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6151 ;;Total ram usage:        0 bytes
  6152 ;; Hardware stack levels used: 1
  6153 ;; Hardware stack levels required when called: 6
  6154 ;; This function calls:
  6155 ;;		Nothing
  6156 ;; This function is called by:
  6157 ;;		_MTOUCH_Sensor_isSamplingComplete
  6158 ;; This function uses a non-reentrant model
  6159 ;;
  6160                           
  6161                           	psect	text48
  6162   002D20                     __ptext48:
  6163                           	callstack 0
  6164   002D20                     _MTOUCH_Sensor_isSampling:
  6165                           	callstack 21
  6166                           
  6167                           ;mcc_generated_files/touch/mtouch_sensor.c: 871:     return sampling_flag;
  6168                           
  6169                           ;incstack = 0
  6170   002D20  5044               	movf	_sampling_flag^0,w,c
  6171   002D22  0012               	return		;funcret
  6172   002D24                     __end_of_MTOUCH_Sensor_isSampling:
  6173                           	callstack 0
  6174                           
  6175 ;; *************** function _MTOUCH_Initialize *****************
  6176 ;; Defined at:
  6177 ;;		line 82 in file "mcc_generated_files/touch/mtouch.c"
  6178 ;; Parameters:    Size  Location     Type
  6179 ;;		None
  6180 ;; Auto vars:     Size  Location     Type
  6181 ;;		None
  6182 ;; Return value:  Size  Location     Type
  6183 ;;                  1    wreg      void 
  6184 ;; Registers used:
  6185 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6186 ;; Tracked objects:
  6187 ;;		On entry : 0/E
  6188 ;;		On exit  : 3F/E
  6189 ;;		Unchanged: 0/0
  6190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  6191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6195 ;;Total ram usage:        0 bytes
  6196 ;; Hardware stack levels used: 1
  6197 ;; Hardware stack levels required when called: 9
  6198 ;; This function calls:
  6199 ;;		_MTOUCH_Button_InitializeAll
  6200 ;;		_MTOUCH_Sensor_InitializeAll
  6201 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6202 ;;		_MTOUCH_Sensor_Scan_Initialize
  6203 ;;		_MTOUCH_Slider_InitializeAll
  6204 ;; This function is called by:
  6205 ;;		_SYSTEM_Initialize
  6206 ;;		_MTOUCH_Service_Mainloop
  6207 ;; This function uses a non-reentrant model
  6208 ;;
  6209                           
  6210                           	psect	text49
  6211   002BE8                     __ptext49:
  6212                           	callstack 0
  6213   002BE8                     _MTOUCH_Initialize:
  6214                           	callstack 20
  6215                           
  6216                           ;mcc_generated_files/touch/mtouch.c: 84:     MTOUCH_Sensor_InitializeAll();
  6217                           
  6218                           ;incstack = 0
  6219   002BE8  ECFE  F014         	call	_MTOUCH_Sensor_InitializeAll	;wreg free
  6220                           
  6221                           ;mcc_generated_files/touch/mtouch.c: 85:     MTOUCH_Button_InitializeAll();
  6222   002BEC  ECC3  F014         	call	_MTOUCH_Button_InitializeAll	;wreg free
  6223                           
  6224                           ;mcc_generated_files/touch/mtouch.c: 86:     MTOUCH_Slider_InitializeAll();
  6225   002BF0  EC65  F016         	call	_MTOUCH_Slider_InitializeAll	;wreg free
  6226                           
  6227                           ;mcc_generated_files/touch/mtouch.c: 87:     MTOUCH_Sensor_Sampled_ResetAll();
  6228   002BF4  ECEB  F014         	call	_MTOUCH_Sensor_Sampled_ResetAll	;wreg free
  6229                           
  6230                           ;mcc_generated_files/touch/mtouch.c: 88:     MTOUCH_Sensor_Scan_Initialize();
  6231   002BF8  EF92  F016         	goto	_MTOUCH_Sensor_Scan_Initialize	;wreg free
  6232   002BFC                     __end_of_MTOUCH_Initialize:
  6233                           	callstack 0
  6234                           
  6235 ;; *************** function _MTOUCH_Slider_InitializeAll *****************
  6236 ;; Defined at:
  6237 ;;		line 965 in file "mcc_generated_files/touch/mtouch_slider.c"
  6238 ;; Parameters:    Size  Location     Type
  6239 ;;		None
  6240 ;; Auto vars:     Size  Location     Type
  6241 ;;  slider          1   22[COMRAM] enum E13201
  6242 ;; Return value:  Size  Location     Type
  6243 ;;                  1    wreg      void 
  6244 ;; Registers used:
  6245 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6246 ;; Tracked objects:
  6247 ;;		On entry : 0/E
  6248 ;;		On exit  : 0/0
  6249 ;;		Unchanged: 0/0
  6250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  6251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6252 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6254 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6255 ;;Total ram usage:        1 bytes
  6256 ;; Hardware stack levels used: 1
  6257 ;; Hardware stack levels required when called: 7
  6258 ;; This function calls:
  6259 ;;		_Slider_Initialize
  6260 ;; This function is called by:
  6261 ;;		_MTOUCH_Initialize
  6262 ;; This function uses a non-reentrant model
  6263 ;;
  6264                           
  6265                           	psect	text50
  6266   002CCA                     __ptext50:
  6267                           	callstack 0
  6268   002CCA                     _MTOUCH_Slider_InitializeAll:
  6269                           	callstack 21
  6270                           
  6271                           ;mcc_generated_files/touch/mtouch_slider.c: 967:     enum mtouch_slider_names slider;;mc
      +                          c_generated_files/touch/mtouch_slider.c: 969:     for (slider = 0u; slider < 1u; slider+
      +                          +)
  6272                           
  6273                           ; BSR set to: 14
  6274                           ;incstack = 0
  6275   002CCA  6A17               	clrf	MTOUCH_Slider_InitializeAll@slider^0,c
  6276   002CCC                     l4716:
  6277                           
  6278                           ;mcc_generated_files/touch/mtouch_slider.c: 970:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 971:         Slider_Initialize(slider);
  6279   002CCC  5017               	movf	MTOUCH_Slider_InitializeAll@slider^0,w,c
  6280   002CCE  EC52  F012         	call	_Slider_Initialize
  6281                           
  6282                           ;mcc_generated_files/touch/mtouch_slider.c: 972:     }
  6283   002CD2  2A17               	incf	MTOUCH_Slider_InitializeAll@slider^0,f,c
  6284   002CD4  5017               	movf	MTOUCH_Slider_InitializeAll@slider^0,w,c
  6285   002CD6  E0FA               	bz	l4716
  6286   002CD8  0012               	return		;funcret
  6287   002CDA                     __end_of_MTOUCH_Slider_InitializeAll:
  6288                           	callstack 0
  6289                           
  6290 ;; *************** function _Slider_Initialize *****************
  6291 ;; Defined at:
  6292 ;;		line 795 in file "mcc_generated_files/touch/mtouch_slider.c"
  6293 ;; Parameters:    Size  Location     Type
  6294 ;;  sliderName      1    wreg     enum E13201
  6295 ;; Auto vars:     Size  Location     Type
  6296 ;;  sliderName      1   20[COMRAM] enum E13201
  6297 ;;  slider          1   21[COMRAM] PTR struct .
  6298 ;;		 -> mtouch_slider(17), 
  6299 ;; Return value:  Size  Location     Type
  6300 ;;                  1    wreg      void 
  6301 ;; Registers used:
  6302 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6303 ;; Tracked objects:
  6304 ;;		On entry : 0/E
  6305 ;;		On exit  : 0/0
  6306 ;;		Unchanged: 0/0
  6307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  6308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6309 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6311 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6312 ;;Total ram usage:        2 bytes
  6313 ;; Hardware stack levels used: 1
  6314 ;; Hardware stack levels required when called: 6
  6315 ;; This function calls:
  6316 ;;		Nothing
  6317 ;; This function is called by:
  6318 ;;		_MTOUCH_Slider_InitializeAll
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           	psect	text51
  6323   0024A4                     __ptext51:
  6324                           	callstack 0
  6325   0024A4                     _Slider_Initialize:
  6326                           	callstack 21
  6327                           
  6328                           ;incstack = 0
  6329                           ;Slider_Initialize@sliderName stored from wreg
  6330   0024A4  6E15               	movwf	Slider_Initialize@sliderName^0,c
  6331                           
  6332                           ;mcc_generated_files/touch/mtouch_slider.c: 795: static void Slider_Initialize(enum mtou
      +                          ch_slider_names sliderName);mcc_generated_files/touch/mtouch_slider.c: 796: {;mcc_genera
      +                          ted_files/touch/mtouch_slider.c: 797:     if (sliderName < 1u)
  6333   0024A6  5015               	movf	Slider_Initialize@sliderName^0,w,c
  6334   0024A8  A4D8               	btfss	status,2,c
  6335   0024AA  0012               	return	
  6336                           
  6337                           ;mcc_generated_files/touch/mtouch_slider.c: 798:     {;mcc_generated_files/touch/mtouch_
      +                          slider.c: 799:         mtouch_slider_t* slider = &mtouch_slider[sliderName];
  6338   0024AC  5015               	movf	Slider_Initialize@sliderName^0,w,c
  6339   0024AE  0D11               	mullw	17
  6340   0024B0  50F3               	movf	243,w,c
  6341   0024B2  0FD5               	addlw	low _mtouch_slider
  6342   0024B4  6E16               	movwf	Slider_Initialize@slider^0,c
  6343                           
  6344                           ;mcc_generated_files/touch/mtouch_slider.c: 802:         slider->sliderStatus = MTOUCH_S
      +                          LIDER_STATE_initializing;
  6345   0024B6  5016               	movf	Slider_Initialize@slider^0,w,c
  6346   0024B8  D817               	call	PL145	;call to abstracted procedure
  6347                           
  6348                           ;mcc_generated_files/touch/mtouch_slider.c: 804:         slider->rightHysteresis = 0u;
  6349   0024BA  D81F               	call	PL229	;call to abstracted procedure
  6350   0024BC  0E08               	movlw	8
  6351   0024BE  26D9               	addwf	fsr2l,f,c
  6352                           
  6353                           ;mcc_generated_files/touch/mtouch_slider.c: 805:         slider->leftHysteresis = slider
      +                          ->positionHysteresis;
  6354   0024C0  D81C               	call	PL229	;call to abstracted procedure
  6355   0024C2  0E05               	movlw	5
  6356   0024C4  26D9               	addwf	fsr2l,f,c
  6357   0024C6  5016               	movf	Slider_Initialize@slider^0,w,c
  6358   0024C8  6EE1               	movwf	fsr1l,c
  6359   0024CA  6AE2               	clrf	fsr1h,c
  6360   0024CC  0E09               	movlw	9
  6361   0024CE  26E1               	addwf	fsr1l,f,c
  6362   0024D0  CFDF FFE7          	movff	indf2,indf1
  6363                           
  6364                           ;mcc_generated_files/touch/mtouch_slider.c: 807:         slider->rawPosition = 0u;
  6365   0024D4  5016               	movf	Slider_Initialize@slider^0,w,c
  6366   0024D6  EC9F  F011         	call	PL199	;call to abstracted procedure
  6367                           
  6368                           ;mcc_generated_files/touch/mtouch_slider.c: 808:         slider->sliderPosition = 0u;
  6369   0024DA  D80B               	call	PL209	;call to abstracted procedure
  6370   0024DC  EC82  F009         	call	PL163	;call to abstracted procedure
  6371                           
  6372                           ;mcc_generated_files/touch/mtouch_slider.c: 809:         slider->contactSize = 0u;
  6373   0024E0  D808               	call	PL209	;call to abstracted procedure
  6374   0024E2  EC8C  F009         	call	PL201	;call to abstracted procedure
  6375   0024E6  D00E               	goto	PL241	;call to abstracted procedure
  6376   0024E8                     __end_of_Slider_Initialize:
  6377                           	callstack 0
  6378   0024E8                     PL145:
  6379                           	callstack 18
  6380   0024E8  6ED9               	movwf	fsr2l,c
  6381   0024EA  6ADA               	clrf	fsr2h,c
  6382   0024EC  0E10               	movlw	16
  6383   0024EE  26D9               	addwf	fsr2l,f,c
  6384   0024F0  0C10               	retlw	16
  6385   0024F2                     __end_ofPL145:
  6386                           	callstack 0
  6387   0024F2                     PL209:
  6388                           	callstack 21
  6389   0024F2  6ADE               	clrf	postinc2,c
  6390   0024F4  6ADD               	clrf	postdec2,c
  6391   0024F6  5016               	movf	Slider_Initialize@slider^0,w,c
  6392   0024F8  0012               	return	
  6393   0024FA                     __end_ofPL209:
  6394                           	callstack 0
  6395   0024FA                     PL229:
  6396                           	callstack 21
  6397   0024FA  6ADF               	clrf	indf2,c
  6398   0024FC  5016               	movf	Slider_Initialize@slider^0,w,c
  6399   0024FE  6ED9               	movwf	fsr2l,c
  6400   002500  6ADA               	clrf	fsr2h,c
  6401   002502  0012               	return	
  6402   002504                     __end_ofPL229:
  6403                           	callstack 0
  6404   002504                     PL241:
  6405                           	callstack 19
  6406   002504  6ADE               	clrf	postinc2,c
  6407   002506  6ADD               	clrf	postdec2,c
  6408   002508  0012               	return		;funcret
  6409   00250A                     __end_ofPL241:
  6410                           	callstack 0
  6411                           
  6412 ;; *************** function _MTOUCH_Sensor_Scan_Initialize *****************
  6413 ;; Defined at:
  6414 ;;		line 393 in file "mcc_generated_files/touch/mtouch_sensor.c"
  6415 ;; Parameters:    Size  Location     Type
  6416 ;;		None
  6417 ;; Auto vars:     Size  Location     Type
  6418 ;;		None
  6419 ;; Return value:  Size  Location     Type
  6420 ;;                  1    wreg      void 
  6421 ;; Registers used:
  6422 ;;		wreg, status,2, status,0, cstack
  6423 ;; Tracked objects:
  6424 ;;		On entry : 0/E
  6425 ;;		On exit  : 3F/E
  6426 ;;		Unchanged: 0/0
  6427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  6428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6432 ;;Total ram usage:        0 bytes
  6433 ;; Hardware stack levels used: 1
  6434 ;; Hardware stack levels required when called: 8
  6435 ;; This function calls:
  6436 ;;		_MTOUCH_Sensor_ADCC_Initialize
  6437 ;; This function is called by:
  6438 ;;		_MTOUCH_Initialize
  6439 ;; This function uses a non-reentrant model
  6440 ;;
  6441                           
  6442                           	psect	text52
  6443   002D24                     __ptext52:
  6444                           	callstack 0
  6445   002D24                     _MTOUCH_Sensor_Scan_Initialize:
  6446                           	callstack 20
  6447                           
  6448                           ;mcc_generated_files/touch/mtouch_sensor.c: 395:     MTOUCH_Sensor_ADCC_Initialize();
  6449                           
  6450                           ;incstack = 0
  6451   002D24  EFA8  F013         	goto	_MTOUCH_Sensor_ADCC_Initialize	;wreg free
  6452   002D28                     __end_of_MTOUCH_Sensor_Scan_Initialize:
  6453                           	callstack 0
  6454                           
  6455 ;; *************** function _MTOUCH_Sensor_ADCC_Initialize *****************
  6456 ;; Defined at:
  6457 ;;		line 272 in file "mcc_generated_files/touch/mtouch_sensor.c"
  6458 ;; Parameters:    Size  Location     Type
  6459 ;;		None
  6460 ;; Auto vars:     Size  Location     Type
  6461 ;;		None
  6462 ;; Return value:  Size  Location     Type
  6463 ;;                  1    wreg      void 
  6464 ;; Registers used:
  6465 ;;		wreg, status,2, status,0, cstack
  6466 ;; Tracked objects:
  6467 ;;		On entry : 0/E
  6468 ;;		On exit  : 3F/E
  6469 ;;		Unchanged: 0/0
  6470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  6471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6475 ;;Total ram usage:        0 bytes
  6476 ;; Hardware stack levels used: 1
  6477 ;; Hardware stack levels required when called: 7
  6478 ;; This function calls:
  6479 ;;		_ADCC_SetADTIInterruptHandler
  6480 ;; This function is called by:
  6481 ;;		_MTOUCH_Sensor_Scan_Initialize
  6482 ;; This function uses a non-reentrant model
  6483 ;;
  6484                           
  6485                           	psect	text53
  6486   002750                     __ptext53:
  6487                           	callstack 0
  6488   002750                     _MTOUCH_Sensor_ADCC_Initialize:
  6489                           	callstack 20
  6490                           
  6491                           ;mcc_generated_files/touch/mtouch_sensor.c: 276:     ADCLK = 0xf;
  6492                           
  6493                           ; BSR set to: 14
  6494                           ;incstack = 0
  6495   002750  0E0F               	movlw	15
  6496   002752  010F               	movlb	15	; () banked
  6497   002754  6F52               	movwf	82,b	;volatile
  6498                           
  6499                           ; BSR set to: 15
  6500                           ;mcc_generated_files/touch/mtouch_sensor.c: 278:     ADREF = 0x00;
  6501   002756  6B53               	clrf	83,b	;volatile
  6502                           
  6503                           ; BSR set to: 15
  6504                           ;mcc_generated_files/touch/mtouch_sensor.c: 280:     ADCAP = 0x00;
  6505   002758  6B58               	clrf	88,b	;volatile
  6506                           
  6507                           ; BSR set to: 15
  6508                           ;mcc_generated_files/touch/mtouch_sensor.c: 282:     ADLTHL = 0x00;
  6509                           
  6510                           ; BSR set to: 15
  6511                           ;mcc_generated_files/touch/mtouch_sensor.c: 284:     ADLTHH = 0x00;
  6512                           
  6513                           ; BSR set to: 15
  6514                           ;mcc_generated_files/touch/mtouch_sensor.c: 286:     ADUTHL = 0x00;
  6515                           
  6516                           ; BSR set to: 15
  6517                           ;mcc_generated_files/touch/mtouch_sensor.c: 288:     ADUTHH = 0x00;
  6518                           
  6519                           ; BSR set to: 15
  6520                           ;mcc_generated_files/touch/mtouch_sensor.c: 290:     ADSTPTL = 0x00;
  6521                           
  6522                           ; BSR set to: 15
  6523                           ;mcc_generated_files/touch/mtouch_sensor.c: 292:     ADSTPTH = 0x00;
  6524   00275A  D813               	call	PL193	;call to abstracted procedure
  6525                           
  6526                           ;mcc_generated_files/touch/mtouch_sensor.c: 295:     ADCON1 = 0x41;
  6527   00275C  0E41               	movlw	65
  6528   00275E  6F54               	movwf	84,b	;volatile
  6529                           
  6530                           ;mcc_generated_files/touch/mtouch_sensor.c: 297:     ADCON2 = 0x8B;
  6531   002760  0E8B               	movlw	139
  6532   002762  6F55               	movwf	85,b	;volatile
  6533                           
  6534                           ;mcc_generated_files/touch/mtouch_sensor.c: 300:     ADCON3 = 0x0F;
  6535   002764  0E0F               	movlw	15
  6536   002766  6F56               	movwf	86,b	;volatile
  6537                           
  6538                           ;mcc_generated_files/touch/mtouch_sensor.c: 303:     ADCON0 = 0xC4;
  6539   002768  0EC4               	movlw	196
  6540   00276A  6F5B               	movwf	91,b	;volatile
  6541                           
  6542                           ; BSR set to: 15
  6543                           ;mcc_generated_files/touch/mtouch_sensor.c: 307:     PIR1bits.ADTIF = 0;
  6544   00276C  010E               	movlb	14	; () banked
  6545   00276E  93C6               	bcf	198,1,b	;volatile
  6546                           
  6547                           ; BSR set to: 14
  6548                           ;mcc_generated_files/touch/mtouch_sensor.c: 309:     PIE1bits.ADTIE = 1;
  6549   002770  83BE               	bsf	190,1,b	;volatile
  6550                           
  6551                           ; BSR set to: 14
  6552                           ;mcc_generated_files/touch/mtouch_sensor.c: 311:     ADCC_SetADTIInterruptHandler(ADCC_T
      +                          hresholdISR_mTouch);
  6553   002772  0E24               	movlw	low _ADCC_ThresholdISR_mTouch
  6554   002774  6E15               	movwf	ADCC_SetADTIInterruptHandler@InterruptHandler^0,c
  6555   002776  0E1A               	movlw	high _ADCC_ThresholdISR_mTouch
  6556   002778  6E16               	movwf	(ADCC_SetADTIInterruptHandler@InterruptHandler+1)^0,c
  6557   00277A  0E00               	movlw	low (_ADCC_ThresholdISR_mTouch shr (0+16))
  6558   00277C  6E17               	movwf	(ADCC_SetADTIInterruptHandler@InterruptHandler+2)^0,c
  6559   00277E  EF7B  F016         	goto	_ADCC_SetADTIInterruptHandler	;wreg free
  6560   002782                     __end_of_MTOUCH_Sensor_ADCC_Initialize:
  6561                           	callstack 0
  6562   002782                     PL193:
  6563                           	callstack 22
  6564   002782  6A65               	clrf	101,c	;volatile
  6565   002784  6A66               	clrf	102,c	;volatile
  6566   002786  6A67               	clrf	103,c	;volatile
  6567   002788  6A68               	clrf	104,c	;volatile
  6568   00278A  6A63               	clrf	99,c	;volatile
  6569   00278C  6A64               	clrf	100,c	;volatile
  6570   00278E  0012               	return	
  6571   002790                     __end_ofPL193:
  6572                           	callstack 0
  6573                           
  6574 ;; *************** function _ADCC_SetADTIInterruptHandler *****************
  6575 ;; Defined at:
  6576 ;;		line 296 in file "mcc_generated_files/adc/src/adcc.c"
  6577 ;; Parameters:    Size  Location     Type
  6578 ;;  InterruptHan    3   20[COMRAM] PTR FTN()void 
  6579 ;;		 -> ADCC_ThresholdISR_mTouch(1), ADCC_DefaultADTI_ISR(1), 
  6580 ;; Auto vars:     Size  Location     Type
  6581 ;;		None
  6582 ;; Return value:  Size  Location     Type
  6583 ;;                  1    wreg      void 
  6584 ;; Registers used:
  6585 ;;		wreg, status,2, status,0
  6586 ;; Tracked objects:
  6587 ;;		On entry : 3F/E
  6588 ;;		On exit  : 3F/E
  6589 ;;		Unchanged: 3F/0
  6590 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  6591 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6592 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6593 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6594 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6595 ;;Total ram usage:        3 bytes
  6596 ;; Hardware stack levels used: 1
  6597 ;; Hardware stack levels required when called: 6
  6598 ;; This function calls:
  6599 ;;		Nothing
  6600 ;; This function is called by:
  6601 ;;		_ADCC_Initialize
  6602 ;;		_MTOUCH_Sensor_ADCC_Initialize
  6603 ;; This function uses a non-reentrant model
  6604 ;;
  6605                           
  6606                           	psect	text54
  6607   002CF6                     __ptext54:
  6608                           	callstack 0
  6609   002CF6                     _ADCC_SetADTIInterruptHandler:
  6610                           	callstack 20
  6611                           
  6612                           ; BSR set to: 14
  6613                           ;mcc_generated_files/adc/src/adcc.c: 296: void ADCC_SetADTIInterruptHandler(void (* Inte
      +                          rruptHandler)(void));mcc_generated_files/adc/src/adcc.c: 297: {;mcc_generated_files/adc/
      +                          src/adcc.c: 298:     ADCC_ADTI_InterruptHandler = InterruptHandler;
  6614                           
  6615                           ; BSR set to: 14
  6616                           ;incstack = 0
  6617   002CF6  C015  F0FD         	movff	ADCC_SetADTIInterruptHandler@InterruptHandler,_ADCC_ADTI_InterruptHandler
  6618   002CFA  C016  F0FE         	movff	ADCC_SetADTIInterruptHandler@InterruptHandler+1,_ADCC_ADTI_InterruptHandler+1
  6619   002CFE  C017  F0FF         	movff	ADCC_SetADTIInterruptHandler@InterruptHandler+2,_ADCC_ADTI_InterruptHandler+2
  6620                           
  6621                           ; BSR set to: 14
  6622   002D02  0012               	return		;funcret
  6623   002D04                     __end_of_ADCC_SetADTIInterruptHandler:
  6624                           	callstack 0
  6625                           
  6626 ;; *************** function _MTOUCH_Sensor_Sampled_ResetAll *****************
  6627 ;; Defined at:
  6628 ;;		line 842 in file "mcc_generated_files/touch/mtouch_sensor.c"
  6629 ;; Parameters:    Size  Location     Type
  6630 ;;		None
  6631 ;; Auto vars:     Size  Location     Type
  6632 ;;  sensor          1   22[COMRAM] PTR struct .
  6633 ;;		 -> mtouch_sensor(50), 
  6634 ;; Return value:  Size  Location     Type
  6635 ;;                  1    wreg      void 
  6636 ;; Registers used:
  6637 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  6638 ;; Tracked objects:
  6639 ;;		On entry : 0/1
  6640 ;;		On exit  : 0/0
  6641 ;;		Unchanged: 0/0
  6642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  6643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6644 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6645 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6646 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6647 ;;Total ram usage:        2 bytes
  6648 ;; Hardware stack levels used: 1
  6649 ;; Hardware stack levels required when called: 7
  6650 ;; This function calls:
  6651 ;;		_Sensor_Sampled_Reset
  6652 ;; This function is called by:
  6653 ;;		_MTOUCH_Initialize
  6654 ;;		_MTOUCH_Service_Mainloop
  6655 ;; This function uses a non-reentrant model
  6656 ;;
  6657                           
  6658                           	psect	text55
  6659   0029D6                     __ptext55:
  6660                           	callstack 0
  6661   0029D6                     _MTOUCH_Sensor_Sampled_ResetAll:
  6662                           	callstack 21
  6663                           
  6664                           ;mcc_generated_files/touch/mtouch_sensor.c: 844:     mtouch_sensor_t* sensor;;mcc_genera
      +                          ted_files/touch/mtouch_sensor.c: 845:     for(sensor = &mtouch_sensor[0];sensor<= &mtouc
      +                          h_sensor[5u -1];sensor++)
  6665                           
  6666                           ; BSR set to: 14
  6667                           ;incstack = 0
  6668   0029D6  0E91               	movlw	low _mtouch_sensor
  6669   0029D8  6E17               	movwf	MTOUCH_Sensor_Sampled_ResetAll@sensor^0,c
  6670   0029DA  D008               	goto	l4730
  6671   0029DC                     l4726:
  6672                           
  6673                           ;mcc_generated_files/touch/mtouch_sensor.c: 846:     {;mcc_generated_files/touch/mtouch_
      +                          sensor.c: 847:         Sensor_Sampled_Reset(sensor);
  6674   0029DC  C017  F015         	movff	MTOUCH_Sensor_Sampled_ResetAll@sensor,Sensor_Sampled_Reset@sensor
  6675   0029E0                     i3L__ptext58:
  6676                           	callstack 21
  6677   0029E0                     i3L_Sensor_Sampled_Reset:
  6678                           	callstack 21
  6679   0029E0                     i3Ll4224:
  6680                           	callstack 21
  6681                           
  6682                           ;mcc_generated_files/touch/mtouch_sensor.c: 859: static __attribute__((inline)) void Sen
      +                          sor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/touch/mtouch_sensor.c: 86
      +                          0: {;mcc_generated_files/touch/mtouch_sensor.c: 861:     sensor->sampled = 0;
  6683   0029E0  5015               	movf	Sensor_Sampled_Reset@sensor^0,w,c
  6684   0029E2  ECFB  F00C         	call	PL123	;call to abstracted procedure
  6685   0029E6  92DF               	bcf	indf2,1,c
  6686   0029E8                     i3Ll1325:
  6687                           	callstack 21
  6688                           
  6689                           ;mcc_generated_files/touch/mtouch_sensor.c: 848:     }
  6690   0029E8  0E0A               	movlw	10
  6691   0029EA  2617               	addwf	MTOUCH_Sensor_Sampled_ResetAll@sensor^0,f,c
  6692   0029EC                     l4730:
  6693   0029EC  0E91               	movlw	_mtouch_sensor& (0+255)
  6694   0029EE  6E16               	movwf	??_MTOUCH_Sensor_Sampled_ResetAll^0,c
  6695   0029F0  0E28               	movlw	40
  6696   0029F2  2616               	addwf	??_MTOUCH_Sensor_Sampled_ResetAll^0,f,c
  6697   0029F4  5017               	movf	MTOUCH_Sensor_Sampled_ResetAll@sensor^0,w,c
  6698   0029F6  5C16               	subwf	??_MTOUCH_Sensor_Sampled_ResetAll^0,w,c
  6699   0029F8  E2F1               	bc	l4726
  6700   0029FA  0012               	return		;funcret
  6701   0029FC                     __end_of_MTOUCH_Sensor_Sampled_ResetAll:
  6702                           	callstack 0
  6703                           
  6704 ;; *************** function _MTOUCH_Sensor_InitializeAll *****************
  6705 ;; Defined at:
  6706 ;;		line 316 in file "mcc_generated_files/touch/mtouch_sensor.c"
  6707 ;; Parameters:    Size  Location     Type
  6708 ;;		None
  6709 ;; Auto vars:     Size  Location     Type
  6710 ;;  sensor          1   29[COMRAM] enum E13072
  6711 ;; Return value:  Size  Location     Type
  6712 ;;                  1    wreg      void 
  6713 ;; Registers used:
  6714 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6715 ;; Tracked objects:
  6716 ;;		On entry : 0/E
  6717 ;;		On exit  : 0/0
  6718 ;;		Unchanged: 0/0
  6719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  6720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6721 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6723 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6724 ;;Total ram usage:        1 bytes
  6725 ;; Hardware stack levels used: 1
  6726 ;; Hardware stack levels required when called: 8
  6727 ;; This function calls:
  6728 ;;		_MTOUCH_Sensor_Initialize
  6729 ;;		_memcpy
  6730 ;; This function is called by:
  6731 ;;		_MTOUCH_Initialize
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           	psect	text56
  6736   0029FC                     __ptext56:
  6737                           	callstack 0
  6738   0029FC                     _MTOUCH_Sensor_InitializeAll:
  6739                           	callstack 20
  6740                           
  6741                           ;mcc_generated_files/touch/mtouch_sensor.c: 318:     enum mtouch_sensor_names sensor;;mc
      +                          c_generated_files/touch/mtouch_sensor.c: 320:     memcpy(mtouch_sensor,mtouch_sensor_ini
      +                          t,sizeof(mtouch_sensor_init));
  6742                           
  6743                           ;incstack = 0
  6744   0029FC  0E91               	movlw	low _mtouch_sensor
  6745   0029FE  6E15               	movwf	memcpy@d1^0,c
  6746   002A00  6A16               	clrf	(memcpy@d1+1)^0,c
  6747   002A02  0E56               	movlw	low _mtouch_sensor_init
  6748   002A04  6E17               	movwf	memcpy@s1^0,c
  6749   002A06  6A19               	clrf	(memcpy@n+1)^0,c
  6750   002A08  0E32               	movlw	50
  6751   002A0A  6E18               	movwf	memcpy@n^0,c
  6752   002A0C  EC87  F013         	call	_memcpy	;wreg free
  6753                           
  6754                           ;mcc_generated_files/touch/mtouch_sensor.c: 322:     for (sensor = 0; sensor < 5u; senso
      +                          r++)
  6755   002A10  6A1E               	clrf	MTOUCH_Sensor_InitializeAll@sensor^0,c
  6756   002A12                     l5934:
  6757                           
  6758                           ;mcc_generated_files/touch/mtouch_sensor.c: 323:     {;mcc_generated_files/touch/mtouch_
      +                          sensor.c: 324:         MTOUCH_Sensor_Initialize(sensor);
  6759   002A12  501E               	movf	MTOUCH_Sensor_InitializeAll@sensor^0,w,c
  6760   002A14  EC68  F015         	call	_MTOUCH_Sensor_Initialize
  6761                           
  6762                           ;mcc_generated_files/touch/mtouch_sensor.c: 325:     }
  6763   002A18  2A1E               	incf	MTOUCH_Sensor_InitializeAll@sensor^0,f,c
  6764   002A1A  0E04               	movlw	4
  6765   002A1C  641E               	cpfsgt	MTOUCH_Sensor_InitializeAll@sensor^0,c
  6766   002A1E  D7F9               	goto	l5934
  6767   002A20  0C04               	retlw	4
  6768   002A22                     __end_of_MTOUCH_Sensor_InitializeAll:
  6769                           	callstack 0
  6770                           
  6771 ;; *************** function _MTOUCH_Sensor_Initialize *****************
  6772 ;; Defined at:
  6773 ;;		line 233 in file "mcc_generated_files/touch/mtouch_sensor.c"
  6774 ;; Parameters:    Size  Location     Type
  6775 ;;  sensor          1    wreg     enum E13072
  6776 ;; Auto vars:     Size  Location     Type
  6777 ;;  sensor          1   21[COMRAM] enum E13072
  6778 ;; Return value:  Size  Location     Type
  6779 ;;                  1    wreg      enum E13078
  6780 ;; Registers used:
  6781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6782 ;; Tracked objects:
  6783 ;;		On entry : 0/E
  6784 ;;		On exit  : 0/0
  6785 ;;		Unchanged: 0/0
  6786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  6787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6788 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6790 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6791 ;;Total ram usage:        1 bytes
  6792 ;; Hardware stack levels used: 1
  6793 ;; Hardware stack levels required when called: 7
  6794 ;; This function calls:
  6795 ;;		_MTOUCH_Sensor_Calibrate
  6796 ;;		_MTOUCH_Sensor_Enable
  6797 ;;		_Sensor_Sampled_Reset
  6798 ;; This function is called by:
  6799 ;;		_MTOUCH_Sensor_InitializeAll
  6800 ;; This function uses a non-reentrant model
  6801 ;;
  6802                           
  6803                           	psect	text57
  6804   002AD0                     __ptext57:
  6805                           	callstack 0
  6806   002AD0                     _MTOUCH_Sensor_Initialize:
  6807                           	callstack 20
  6808                           
  6809                           ;incstack = 0
  6810                           ;MTOUCH_Sensor_Initialize@sensor stored from wreg
  6811   002AD0  6E16               	movwf	MTOUCH_Sensor_Initialize@sensor^0,c
  6812                           
  6813                           ;mcc_generated_files/touch/mtouch_sensor.c: 233: enum mtouch_sensor_error MTOUCH_Sensor_
      +                          Initialize(enum mtouch_sensor_names sensor);mcc_generated_files/touch/mtouch_sensor.c: 2
      +                          34: {;mcc_generated_files/touch/mtouch_sensor.c: 235:     MTOUCH_Sensor_Enable(sensor);
  6814   002AD2  5016               	movf	MTOUCH_Sensor_Initialize@sensor^0,w,c
  6815   002AD4  EC42  F016         	call	_MTOUCH_Sensor_Enable
  6816                           
  6817                           ;mcc_generated_files/touch/mtouch_sensor.c: 236:     MTOUCH_Sensor_Calibrate(sensor);
  6818   002AD8  5016               	movf	MTOUCH_Sensor_Initialize@sensor^0,w,c
  6819   002ADA  EC4B  F016         	call	_MTOUCH_Sensor_Calibrate
  6820                           
  6821                           ;mcc_generated_files/touch/mtouch_sensor.c: 237:     Sensor_Sampled_Reset(&mtouch_sensor
      +                          [sensor]);
  6822   002ADE  5016               	movf	MTOUCH_Sensor_Initialize@sensor^0,w,c
  6823   002AE0  0D0A               	mullw	10
  6824   002AE2  50F3               	movf	243,w,c
  6825   002AE4  0F91               	addlw	low _mtouch_sensor
  6826   002AE6  6E15               	movwf	Sensor_Sampled_Reset@sensor^0,c
  6827   002AE8                     i4L__ptext58:
  6828                           	callstack 20
  6829   002AE8                     i4L_Sensor_Sampled_Reset:
  6830                           	callstack 20
  6831   002AE8                     i4Ll4224:
  6832                           	callstack 20
  6833                           
  6834                           ;mcc_generated_files/touch/mtouch_sensor.c: 859: static __attribute__((inline)) void Sen
      +                          sor_Sampled_Reset(mtouch_sensor_t* sensor);mcc_generated_files/touch/mtouch_sensor.c: 86
      +                          0: {;mcc_generated_files/touch/mtouch_sensor.c: 861:     sensor->sampled = 0;
  6835   002AE8  5015               	movf	Sensor_Sampled_Reset@sensor^0,w,c
  6836   002AEA  ECFB  F00C         	call	PL123	;call to abstracted procedure
  6837   002AEE  92DF               	bcf	indf2,1,c
  6838   002AF0                     i4Ll1325:
  6839                           	callstack 20
  6840   002AF0  0012               	return	
  6841   002AF2                     __end_of_MTOUCH_Sensor_Initialize:
  6842                           	callstack 0
  6843                           
  6844 ;; *************** function _Sensor_Sampled_Reset *****************
  6845 ;; Defined at:
  6846 ;;		line 859 in file "mcc_generated_files/touch/mtouch_sensor.c"
  6847 ;; Parameters:    Size  Location     Type
  6848 ;;  sensor          1   20[COMRAM] PTR struct .
  6849 ;;		 -> mtouch_sensor(50), 
  6850 ;; Auto vars:     Size  Location     Type
  6851 ;;		None
  6852 ;; Return value:  Size  Location     Type
  6853 ;;                  1    wreg      void 
  6854 ;; Registers used:
  6855 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6856 ;; Tracked objects:
  6857 ;;		On entry : 0/1
  6858 ;;		On exit  : 0/0
  6859 ;;		Unchanged: 0/0
  6860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  6861 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6864 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6865 ;;Total ram usage:        1 bytes
  6866 ;; Hardware stack levels used: 1
  6867 ;; Hardware stack levels required when called: 6
  6868 ;; This function calls:
  6869 ;;		Nothing
  6870 ;; This function is called by:
  6871 ;;		_MTOUCH_Sensor_Initialize
  6872 ;;		_MTOUCH_Sensor_Sampled_ResetAll
  6873 ;; This function uses a non-reentrant model
  6874 ;;
  6875                           
  6876                           	psect	text58
  6877   000000                     __ptext58:
  6878                           	callstack 0
  6879   000000                     _Sensor_Sampled_Reset:
  6880                           	callstack 0
  6881   000000                     __end_of_Sensor_Sampled_Reset:
  6882                           	callstack 0
  6883                           
  6884 ;; *************** function _MTOUCH_Sensor_Enable *****************
  6885 ;; Defined at:
  6886 ;;		line 733 in file "mcc_generated_files/touch/mtouch_sensor.c"
  6887 ;; Parameters:    Size  Location     Type
  6888 ;;  sensor          1    wreg     enum E13072
  6889 ;; Auto vars:     Size  Location     Type
  6890 ;;  sensor          1   20[COMRAM] enum E13072
  6891 ;; Return value:  Size  Location     Type
  6892 ;;                  1    wreg      void 
  6893 ;; Registers used:
  6894 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6895 ;; Tracked objects:
  6896 ;;		On entry : 0/E
  6897 ;;		On exit  : 0/0
  6898 ;;		Unchanged: 0/0
  6899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  6900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6901 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6903 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6904 ;;Total ram usage:        1 bytes
  6905 ;; Hardware stack levels used: 1
  6906 ;; Hardware stack levels required when called: 6
  6907 ;; This function calls:
  6908 ;;		Nothing
  6909 ;; This function is called by:
  6910 ;;		_MTOUCH_Sensor_Initialize
  6911 ;; This function uses a non-reentrant model
  6912 ;;
  6913                           
  6914                           	psect	text59
  6915   002C84                     __ptext59:
  6916                           	callstack 0
  6917   002C84                     _MTOUCH_Sensor_Enable:
  6918                           	callstack 20
  6919                           
  6920                           ;incstack = 0
  6921                           ;MTOUCH_Sensor_Enable@sensor stored from wreg
  6922   002C84  6E15               	movwf	MTOUCH_Sensor_Enable@sensor^0,c
  6923                           
  6924                           ;mcc_generated_files/touch/mtouch_sensor.c: 733: void MTOUCH_Sensor_Enable(enum mtouch_s
      +                          ensor_names sensor);mcc_generated_files/touch/mtouch_sensor.c: 734: {;mcc_generated_file
      +                          s/touch/mtouch_sensor.c: 735:     if(sensor < 5u)
  6925   002C86  0E05               	movlw	5
  6926   002C88  6015               	cpfslt	MTOUCH_Sensor_Enable@sensor^0,c
  6927   002C8A  0C05               	retlw	5
  6928                           
  6929                           ;mcc_generated_files/touch/mtouch_sensor.c: 736:         mtouch_sensor[sensor].enabled =
      +                           1;
  6930   002C8C  5015               	movf	MTOUCH_Sensor_Enable@sensor^0,w,c
  6931   002C8E  EC6D  F00D         	call	PL113	;call to abstracted procedure
  6932   002C92  80DF               	bsf	indf2,0,c
  6933   002C94  0012               	return		;funcret
  6934   002C96                     __end_of_MTOUCH_Sensor_Enable:
  6935                           	callstack 0
  6936                           
  6937 ;; *************** function _MTOUCH_Button_InitializeAll *****************
  6938 ;; Defined at:
  6939 ;;		line 206 in file "mcc_generated_files/touch/mtouch_button.c"
  6940 ;; Parameters:    Size  Location     Type
  6941 ;;		None
  6942 ;; Auto vars:     Size  Location     Type
  6943 ;;  button          1   29[COMRAM] enum E13138
  6944 ;; Return value:  Size  Location     Type
  6945 ;;                  1    wreg      void 
  6946 ;; Registers used:
  6947 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6948 ;; Tracked objects:
  6949 ;;		On entry : 0/E
  6950 ;;		On exit  : 0/0
  6951 ;;		Unchanged: 0/0
  6952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  6953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6954 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6956 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  6957 ;;Total ram usage:        1 bytes
  6958 ;; Hardware stack levels used: 1
  6959 ;; Hardware stack levels required when called: 8
  6960 ;; This function calls:
  6961 ;;		_MTOUCH_Button_Initialize
  6962 ;;		_memcpy
  6963 ;; This function is called by:
  6964 ;;		_MTOUCH_Initialize
  6965 ;; This function uses a non-reentrant model
  6966 ;;
  6967                           
  6968                           	psect	text60
  6969   002986                     __ptext60:
  6970                           	callstack 0
  6971   002986                     _MTOUCH_Button_InitializeAll:
  6972                           	callstack 20
  6973                           
  6974                           ;mcc_generated_files/touch/mtouch_button.c: 208:     enum mtouch_button_names button;;mc
      +                          c_generated_files/touch/mtouch_button.c: 210:     memcpy(mtouch_button,mtouch_button_ini
      +                          t,sizeof(mtouch_button_init));
  6975                           
  6976                           ;incstack = 0
  6977   002986  0E00               	movlw	low _mtouch_button
  6978   002988  6E15               	movwf	memcpy@d1^0,c
  6979   00298A  0E01               	movlw	high _mtouch_button
  6980   00298C  6E16               	movwf	(memcpy@d1+1)^0,c
  6981   00298E  0E01               	movlw	low _mtouch_button_init
  6982   002990  6E17               	movwf	memcpy@s1^0,c
  6983   002992  6A19               	clrf	(memcpy@n+1)^0,c
  6984   002994  0E55               	movlw	85
  6985   002996  6E18               	movwf	memcpy@n^0,c
  6986   002998  EC87  F013         	call	_memcpy	;wreg free
  6987                           
  6988                           ;mcc_generated_files/touch/mtouch_button.c: 212:     for (button = 0; button < 5u; butto
      +                          n++)
  6989   00299C  6A1E               	clrf	MTOUCH_Button_InitializeAll@button^0,c
  6990   00299E                     l5948:
  6991                           
  6992                           ;mcc_generated_files/touch/mtouch_button.c: 213:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 214:         MTOUCH_Button_Initialize(button);
  6993   00299E  501E               	movf	MTOUCH_Button_InitializeAll@button^0,w,c
  6994   0029A0  EC39  F013         	call	_MTOUCH_Button_Initialize
  6995                           
  6996                           ;mcc_generated_files/touch/mtouch_button.c: 215:     }
  6997   0029A4  2A1E               	incf	MTOUCH_Button_InitializeAll@button^0,f,c
  6998   0029A6  0E04               	movlw	4
  6999   0029A8  641E               	cpfsgt	MTOUCH_Button_InitializeAll@button^0,c
  7000   0029AA  D7F9               	goto	l5948
  7001   0029AC  0C04               	retlw	4
  7002   0029AE                     __end_of_MTOUCH_Button_InitializeAll:
  7003                           	callstack 0
  7004                           
  7005 ;; *************** function _memcpy *****************
  7006 ;; Defined at:
  7007 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\memcpy.c"
  7008 ;; Parameters:    Size  Location     Type
  7009 ;;  d1              2   20[COMRAM] PTR void 
  7010 ;;		 -> mtouch_sensor(50), mtouch_button(85), 
  7011 ;;  s1              1   22[COMRAM] PTR const void 
  7012 ;;		 -> mtouch_sensor_init(50), mtouch_button_init(85), 
  7013 ;;  n               2   23[COMRAM] unsigned int 
  7014 ;; Auto vars:     Size  Location     Type
  7015 ;;  d               2   26[COMRAM] PTR unsigned char 
  7016 ;;		 -> mtouch_sensor(50), mtouch_button(85), 
  7017 ;;  s               1   28[COMRAM] PTR const unsigned char 
  7018 ;;		 -> mtouch_sensor_init(50), mtouch_button_init(85), 
  7019 ;;  tmp             1   25[COMRAM] unsigned char 
  7020 ;; Return value:  Size  Location     Type
  7021 ;;                  2   20[COMRAM] PTR void 
  7022 ;; Registers used:
  7023 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  7024 ;; Tracked objects:
  7025 ;;		On entry : 0/E
  7026 ;;		On exit  : 0/0
  7027 ;;		Unchanged: 0/0
  7028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  7029 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7030 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7032 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7033 ;;Total ram usage:        9 bytes
  7034 ;; Hardware stack levels used: 1
  7035 ;; Hardware stack levels required when called: 6
  7036 ;; This function calls:
  7037 ;;		Nothing
  7038 ;; This function is called by:
  7039 ;;		_MTOUCH_Button_InitializeAll
  7040 ;;		_MTOUCH_Sensor_InitializeAll
  7041 ;; This function uses a non-reentrant model
  7042 ;;
  7043                           
  7044                           	psect	text61
  7045   00270E                     __ptext61:
  7046                           	callstack 0
  7047   00270E                     _memcpy:
  7048                           	callstack 21
  7049                           
  7050                           ;incstack = 0
  7051   00270E  C017  F01D         	movff	memcpy@s1,memcpy@s
  7052   002712  C015  F01B         	movff	memcpy@d1,memcpy@d
  7053   002716  C016  F01C         	movff	memcpy@d1+1,memcpy@d+1
  7054   00271A  D012               	goto	l5738
  7055   00271C                     l5730:
  7056   00271C  C01D  FFF6         	movff	memcpy@s,tblptrl
  7057   002720                     	if	1	;There is more than 1 active tblptr byte
  7058   002720  0E0F               	movlw	high __smallconst
  7059   002722  6EF7               	movwf	tblptrh,c
  7060   002724                     	endif
  7061   002724                     	if	0	;tblptru may be non-zero
  7062   002724                     	endif
  7063   002724                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7064   002724  0E00               	movlw	low (__smallconst shr (0+16))
  7065   002726  6EF8               	movwf	tblptru,c
  7066   002728                     	endif
  7067   002728  0008               	tblrd		*
  7068   00272A  CFF5 F01A          	movff	tablat,memcpy@tmp
  7069   00272E  2A1D               	incf	memcpy@s^0,f,c
  7070   002730  C01B  FFD9         	movff	memcpy@d,fsr2l
  7071   002734  C01C  FFDA         	movff	memcpy@d+1,fsr2h
  7072   002738  C01A  FFDF         	movff	memcpy@tmp,indf2
  7073   00273C  4A1B               	infsnz	memcpy@d^0,f,c
  7074   00273E  2A1C               	incf	(memcpy@d+1)^0,f,c
  7075   002740                     l5738:
  7076   002740  0618               	decf	memcpy@n^0,f,c
  7077   002742  A0D8               	btfss	status,0,c
  7078   002744  0619               	decf	(memcpy@n+1)^0,f,c
  7079   002746  2818               	incf	memcpy@n^0,w,c
  7080   002748  E1E9               	bnz	l5730
  7081   00274A  2819               	incf	(memcpy@n+1)^0,w,c
  7082   00274C  E1E7               	bnz	l5730
  7083   00274E  0012               	return		;funcret
  7084   002750                     __end_of_memcpy:
  7085                           	callstack 0
  7086                           
  7087 ;; *************** function _MTOUCH_Button_ServiceAll *****************
  7088 ;; Defined at:
  7089 ;;		line 224 in file "mcc_generated_files/touch/mtouch_button.c"
  7090 ;; Parameters:    Size  Location     Type
  7091 ;;		None
  7092 ;; Auto vars:     Size  Location     Type
  7093 ;;  button          1    0[BANK0 ] enum E13138
  7094 ;; Return value:  Size  Location     Type
  7095 ;;                  1    wreg      void 
  7096 ;; Registers used:
  7097 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  7098 ;; Tracked objects:
  7099 ;;		On entry : 0/E
  7100 ;;		On exit  : 3F/0
  7101 ;;		Unchanged: 0/0
  7102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  7103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7104 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7106 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7107 ;;Total ram usage:        1 bytes
  7108 ;; Hardware stack levels used: 1
  7109 ;; Hardware stack levels required when called: 10
  7110 ;; This function calls:
  7111 ;;		_Button_Service
  7112 ;; This function is called by:
  7113 ;;		_MTOUCH_Service_Mainloop
  7114 ;; This function uses a non-reentrant model
  7115 ;;
  7116                           
  7117                           	psect	text62
  7118   002BBE                     __ptext62:
  7119                           	callstack 0
  7120   002BBE                     _MTOUCH_Button_ServiceAll:
  7121                           	callstack 19
  7122                           
  7123                           ;mcc_generated_files/touch/mtouch_button.c: 226:     enum mtouch_button_names button;;mc
      +                          c_generated_files/touch/mtouch_button.c: 229:     for (button = 0; button < 5u; button++
      +                          )
  7124                           
  7125                           ;incstack = 0
  7126   002BBE  0100               	movlb	0	; () banked
  7127   002BC0  6BE6               	clrf	MTOUCH_Button_ServiceAll@button& (0+255),b
  7128   002BC2                     l6098:
  7129                           
  7130                           ; BSR set to: 0
  7131                           ;mcc_generated_files/touch/mtouch_button.c: 230:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 231:         Button_Service(button);
  7132   002BC2  51E6               	movf	MTOUCH_Button_ServiceAll@button& (0+255),w,b
  7133   002BC4  ECF6  F00E         	call	_Button_Service
  7134                           
  7135                           ;mcc_generated_files/touch/mtouch_button.c: 232:     }
  7136   002BC8  0100               	movlb	0	; () banked
  7137   002BCA  2BE6               	incf	MTOUCH_Button_ServiceAll@button& (0+255),f,b
  7138                           
  7139                           ; BSR set to: 0
  7140   002BCC  0E04               	movlw	4
  7141   002BCE  65E6               	cpfsgt	MTOUCH_Button_ServiceAll@button& (0+255),b
  7142   002BD0  D7F8               	goto	l6098
  7143   002BD2  0C04               	retlw	4
  7144   002BD4                     __end_of_MTOUCH_Button_ServiceAll:
  7145                           	callstack 0
  7146                           
  7147 ;; *************** function _Button_Service *****************
  7148 ;; Defined at:
  7149 ;;		line 235 in file "mcc_generated_files/touch/mtouch_button.c"
  7150 ;; Parameters:    Size  Location     Type
  7151 ;;  name            1    wreg     enum E13138
  7152 ;; Auto vars:     Size  Location     Type
  7153 ;;  name            1   47[COMRAM] enum E13138
  7154 ;;  button          2   48[COMRAM] PTR struct .
  7155 ;;		 -> mtouch_button(85), 
  7156 ;; Return value:  Size  Location     Type
  7157 ;;                  1    wreg      void 
  7158 ;; Registers used:
  7159 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  7160 ;; Tracked objects:
  7161 ;;		On entry : 3F/0
  7162 ;;		On exit  : 0/0
  7163 ;;		Unchanged: 0/0
  7164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  7165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7166 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7167 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7168 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7169 ;;Total ram usage:        4 bytes
  7170 ;; Hardware stack levels used: 1
  7171 ;; Hardware stack levels required when called: 9
  7172 ;; This function calls:
  7173 ;;		_Button_Deviation_Update
  7174 ;;		_Button_Reading_Update
  7175 ;;		_Button_State_Initializing
  7176 ;;		_Button_State_NotPressed
  7177 ;;		_Button_State_Pressed
  7178 ;;		_MTOUCH_Button_Initialize
  7179 ;;		_MTOUCH_Sensor_isCalibrated
  7180 ;;		_MTOUCH_Sensor_wasSampled
  7181 ;; This function is called by:
  7182 ;;		_MTOUCH_Button_ServiceAll
  7183 ;; This function uses a non-reentrant model
  7184 ;;
  7185                           
  7186                           	psect	text63
  7187   001DEC                     __ptext63:
  7188                           	callstack 0
  7189   001DEC                     _Button_Service:
  7190                           	callstack 19
  7191                           
  7192                           ; BSR set to: 0
  7193                           ;incstack = 0
  7194                           ;Button_Service@name stored from wreg
  7195   001DEC  6E30               	movwf	Button_Service@name^0,c
  7196                           
  7197                           ;mcc_generated_files/touch/mtouch_button.c: 235: static void Button_Service(enum mtouch_
      +                          button_names name);mcc_generated_files/touch/mtouch_button.c: 236: {;mcc_generated_files
      +                          /touch/mtouch_button.c: 237:     mtouch_button_t* button = &mtouch_button[name];
  7198   001DEE  5030               	movf	Button_Service@name^0,w,c
  7199   001DF0  0D11               	mullw	17
  7200   001DF2  0E00               	movlw	low _mtouch_button
  7201   001DF4  24F3               	addwf	243,w,c
  7202   001DF6  6E31               	movwf	Button_Service@button^0,c
  7203   001DF8  0E01               	movlw	high _mtouch_button
  7204   001DFA  20F4               	addwfc	prodh,w,c
  7205   001DFC  6E32               	movwf	(Button_Service@button+1)^0,c
  7206                           
  7207                           ;mcc_generated_files/touch/mtouch_button.c: 239:     if (MTOUCH_Sensor_wasSampled(button
      +                          ->sensor) && MTOUCH_Sensor_isCalibrated(button->sensor))
  7208   001DFE  EE20 F001          	lfsr	2,1
  7209   001E02  D83F               	call	PL171	;call to abstracted procedure
  7210   001E04  ECFE  F015         	call	_MTOUCH_Sensor_wasSampled
  7211   001E08  0900               	iorlw	0
  7212   001E0A  B4D8               	btfsc	status,2,c
  7213   001E0C  0012               	return	
  7214   001E0E  EE20 F001          	lfsr	2,1
  7215   001E12  D837               	call	PL171	;call to abstracted procedure
  7216   001E14  EC08  F016         	call	_MTOUCH_Sensor_isCalibrated
  7217   001E18  0900               	iorlw	0
  7218   001E1A  B4D8               	btfsc	status,2,c
  7219   001E1C  0012               	return	
  7220                           
  7221                           ;mcc_generated_files/touch/mtouch_button.c: 240:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 241:         Button_Reading_Update(button);
  7222   001E1E  C031  F01C         	movff	Button_Service@button,Button_Reading_Update@button
  7223   001E22  C032  F01D         	movff	Button_Service@button+1,Button_Reading_Update@button+1
  7224   001E26  EC9A  F015         	call	_Button_Reading_Update	;wreg free
  7225                           
  7226                           ;mcc_generated_files/touch/mtouch_button.c: 242:         Button_Deviation_Update(button)
      +                          ;
  7227   001E2A  C031  F015         	movff	Button_Service@button,Button_Deviation_Update@button
  7228   001E2E  C032  F016         	movff	Button_Service@button+1,Button_Deviation_Update@button+1
  7229   001E32  EC7A  F00D         	call	_Button_Deviation_Update	;wreg free
  7230                           
  7231                           ;mcc_generated_files/touch/mtouch_button.c: 244:         if (button->state >= (uint8_t)(
      +                          sizeof(Button_StateMachine)/sizeof(button_statemachine_state_t)))
  7232   001E36  EE20 F002          	lfsr	2,2
  7233   001E3A  5031               	movf	Button_Service@button^0,w,c
  7234   001E3C  26D9               	addwf	fsr2l,f,c
  7235   001E3E  5032               	movf	(Button_Service@button+1)^0,w,c
  7236   001E40  22DA               	addwfc	fsr2h,f,c
  7237   001E42  0E02               	movlw	2
  7238   001E44  64DF               	cpfsgt	indf2,c
  7239   001E46  D007               	goto	l5980
  7240                           
  7241                           ;mcc_generated_files/touch/mtouch_button.c: 245:         {;mcc_generated_files/touch/mto
      +                          uch_button.c: 246:             MTOUCH_Button_Initialize(button->name);
  7242   001E48  C031  FFD9         	movff	Button_Service@button,fsr2l
  7243   001E4C  C032  FFDA         	movff	Button_Service@button+1,fsr2h
  7244   001E50  50DF               	movf	indf2,w,c
  7245   001E52  EC39  F013         	call	_MTOUCH_Button_Initialize
  7246   001E56                     l5980:
  7247                           
  7248                           ;mcc_generated_files/touch/mtouch_button.c: 248:         Button_StateMachine[(uint8_t)bu
      +                          tton->state](button);
  7249   001E56  C031  F028         	movff	Button_Service@button,Button_State_Pressed@button
  7250   001E5A  C032  F029         	movff	Button_Service@button+1,Button_State_Pressed@button+1
  7251   001E5E  EE20 F002          	lfsr	2,2
  7252   001E62  D80F               	call	PL171	;call to abstracted procedure
  7253   001E64  0D03               	mullw	3
  7254   001E66  50F3               	movf	243,w,c
  7255   001E68  0FC3               	addlw	low _Button_StateMachine
  7256   001E6A  6ED9               	movwf	fsr2l,c
  7257   001E6C  6ADA               	clrf	fsr2h,c
  7258   001E6E  0005               	push	
  7259   001E70  6EFA               	movwf	pclath,c
  7260   001E72  50DE               	movf	postinc2,w,c
  7261   001E74  6EFD               	movwf	tosl,c
  7262   001E76  50DE               	movf	postinc2,w,c
  7263   001E78  6EFE               	movwf	tosh,c
  7264   001E7A  50DE               	movf	postinc2,w,c
  7265   001E7C  6EFF               	movwf	tosu,c
  7266   001E7E  50FA               	movf	pclath,w,c
  7267   001E80  0012               	return		;indir
  7268   001E82                     __end_of_Button_Service:
  7269                           	callstack 0
  7270   001E82                     PL171:
  7271                           	callstack 19
  7272   001E82  5031               	movf	Button_Service@button^0,w,c
  7273   001E84  26D9               	addwf	fsr2l,f,c
  7274   001E86  5032               	movf	(Button_Service@button+1)^0,w,c
  7275   001E88  22DA               	addwfc	fsr2h,f,c
  7276   001E8A  50DF               	movf	indf2,w,c
  7277   001E8C  0012               	return	
  7278   001E8E                     __end_ofPL171:
  7279                           	callstack 0
  7280                           
  7281 ;; *************** function _MTOUCH_Sensor_wasSampled *****************
  7282 ;; Defined at:
  7283 ;;		line 851 in file "mcc_generated_files/touch/mtouch_sensor.c"
  7284 ;; Parameters:    Size  Location     Type
  7285 ;;  sensor          1    wreg     enum E13072
  7286 ;; Auto vars:     Size  Location     Type
  7287 ;;  sensor          1   20[COMRAM] enum E13072
  7288 ;; Return value:  Size  Location     Type
  7289 ;;                  1    wreg      _Bool 
  7290 ;; Registers used:
  7291 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7292 ;; Tracked objects:
  7293 ;;		On entry : 0/E
  7294 ;;		On exit  : 0/0
  7295 ;;		Unchanged: 0/0
  7296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  7297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7298 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7300 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7301 ;;Total ram usage:        1 bytes
  7302 ;; Hardware stack levels used: 1
  7303 ;; Hardware stack levels required when called: 6
  7304 ;; This function calls:
  7305 ;;		Nothing
  7306 ;; This function is called by:
  7307 ;;		_Button_Service
  7308 ;;		_MTOUCH_Sensor_isSamplingComplete
  7309 ;;		_Sensor_scheduleNextScan
  7310 ;; This function uses a non-reentrant model
  7311 ;;
  7312                           
  7313                           	psect	text64
  7314   002BFC                     __ptext64:
  7315                           	callstack 0
  7316   002BFC                     _MTOUCH_Sensor_wasSampled:
  7317                           	callstack 20
  7318                           
  7319                           ;incstack = 0
  7320                           ;MTOUCH_Sensor_wasSampled@sensor stored from wreg
  7321   002BFC  6E15               	movwf	MTOUCH_Sensor_wasSampled@sensor^0,c
  7322                           
  7323                           ;mcc_generated_files/touch/mtouch_sensor.c: 851: _Bool MTOUCH_Sensor_wasSampled(enum mto
      +                          uch_sensor_names sensor);mcc_generated_files/touch/mtouch_sensor.c: 852: {;mcc_generated
      +                          _files/touch/mtouch_sensor.c: 853:     if(sensor < 5u)
  7324   002BFE  0E05               	movlw	5
  7325   002C00  6015               	cpfslt	MTOUCH_Sensor_wasSampled@sensor^0,c
  7326   002C02  0C00               	retlw	0
  7327                           
  7328                           ;mcc_generated_files/touch/mtouch_sensor.c: 854:         return (_Bool)mtouch_sensor[sen
      +                          sor].sampled;
  7329   002C04  5015               	movf	MTOUCH_Sensor_wasSampled@sensor^0,w,c
  7330   002C06  EC6D  F00D         	call	PL113	;call to abstracted procedure
  7331   002C0A  B2DF               	btfsc	indf2,1,c
  7332   002C0C  0C01               	retlw	1
  7333   002C0E  0C00               	retlw	0
  7334   002C10                     __end_of_MTOUCH_Sensor_wasSampled:
  7335                           	callstack 0
  7336                           
  7337 ;; *************** function _MTOUCH_Sensor_isCalibrated *****************
  7338 ;; Defined at:
  7339 ;;		line 803 in file "mcc_generated_files/touch/mtouch_sensor.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;  sensor          1    wreg     enum E13072
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;  sensor          1   20[COMRAM] enum E13072
  7344 ;; Return value:  Size  Location     Type
  7345 ;;                  1    wreg      _Bool 
  7346 ;; Registers used:
  7347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  7353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7354 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7356 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7357 ;;Total ram usage:        1 bytes
  7358 ;; Hardware stack levels used: 1
  7359 ;; Hardware stack levels required when called: 6
  7360 ;; This function calls:
  7361 ;;		Nothing
  7362 ;; This function is called by:
  7363 ;;		_Button_Service
  7364 ;; This function uses a non-reentrant model
  7365 ;;
  7366                           
  7367                           	psect	text65
  7368   002C10                     __ptext65:
  7369                           	callstack 0
  7370   002C10                     _MTOUCH_Sensor_isCalibrated:
  7371                           	callstack 21
  7372                           
  7373                           ;incstack = 0
  7374                           ;MTOUCH_Sensor_isCalibrated@sensor stored from wreg
  7375   002C10  6E15               	movwf	MTOUCH_Sensor_isCalibrated@sensor^0,c
  7376                           
  7377                           ;mcc_generated_files/touch/mtouch_sensor.c: 803: _Bool MTOUCH_Sensor_isCalibrated(enum m
      +                          touch_sensor_names sensor);mcc_generated_files/touch/mtouch_sensor.c: 804: {;mcc_generat
      +                          ed_files/touch/mtouch_sensor.c: 805:     if(sensor < 5u)
  7378   002C12  0E05               	movlw	5
  7379   002C14  6015               	cpfslt	MTOUCH_Sensor_isCalibrated@sensor^0,c
  7380   002C16  0C00               	retlw	0
  7381                           
  7382                           ;mcc_generated_files/touch/mtouch_sensor.c: 806:         return (_Bool)mtouch_sensor[sen
      +                          sor].calibrated;
  7383   002C18  5015               	movf	MTOUCH_Sensor_isCalibrated@sensor^0,w,c
  7384   002C1A  EC6D  F00D         	call	PL113	;call to abstracted procedure
  7385   002C1E  B6DF               	btfsc	indf2,3,c
  7386   002C20  0C01               	retlw	1
  7387   002C22  0C00               	retlw	0
  7388   002C24                     __end_of_MTOUCH_Sensor_isCalibrated:
  7389                           	callstack 0
  7390                           
  7391 ;; *************** function _Button_State_NotPressed *****************
  7392 ;; Defined at:
  7393 ;;		line 272 in file "mcc_generated_files/touch/mtouch_button.c"
  7394 ;; Parameters:    Size  Location     Type
  7395 ;;  button          2   39[COMRAM] PTR struct .
  7396 ;;		 -> mtouch_button(85), 
  7397 ;; Auto vars:     Size  Location     Type
  7398 ;;		None
  7399 ;; Return value:  Size  Location     Type
  7400 ;;                  1    wreg      void 
  7401 ;; Registers used:
  7402 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7403 ;; Tracked objects:
  7404 ;;		On entry : 0/0
  7405 ;;		On exit  : 0/0
  7406 ;;		Unchanged: 0/0
  7407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  7408 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7410 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7411 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7412 ;;Total ram usage:        5 bytes
  7413 ;; Hardware stack levels used: 1
  7414 ;; Hardware stack levels required when called: 8
  7415 ;; This function calls:
  7416 ;;		_Button_Baseline_Update
  7417 ;;		_Button_Check_AKS_Block
  7418 ;;		_Button_DefaultCallback
  7419 ;;		_MTOUCH_Button_Initialize
  7420 ;; This function is called by:
  7421 ;;		_Button_Service
  7422 ;; This function uses a non-reentrant model
  7423 ;;
  7424                           
  7425                           	psect	text66
  7426   001458                     __ptext66:
  7427                           	callstack 0
  7428   001458                     _Button_State_NotPressed:
  7429                           	callstack 19
  7430                           
  7431                           ;mcc_generated_files/touch/mtouch_button.c: 272: static void Button_State_NotPressed(mto
      +                          uch_button_t* button);mcc_generated_files/touch/mtouch_button.c: 273: {;mcc_generated_fi
      +                          les/touch/mtouch_button.c: 275:     if ((button->deviation) < (mtouch_button_deviation_t
      +                          )(-button->threshold))
  7432                           
  7433                           ;incstack = 0
  7434   001458  EE20 F00F          	lfsr	2,15
  7435   00145C  D877               	call	PL117	;call to abstracted procedure
  7436   00145E  50DF               	movf	indf2,w,c
  7437   001460  0800               	sublw	0
  7438   001462  6E2A               	movwf	??_Button_State_NotPressed^0,c
  7439   001464  EE20 F00A          	lfsr	2,10
  7440   001468  D871               	call	PL117	;call to abstracted procedure
  7441   00146A  50DE               	movf	postinc2,w,c
  7442   00146C  0A80               	xorlw	128
  7443   00146E  6E2C               	movwf	(??_Button_State_NotPressed+2)^0,c
  7444   001470  502A               	movf	??_Button_State_NotPressed^0,w,c
  7445   001472  0A80               	xorlw	128
  7446   001474  5C2C               	subwf	(??_Button_State_NotPressed+2)^0,w,c
  7447   001476  E214               	bc	l5794
  7448                           
  7449                           ;mcc_generated_files/touch/mtouch_button.c: 276:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 277:         (button->counter)++;
  7450   001478  EE20 F00B          	lfsr	2,11
  7451   00147C  D867               	call	PL117	;call to abstracted procedure
  7452   00147E  D86B               	call	PL175	;call to abstracted procedure
  7453                           
  7454                           ;mcc_generated_files/touch/mtouch_button.c: 278:         if ((button->counter) > (mtouch
      +                          _button_statecounter_t)((mtouch_button_statecounter_t)64u))
  7455   001480  EE20 F00B          	lfsr	2,11
  7456   001484  D863               	call	PL117	;call to abstracted procedure
  7457   001486  0E01               	movlw	1
  7458   001488  50DB               	movf	plusw2,w,c
  7459   00148A  E103               	bnz	u5080
  7460   00148C  0E41               	movlw	65
  7461   00148E  5CDE               	subwf	postinc2,w,c
  7462   001490  E333               	bnc	l636
  7463   001492                     u5080:
  7464                           
  7465                           ;mcc_generated_files/touch/mtouch_button.c: 279:         {;mcc_generated_files/touch/mto
      +                          uch_button.c: 280:             button->counter = (mtouch_button_statecounter_t)0;
  7466   001492  EE20 F00B          	lfsr	2,11
  7467   001496  D85A               	call	PL117	;call to abstracted procedure
  7468                           
  7469                           ;mcc_generated_files/touch/mtouch_button.c: 281:             MTOUCH_Button_Initialize(bu
      +                          tton->name);
  7470   001498  D862               	call	PL181	;call to abstracted procedure
  7471   00149A  EC39  F013         	call	_MTOUCH_Button_Initialize
  7472   00149E  D02C               	goto	l636
  7473   0014A0                     l5794:
  7474   0014A0  EE20 F00A          	lfsr	2,10
  7475   0014A4  D853               	call	PL117	;call to abstracted procedure
  7476   0014A6  50DF               	movf	indf2,w,c
  7477   0014A8  6E2A               	movwf	??_Button_State_NotPressed^0,c
  7478   0014AA  EE20 F00F          	lfsr	2,15
  7479   0014AE  D84E               	call	PL117	;call to abstracted procedure
  7480   0014B0  50DF               	movf	indf2,w,c
  7481   0014B2  80D8               	bsf	status,0,c
  7482   0014B4  84D8               	bsf	status,2,c
  7483   0014B6  AE2A               	btfss	??_Button_State_NotPressed^0,7,c
  7484   0014B8  5C2A               	subwf	??_Button_State_NotPressed^0,w,c
  7485   0014BA  A0D8               	btfss	status,0,c
  7486   0014BC  84D8               	bsf	status,2,c
  7487   0014BE  E017               	bz	l5806
  7488                           
  7489                           ;mcc_generated_files/touch/mtouch_button.c: 286:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 287:         if(button->aks_group != NO_AKS_GROUP)
  7490   0014C0  EE20 F003          	lfsr	2,3
  7491   0014C4  D843               	call	PL117	;call to abstracted procedure
  7492   0014C6  50DF               	movf	indf2,w,c
  7493   0014C8  E006               	bz	l5802
  7494                           
  7495                           ;mcc_generated_files/touch/mtouch_button.c: 288:         {;mcc_generated_files/touch/mto
      +                          uch_button.c: 289:             if(Button_Check_AKS_Block(button))
  7496   0014CA  D851               	call	PL219	;call to abstracted procedure
  7497   0014CC  EC38  F00C         	call	_Button_Check_AKS_Block	;wreg free
  7498   0014D0  0900               	iorlw	0
  7499   0014D2  E001               	bz	l5802
  7500   0014D4  0012               	return	
  7501   0014D6                     l5802:
  7502                           
  7503                           ;mcc_generated_files/touch/mtouch_button.c: 293:         button->state = MTOUCH_BUTTON_S
      +                          TATE_pressed;
  7504   0014D6  EE20 F002          	lfsr	2,2
  7505   0014DA  D838               	call	PL117	;call to abstracted procedure
  7506   0014DC  0E02               	movlw	2
  7507   0014DE  6EDF               	movwf	indf2,c
  7508                           
  7509                           ;mcc_generated_files/touch/mtouch_button.c: 294:         button->counter = (mtouch_butto
      +                          n_statecounter_t)0;
  7510   0014E0  EE20 F00B          	lfsr	2,11
  7511   0014E4  D833               	call	PL117	;call to abstracted procedure
  7512                           
  7513                           ;mcc_generated_files/touch/mtouch_button.c: 295:         callback_pressed(button->name);
  7514   0014E6  D83B               	call	PL181	;call to abstracted procedure
  7515   0014E8  ECA0  F016         	call	_Button_DefaultCallback
  7516                           
  7517                           ;mcc_generated_files/touch/mtouch_button.c: 296:     }
  7518   0014EC  D005               	goto	l636
  7519   0014EE                     l5806:
  7520                           
  7521                           ;mcc_generated_files/touch/mtouch_button.c: 298:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 300:         button->counter = (mtouch_button_statecounter_t)0;
  7522   0014EE  EE20 F00B          	lfsr	2,11
  7523   0014F2  D82C               	call	PL117	;call to abstracted procedure
  7524   0014F4  6ADE               	clrf	postinc2,c
  7525   0014F6  6ADD               	clrf	postdec2,c
  7526   0014F8                     l636:
  7527                           
  7528                           ;mcc_generated_files/touch/mtouch_button.c: 305:     if(button->aks_group != NO_AKS_GROU
      +                          P)
  7529   0014F8  EE20 F003          	lfsr	2,3
  7530   0014FC  D827               	call	PL117	;call to abstracted procedure
  7531   0014FE  50DF               	movf	indf2,w,c
  7532   001500  E00C               	bz	l5814
  7533                           
  7534                           ;mcc_generated_files/touch/mtouch_button.c: 306:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 307:         if(Button_Check_AKS_Block(button))
  7535   001502  D835               	call	PL219	;call to abstracted procedure
  7536   001504  EC38  F00C         	call	_Button_Check_AKS_Block	;wreg free
  7537   001508  0900               	iorlw	0
  7538   00150A  E007               	bz	l5814
  7539                           
  7540                           ;mcc_generated_files/touch/mtouch_button.c: 308:         {;mcc_generated_files/touch/mto
      +                          uch_button.c: 309:             button->baseline_count = (mtouch_button_baselinecounter_t
      +                          )
  7541   00150C  EE20 F00D          	lfsr	2,13
  7542   001510  D81D               	call	PL117	;call to abstracted procedure
  7543   001512  68DE               	setf	postinc2,c
  7544   001514  0EFB               	movlw	251
  7545   001516  6EDD               	movwf	postdec2,c
  7546   001518  0CFB               	retlw	251
  7547   00151A                     l5814:
  7548                           
  7549                           ;mcc_generated_files/touch/mtouch_button.c: 315:     (button->baseline_count)++;
  7550   00151A  EE20 F00D          	lfsr	2,13
  7551   00151E  D816               	call	PL117	;call to abstracted procedure
  7552   001520  2ADE               	incf	postinc2,f,c
  7553   001522  0E00               	movlw	0
  7554   001524  22DD               	addwfc	postdec2,f,c
  7555                           
  7556                           ;mcc_generated_files/touch/mtouch_button.c: 316:     if ((button->baseline_count) == ((m
      +                          touch_button_baselinecounter_t)64u))
  7557   001526  EE20 F00D          	lfsr	2,13
  7558   00152A  D810               	call	PL117	;call to abstracted procedure
  7559   00152C  0E40               	movlw	64
  7560   00152E  18DE               	xorwf	postinc2,w,c
  7561   001530  10DE               	iorwf	postinc2,w,c
  7562   001532  A4D8               	btfss	status,2,c
  7563   001534  0012               	return	
  7564                           
  7565                           ;mcc_generated_files/touch/mtouch_button.c: 317:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 318:         button->baseline_count = (mtouch_button_baselinecounter_t)0;
  7566   001536  EE20 F00D          	lfsr	2,13
  7567   00153A  D808               	call	PL117	;call to abstracted procedure
  7568   00153C  6ADE               	clrf	postinc2,c
  7569   00153E  6ADD               	clrf	postdec2,c
  7570                           
  7571                           ;mcc_generated_files/touch/mtouch_button.c: 319:         Button_Baseline_Update(button);
  7572   001540  C028  F015         	movff	Button_State_NotPressed@button,Button_Baseline_Update@button
  7573   001544  C029  F016         	movff	Button_State_NotPressed@button+1,Button_Baseline_Update@button+1
  7574   001548  EFE5  F00F         	goto	_Button_Baseline_Update	;wreg free
  7575   00154C                     __end_of_Button_State_NotPressed:
  7576                           	callstack 0
  7577   00154C                     PL117:
  7578                           	callstack 19
  7579   00154C  5028               	movf	Button_State_NotPressed@button^0,w,c
  7580   00154E  26D9               	addwf	fsr2l,f,c
  7581   001550  5029               	movf	(Button_State_NotPressed@button+1)^0,w,c
  7582   001552  22DA               	addwfc	fsr2h,f,c
  7583   001554  0012               	return	
  7584   001556                     __end_ofPL117:
  7585                           	callstack 0
  7586   001556                     PL175:
  7587                           	callstack 19
  7588   001556  2ADE               	incf	postinc2,f,c
  7589   001558  0E00               	movlw	0
  7590   00155A  22DD               	addwfc	postdec2,f,c
  7591   00155C  0C00               	retlw	0
  7592   00155E                     __end_ofPL175:
  7593                           	callstack 0
  7594   00155E                     PL181:
  7595                           	callstack 19
  7596   00155E  6ADE               	clrf	postinc2,c
  7597   001560  6ADD               	clrf	postdec2,c
  7598   001562  C028  FFD9         	movff	Button_State_NotPressed@button,fsr2l
  7599   001566  C029  FFDA         	movff	Button_State_NotPressed@button+1,fsr2h
  7600   00156A  50DF               	movf	indf2,w,c
  7601   00156C  0012               	return	
  7602   00156E                     __end_ofPL181:
  7603                           	callstack 0
  7604   00156E                     PL219:
  7605                           	callstack 19
  7606   00156E  C028  F01D         	movff	Button_State_NotPressed@button,Button_Check_AKS_Block@button
  7607   001572  C029  F01E         	movff	Button_State_NotPressed@button+1,Button_Check_AKS_Block@button+1
  7608   001576  0012               	return	
  7609   001578                     __end_ofPL219:
  7610                           	callstack 0
  7611                           
  7612 ;; *************** function _Button_State_Initializing *****************
  7613 ;; Defined at:
  7614 ;;		line 252 in file "mcc_generated_files/touch/mtouch_button.c"
  7615 ;; Parameters:    Size  Location     Type
  7616 ;;  button          2   39[COMRAM] PTR struct .
  7617 ;;		 -> mtouch_button(85), 
  7618 ;; Auto vars:     Size  Location     Type
  7619 ;;		None
  7620 ;; Return value:  Size  Location     Type
  7621 ;;                  1    wreg      void 
  7622 ;; Registers used:
  7623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7624 ;; Tracked objects:
  7625 ;;		On entry : 0/0
  7626 ;;		On exit  : 0/0
  7627 ;;		Unchanged: 0/0
  7628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  7629 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7631 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7632 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7633 ;;Total ram usage:        6 bytes
  7634 ;; Hardware stack levels used: 1
  7635 ;; Hardware stack levels required when called: 8
  7636 ;; This function calls:
  7637 ;;		_Button_Baseline_Initialize
  7638 ;;		_Button_Baseline_Update
  7639 ;; This function is called by:
  7640 ;;		_Button_Service
  7641 ;; This function uses a non-reentrant model
  7642 ;;
  7643                           
  7644                           	psect	text67
  7645   001F2E                     __ptext67:
  7646                           	callstack 0
  7647   001F2E                     _Button_State_Initializing:
  7648                           	callstack 0
  7649                           
  7650                           ;mcc_generated_files/touch/mtouch_button.c: 252: static void Button_State_Initializing(m
      +                          touch_button_t* button);mcc_generated_files/touch/mtouch_button.c: 253: {;mcc_generated_
      +                          files/touch/mtouch_button.c: 255:     if ((button->counter) <= (mtouch_button_statecount
      +                          er_t)((mtouch_button_baselinecounter_t)16u)/2)
  7651                           
  7652                           ;incstack = 0
  7653   001F2E  D841               	call	PL133	;call to abstracted procedure
  7654   001F30  0E01               	movlw	1
  7655   001F32  50DB               	movf	plusw2,w,c
  7656   001F34  E10A               	bnz	l5778
  7657   001F36  0E09               	movlw	9
  7658   001F38  5CDE               	subwf	postinc2,w,c
  7659   001F3A  E207               	bc	l5778
  7660                           
  7661                           ;mcc_generated_files/touch/mtouch_button.c: 256:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 257:         Button_Baseline_Initialize(button);
  7662   001F3C  C028  F018         	movff	Button_State_Initializing@button,Button_Baseline_Initialize@button
  7663   001F40  C029  F019         	movff	Button_State_Initializing@button+1,Button_Baseline_Initialize@button+1
  7664   001F44  ECE7  F012         	call	_Button_Baseline_Initialize	;wreg free
  7665                           
  7666                           ;mcc_generated_files/touch/mtouch_button.c: 258:     } else {
  7667   001F48  D006               	goto	l5780
  7668   001F4A                     l5778:
  7669                           
  7670                           ;mcc_generated_files/touch/mtouch_button.c: 259:         Button_Baseline_Update(button);
  7671   001F4A  C028  F015         	movff	Button_State_Initializing@button,Button_Baseline_Update@button
  7672   001F4E  C029  F016         	movff	Button_State_Initializing@button+1,Button_Baseline_Update@button+1
  7673   001F52  ECE5  F00F         	call	_Button_Baseline_Update	;wreg free
  7674   001F56                     l5780:
  7675                           
  7676                           ;mcc_generated_files/touch/mtouch_button.c: 263:     (button->counter)++;
  7677   001F56  D82D               	call	PL133	;call to abstracted procedure
  7678   001F58  ECAB  F00A         	call	PL175	;call to abstracted procedure
  7679                           
  7680                           ;mcc_generated_files/touch/mtouch_button.c: 264:     if ((button->counter) >= (mtouch_bu
      +                          tton_statecounter_t)((mtouch_button_baselinecounter_t)16u))
  7681   001F5C  D82A               	call	PL133	;call to abstracted procedure
  7682   001F5E  0E01               	movlw	1
  7683   001F60  50DB               	movf	plusw2,w,c
  7684   001F62  E104               	bnz	u5050
  7685   001F64  0E10               	movlw	16
  7686   001F66  5CDE               	subwf	postinc2,w,c
  7687   001F68  A0D8               	btfss	status,0,c
  7688   001F6A  0012               	return	
  7689   001F6C                     u5050:
  7690                           
  7691                           ;mcc_generated_files/touch/mtouch_button.c: 265:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 266:         button->reading = (mtouch_button_reading_t)((button->baseline)>>(
      +                          (uint8_t)4u));
  7692   001F6C  EE20 F006          	lfsr	2,6
  7693   001F70  D827               	call	PL149	;call to abstracted procedure
  7694   001F72  CFDE F02A          	movff	postinc2,??_Button_State_Initializing
  7695   001F76  CFDE F02B          	movff	postinc2,??_Button_State_Initializing+1
  7696   001F7A  CFDE F02C          	movff	postinc2,??_Button_State_Initializing+2
  7697   001F7E  CFDE F02D          	movff	postinc2,??_Button_State_Initializing+3
  7698   001F82  0E05               	movlw	5
  7699   001F84  D005               	goto	u5060
  7700   001F86                     u5065:
  7701   001F86  90D8               	bcf	status,0,c
  7702   001F88  322D               	rrcf	(??_Button_State_Initializing+3)^0,f,c
  7703   001F8A  322C               	rrcf	(??_Button_State_Initializing+2)^0,f,c
  7704   001F8C  322B               	rrcf	(??_Button_State_Initializing+1)^0,f,c
  7705   001F8E  322A               	rrcf	??_Button_State_Initializing^0,f,c
  7706   001F90                     u5060:
  7707   001F90  2EE8               	decfsz	wreg,f,c
  7708   001F92  D7F9               	goto	u5065
  7709   001F94  EE20 F004          	lfsr	2,4
  7710   001F98  D813               	call	PL149	;call to abstracted procedure
  7711   001F9A  C02A  FFDE         	movff	??_Button_State_Initializing,postinc2
  7712   001F9E  C02B  FFDD         	movff	??_Button_State_Initializing+1,postdec2
  7713                           
  7714                           ;mcc_generated_files/touch/mtouch_button.c: 267:         button->state = MTOUCH_BUTTON_S
      +                          TATE_notPressed;
  7715   001FA2  EE20 F002          	lfsr	2,2
  7716   001FA6  D80C               	call	PL149	;call to abstracted procedure
  7717   001FA8  0E01               	movlw	1
  7718   001FAA  6EDF               	movwf	indf2,c
  7719                           
  7720                           ;mcc_generated_files/touch/mtouch_button.c: 268:         button->counter = (mtouch_butto
      +                          n_statecounter_t)0;
  7721   001FAC  D802               	call	PL133	;call to abstracted procedure
  7722   001FAE  EF82  F012         	goto	PL241	;call to abstracted procedure
  7723   001FB2                     __end_of_Button_State_Initializing:
  7724                           	callstack 0
  7725   001FB2                     PL133:
  7726                           	callstack 19
  7727   001FB2  EE20 F00B          	lfsr	2,11
  7728   001FB6  5028               	movf	Button_State_Initializing@button^0,w,c
  7729   001FB8  26D9               	addwf	fsr2l,f,c
  7730   001FBA  5029               	movf	(Button_State_Initializing@button+1)^0,w,c
  7731   001FBC  22DA               	addwfc	fsr2h,f,c
  7732   001FBE  0012               	return	
  7733   001FC0                     __end_ofPL133:
  7734                           	callstack 0
  7735   001FC0                     PL149:
  7736                           	callstack 19
  7737   001FC0  5028               	movf	Button_State_Initializing@button^0,w,c
  7738   001FC2  26D9               	addwf	fsr2l,f,c
  7739   001FC4  5029               	movf	(Button_State_Initializing@button+1)^0,w,c
  7740   001FC6  22DA               	addwfc	fsr2h,f,c
  7741   001FC8  0012               	return	
  7742   001FCA                     __end_ofPL149:
  7743                           	callstack 0
  7744                           
  7745 ;; *************** function _Button_State_Pressed *****************
  7746 ;; Defined at:
  7747 ;;		line 323 in file "mcc_generated_files/touch/mtouch_button.c"
  7748 ;; Parameters:    Size  Location     Type
  7749 ;;  button          2   39[COMRAM] PTR struct .
  7750 ;;		 -> mtouch_button(85), 
  7751 ;; Auto vars:     Size  Location     Type
  7752 ;;		None
  7753 ;; Return value:  Size  Location     Type
  7754 ;;                  1    wreg      void 
  7755 ;; Registers used:
  7756 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  7757 ;; Tracked objects:
  7758 ;;		On entry : 0/0
  7759 ;;		On exit  : 0/0
  7760 ;;		Unchanged: 0/0
  7761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  7762 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7764 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7765 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7766 ;;Total ram usage:        7 bytes
  7767 ;; Hardware stack levels used: 1
  7768 ;; Hardware stack levels required when called: 8
  7769 ;; This function calls:
  7770 ;;		_Button_DefaultCallback
  7771 ;;		_MTOUCH_Button_Initialize
  7772 ;;		_ProcessButtonRelease
  7773 ;; This function is called by:
  7774 ;;		_Button_Service
  7775 ;; This function uses a non-reentrant model
  7776 ;;
  7777                           
  7778                           	psect	text68
  7779   001E8E                     __ptext68:
  7780                           	callstack 0
  7781   001E8E                     _Button_State_Pressed:
  7782                           	callstack 19
  7783                           
  7784                           ;mcc_generated_files/touch/mtouch_button.c: 323: static void Button_State_Pressed(mtouch
      +                          _button_t* button);mcc_generated_files/touch/mtouch_button.c: 324: {;mcc_generated_files
      +                          /touch/mtouch_button.c: 326:     if ((button->counter) >= ((mtouch_button_statecounter_t
      +                          )1000u))
  7785                           
  7786                           ;incstack = 0
  7787   001E8E  EE20 F00B          	lfsr	2,11
  7788   001E92  D83D               	call	PL147	;call to abstracted procedure
  7789   001E94  0EE8               	movlw	232
  7790   001E96  5CDE               	subwf	postinc2,w,c
  7791   001E98  0E03               	movlw	3
  7792   001E9A  58DE               	subwfb	postinc2,w,c
  7793   001E9C  E306               	bnc	l5826
  7794                           
  7795                           ;mcc_generated_files/touch/mtouch_button.c: 327:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 328:         MTOUCH_Button_Initialize(button->name);
  7796   001E9E  D83C               	call	PL169	;call to abstracted procedure
  7797   001EA0  EC39  F013         	call	_MTOUCH_Button_Initialize
  7798                           
  7799                           ;mcc_generated_files/touch/mtouch_button.c: 329:         callback_notPressed(button->nam
      +                          e);
  7800   001EA4  0005               	push	
  7801   001EA6  6EFA               	movwf	pclath,c
  7802   001EA8  D029               	goto	L12
  7803   001EAA                     l5826:
  7804   001EAA  EE20 F00F          	lfsr	2,15
  7805   001EAE  D82F               	call	PL147	;call to abstracted procedure
  7806   001EB0  50DF               	movf	indf2,w,c
  7807   001EB2  6E2A               	movwf	??_Button_State_Pressed^0,c
  7808   001EB4  90D8               	bcf	status,0,c
  7809   001EB6  322A               	rrcf	??_Button_State_Pressed^0,f,c
  7810   001EB8  EE20 F00F          	lfsr	2,15
  7811   001EBC  D828               	call	PL147	;call to abstracted procedure
  7812   001EBE  50DF               	movf	indf2,w,c
  7813   001EC0  6E2B               	movwf	(??_Button_State_Pressed+1)^0,c
  7814   001EC2  502A               	movf	??_Button_State_Pressed^0,w,c
  7815   001EC4  5C2B               	subwf	(??_Button_State_Pressed+1)^0,w,c
  7816   001EC6  6E2C               	movwf	(??_Button_State_Pressed+2)^0,c
  7817   001EC8  EE20 F00A          	lfsr	2,10
  7818   001ECC  D820               	call	PL147	;call to abstracted procedure
  7819   001ECE  50DE               	movf	postinc2,w,c
  7820   001ED0  0A80               	xorlw	128
  7821   001ED2  6E2E               	movwf	(??_Button_State_Pressed+4)^0,c
  7822   001ED4  502C               	movf	(??_Button_State_Pressed+2)^0,w,c
  7823   001ED6  0A80               	xorlw	128
  7824   001ED8  5C2E               	subwf	(??_Button_State_Pressed+4)^0,w,c
  7825   001EDA  B0D8               	btfsc	status,0,c
  7826   001EDC  0012               	return	
  7827                           
  7828                           ;mcc_generated_files/touch/mtouch_button.c: 334:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 335:         button->state = MTOUCH_BUTTON_STATE_notPressed;
  7829   001EDE  EE20 F002          	lfsr	2,2
  7830   001EE2  D815               	call	PL147	;call to abstracted procedure
  7831   001EE4  0E01               	movlw	1
  7832   001EE6  6EDF               	movwf	indf2,c
  7833                           
  7834                           ;mcc_generated_files/touch/mtouch_button.c: 336:         button->counter = (mtouch_butto
      +                          n_statecounter_t)0;
  7835   001EE8  EE20 F00B          	lfsr	2,11
  7836   001EEC  D810               	call	PL147	;call to abstracted procedure
  7837                           
  7838                           ;mcc_generated_files/touch/mtouch_button.c: 337:         button->baseline_count = (mtouc
      +                          h_button_baselinecounter_t)((0xffff))-((mtouch_button_baselinecounter_t)1024u);
  7839   001EEE  D81A               	call	PL227	;call to abstracted procedure
  7840   001EF0  D80E               	call	PL147	;call to abstracted procedure
  7841   001EF2  68DE               	setf	postinc2,c
  7842   001EF4  0EFB               	movlw	251
  7843   001EF6  6EDD               	movwf	postdec2,c
  7844                           
  7845                           ;mcc_generated_files/touch/mtouch_button.c: 338:         callback_notPressed(button->nam
      +                          e);
  7846   001EF8  0005               	push	
  7847   001EFA  6EFA               	movwf	pclath,c
  7848   001EFC                     L12:
  7849   001EFC  0100               	movlb	0	; () banked
  7850   001EFE  51D2               	movf	_callback_notPressed& (0+255),w,b
  7851   001F00  6EFD               	movwf	tosl,c
  7852   001F02  51D3               	movf	(_callback_notPressed+1)& (0+255),w,b
  7853   001F04  6EFE               	movwf	tosh,c
  7854   001F06  51D4               	movf	(_callback_notPressed+2)& (0+255),w,b
  7855   001F08  6EFF               	movwf	tosu,c
  7856   001F0A  50FA               	movf	pclath,w,c
  7857   001F0C  D005               	goto	PL169	;call to abstracted procedure
  7858   001F0E                     __end_of_Button_State_Pressed:
  7859                           	callstack 0
  7860   001F0E                     PL147:
  7861                           	callstack 19
  7862   001F0E  5028               	movf	Button_State_Pressed@button^0,w,c
  7863   001F10  26D9               	addwf	fsr2l,f,c
  7864   001F12  5029               	movf	(Button_State_Pressed@button+1)^0,w,c
  7865   001F14  22DA               	addwfc	fsr2h,f,c
  7866   001F16  0012               	return	
  7867   001F18                     __end_ofPL147:
  7868                           	callstack 0
  7869   001F18                     PL169:
  7870                           	callstack 19
  7871   001F18  C028  FFD9         	movff	Button_State_Pressed@button,fsr2l
  7872   001F1C  C029  FFDA         	movff	Button_State_Pressed@button+1,fsr2h
  7873   001F20  50DF               	movf	indf2,w,c
  7874   001F22  0012               	return	
  7875   001F24                     __end_ofPL169:
  7876                           	callstack 0
  7877   001F24                     PL227:
  7878                           	callstack 20
  7879   001F24  6ADE               	clrf	postinc2,c
  7880   001F26  6ADD               	clrf	postdec2,c
  7881   001F28  EE20 F00D          	lfsr	2,13
  7882   001F2C  0012               	return	
  7883   001F2E                     __end_ofPL227:
  7884                           	callstack 0
  7885                           
  7886 ;; *************** function _Button_DefaultCallback *****************
  7887 ;; Defined at:
  7888 ;;		line 621 in file "mcc_generated_files/touch/mtouch_button.c"
  7889 ;; Parameters:    Size  Location     Type
  7890 ;;  button          1    wreg     enum E13138
  7891 ;; Auto vars:     Size  Location     Type
  7892 ;;  button          1    0[COMRAM] enum E13138
  7893 ;; Return value:  Size  Location     Type
  7894 ;;                  1    wreg      void 
  7895 ;; Registers used:
  7896 ;;		wreg
  7897 ;; Tracked objects:
  7898 ;;		On entry : 0/0
  7899 ;;		On exit  : 0/0
  7900 ;;		Unchanged: 0/0
  7901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  7902 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7903 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7904 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7905 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7906 ;;Total ram usage:        0 bytes
  7907 ;; Hardware stack levels used: 1
  7908 ;; Hardware stack levels required when called: 6
  7909 ;; This function calls:
  7910 ;;		Nothing
  7911 ;; This function is called by:
  7912 ;;		_Button_State_NotPressed
  7913 ;;		_Button_State_Pressed
  7914 ;; This function uses a non-reentrant model
  7915 ;;
  7916                           
  7917                           	psect	text69
  7918   002D40                     __ptext69:
  7919                           	callstack 0
  7920   002D40                     _Button_DefaultCallback:
  7921                           	callstack 20
  7922                           
  7923                           ;incstack = 0
  7924   002D40  0012               	return		;funcret
  7925   002D42                     __end_of_Button_DefaultCallback:
  7926                           	callstack 0
  7927                           
  7928 ;; *************** function _ProcessButtonRelease *****************
  7929 ;; Defined at:
  7930 ;;		line 127 in file "application.c"
  7931 ;; Parameters:    Size  Location     Type
  7932 ;;  button          1    wreg     enum E13104
  7933 ;; Auto vars:     Size  Location     Type
  7934 ;;  button          1   22[COMRAM] enum E13104
  7935 ;; Return value:  Size  Location     Type
  7936 ;;                  1    wreg      void 
  7937 ;; Registers used:
  7938 ;;		wreg, status,2, status,0
  7939 ;; Tracked objects:
  7940 ;;		On entry : 3F/0
  7941 ;;		On exit  : 0/0
  7942 ;;		Unchanged: 0/0
  7943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  7944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7945 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7946 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7947 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  7948 ;;Total ram usage:        3 bytes
  7949 ;; Hardware stack levels used: 1
  7950 ;; Hardware stack levels required when called: 6
  7951 ;; This function calls:
  7952 ;;		Nothing
  7953 ;; This function is called by:
  7954 ;;		_main
  7955 ;;		_Button_State_Pressed
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           	psect	text70
  7960   0028D0                     __ptext70:
  7961                           	callstack 0
  7962   0028D0                     _ProcessButtonRelease:
  7963                           	callstack 20
  7964                           
  7965                           ;incstack = 0
  7966                           ;ProcessButtonRelease@button stored from wreg
  7967   0028D0  6E17               	movwf	ProcessButtonRelease@button^0,c
  7968                           
  7969                           ;application.c: 127: void ProcessButtonRelease(enum mtouch_button_names button);applicat
      +                          ion.c: 128: {;application.c: 129:     switch (button)
  7970   0028D2  D00B               	goto	l5708
  7971   0028D4                     l5702:
  7972                           
  7973                           ;application.c: 132:             keyInfo.key = BUTTON1;
  7974   0028D4  0E01               	movlw	1
  7975   0028D6  0100               	movlb	0	; () banked
  7976   0028D8  6F8D               	movwf	_keyInfo& (0+255),b
  7977                           
  7978                           ;application.c: 133:             keyInfo.keyStatus = KEY_RELEASED;
  7979   0028DA  0E02               	movlw	2
  7980   0028DC  6F8E               	movwf	(_keyInfo+1)& (0+255),b
  7981                           
  7982                           ;application.c: 134:             break;
  7983   0028DE  0C02               	retlw	2
  7984   0028E0                     l5704:
  7985                           
  7986                           ;application.c: 137:             keyInfo.key = BUTTON2;
  7987   0028E0  0E02               	movlw	2
  7988   0028E2  0100               	movlb	0	; () banked
  7989   0028E4  6F8D               	movwf	_keyInfo& (0+255),b
  7990                           
  7991                           ;application.c: 138:             keyInfo.keyStatus = KEY_RELEASED;
  7992   0028E6  6F8E               	movwf	(_keyInfo+1)& (0+255),b
  7993                           
  7994                           ;application.c: 139:             break;
  7995   0028E8  0C02               	retlw	2
  7996   0028EA                     l5708:
  7997   0028EA  5017               	movf	ProcessButtonRelease@button^0,w,c
  7998   0028EC  6E15               	movwf	??_ProcessButtonRelease^0,c
  7999   0028EE  6A16               	clrf	(??_ProcessButtonRelease+1)^0,c
  8000                           
  8001                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8002                           ; Switch size 1, requested type "space"
  8003                           ; Number of cases is 1, Range of values is 0 to 0
  8004                           ; switch strategies available:
  8005                           ; Name         Instructions Cycles
  8006                           ; simple_byte            4     3 (average)
  8007                           ;	Chosen strategy is simple_byte
  8008   0028F0  5016               	movf	(??_ProcessButtonRelease+1)^0,w,c
  8009   0028F2  A4D8               	btfss	status,2,c
  8010   0028F4  0012               	return	
  8011                           
  8012                           ; Switch size 1, requested type "space"
  8013                           ; Number of cases is 2, Range of values is 0 to 1
  8014                           ; switch strategies available:
  8015                           ; Name         Instructions Cycles
  8016                           ; simple_byte            7     4 (average)
  8017                           ;	Chosen strategy is simple_byte
  8018   0028F6  5015               	movf	??_ProcessButtonRelease^0,w,c
  8019   0028F8  E0ED               	bz	l5702
  8020   0028FA  0A01               	xorlw	1	; case 1
  8021   0028FC  E0F1               	bz	l5704
  8022   0028FE  0012               	return		;funcret
  8023   002900                     __end_of_ProcessButtonRelease:
  8024                           	callstack 0
  8025                           
  8026 ;; *************** function _MTOUCH_Button_Initialize *****************
  8027 ;; Defined at:
  8028 ;;		line 194 in file "mcc_generated_files/touch/mtouch_button.c"
  8029 ;; Parameters:    Size  Location     Type
  8030 ;;  name            1    wreg     enum E13138
  8031 ;; Auto vars:     Size  Location     Type
  8032 ;;  name            1   21[COMRAM] enum E13138
  8033 ;;  button          2   22[COMRAM] PTR struct .
  8034 ;;		 -> mtouch_button(85), 
  8035 ;; Return value:  Size  Location     Type
  8036 ;;                  1    wreg      void 
  8037 ;; Registers used:
  8038 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8039 ;; Tracked objects:
  8040 ;;		On entry : 0/E
  8041 ;;		On exit  : 0/0
  8042 ;;		Unchanged: 0/0
  8043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  8044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8045 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8046 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8047 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8048 ;;Total ram usage:        3 bytes
  8049 ;; Hardware stack levels used: 1
  8050 ;; Hardware stack levels required when called: 7
  8051 ;; This function calls:
  8052 ;;		_MTOUCH_Sensor_Calibrate
  8053 ;; This function is called by:
  8054 ;;		_MTOUCH_Button_InitializeAll
  8055 ;;		_Button_Service
  8056 ;;		_Button_State_NotPressed
  8057 ;;		_Button_State_Pressed
  8058 ;; This function uses a non-reentrant model
  8059 ;;
  8060                           
  8061                           	psect	text71
  8062   002672                     __ptext71:
  8063                           	callstack 0
  8064   002672                     _MTOUCH_Button_Initialize:
  8065                           	callstack 20
  8066                           
  8067                           ;incstack = 0
  8068                           ;MTOUCH_Button_Initialize@name stored from wreg
  8069   002672  6E16               	movwf	MTOUCH_Button_Initialize@name^0,c
  8070                           
  8071                           ;mcc_generated_files/touch/mtouch_button.c: 194: void MTOUCH_Button_Initialize(enum mtou
      +                          ch_button_names name);mcc_generated_files/touch/mtouch_button.c: 195: {;mcc_generated_fi
      +                          les/touch/mtouch_button.c: 196:     mtouch_button_t* button = &mtouch_button[name];
  8072   002674  5016               	movf	MTOUCH_Button_Initialize@name^0,w,c
  8073   002676  0D11               	mullw	17
  8074   002678  0E00               	movlw	low _mtouch_button
  8075   00267A  24F3               	addwf	243,w,c
  8076   00267C  6E17               	movwf	MTOUCH_Button_Initialize@button^0,c
  8077   00267E  0E01               	movlw	high _mtouch_button
  8078   002680  20F4               	addwfc	prodh,w,c
  8079   002682  6E18               	movwf	(MTOUCH_Button_Initialize@button+1)^0,c
  8080                           
  8081                           ;mcc_generated_files/touch/mtouch_button.c: 198:     button->state = MTOUCH_BUTTON_STATE
      +                          _initializing;
  8082   002684  EE20 F002          	lfsr	2,2
  8083   002688  D816               	call	PL165	;call to abstracted procedure
  8084   00268A  6ADF               	clrf	indf2,c
  8085                           
  8086                           ;mcc_generated_files/touch/mtouch_button.c: 199:     button->baseline = (mtouch_button_b
      +                          aseline_t)0;
  8087   00268C  EE20 F006          	lfsr	2,6
  8088   002690  D812               	call	PL165	;call to abstracted procedure
  8089   002692  6ADE               	clrf	postinc2,c
  8090   002694  6ADE               	clrf	postinc2,c
  8091   002696  6ADE               	clrf	postinc2,c
  8092   002698  6ADD               	clrf	postdec2,c
  8093                           
  8094                           ;mcc_generated_files/touch/mtouch_button.c: 200:     button->counter = (mtouch_button_st
      +                          atecounter_t)0;
  8095   00269A  EE20 F00B          	lfsr	2,11
  8096   00269E  D80B               	call	PL165	;call to abstracted procedure
  8097                           
  8098                           ;mcc_generated_files/touch/mtouch_button.c: 201:     button->baseline_count = (mtouch_bu
      +                          tton_baselinecounter_t)0;
  8099   0026A0  EC92  F00F         	call	PL227	;call to abstracted procedure
  8100   0026A4  D808               	call	PL165	;call to abstracted procedure
  8101   0026A6  6ADE               	clrf	postinc2,c
  8102   0026A8  6ADD               	clrf	postdec2,c
  8103                           
  8104                           ;mcc_generated_files/touch/mtouch_button.c: 203:     MTOUCH_Sensor_Calibrate(button->sen
      +                          sor);
  8105   0026AA  EE20 F001          	lfsr	2,1
  8106   0026AE  D803               	call	PL165	;call to abstracted procedure
  8107   0026B0  50DF               	movf	indf2,w,c
  8108   0026B2  EF4B  F016         	goto	_MTOUCH_Sensor_Calibrate
  8109   0026B6                     __end_of_MTOUCH_Button_Initialize:
  8110                           	callstack 0
  8111   0026B6                     PL165:
  8112                           	callstack 20
  8113   0026B6  5017               	movf	MTOUCH_Button_Initialize@button^0,w,c
  8114   0026B8  26D9               	addwf	fsr2l,f,c
  8115   0026BA  5018               	movf	(MTOUCH_Button_Initialize@button+1)^0,w,c
  8116   0026BC  22DA               	addwfc	fsr2h,f,c
  8117   0026BE  0012               	return	
  8118   0026C0                     __end_ofPL165:
  8119                           	callstack 0
  8120                           
  8121 ;; *************** function _MTOUCH_Sensor_Calibrate *****************
  8122 ;; Defined at:
  8123 ;;		line 795 in file "mcc_generated_files/touch/mtouch_sensor.c"
  8124 ;; Parameters:    Size  Location     Type
  8125 ;;  sensor          1    wreg     enum E13072
  8126 ;; Auto vars:     Size  Location     Type
  8127 ;;  sensor          1   20[COMRAM] enum E13072
  8128 ;; Return value:  Size  Location     Type
  8129 ;;                  1    wreg      void 
  8130 ;; Registers used:
  8131 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8132 ;; Tracked objects:
  8133 ;;		On entry : 0/E
  8134 ;;		On exit  : 0/0
  8135 ;;		Unchanged: 0/0
  8136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  8137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8138 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8140 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8141 ;;Total ram usage:        1 bytes
  8142 ;; Hardware stack levels used: 1
  8143 ;; Hardware stack levels required when called: 6
  8144 ;; This function calls:
  8145 ;;		Nothing
  8146 ;; This function is called by:
  8147 ;;		_MTOUCH_Button_Initialize
  8148 ;;		_MTOUCH_Sensor_Initialize
  8149 ;; This function uses a non-reentrant model
  8150 ;;
  8151                           
  8152                           	psect	text72
  8153   002C96                     __ptext72:
  8154                           	callstack 0
  8155   002C96                     _MTOUCH_Sensor_Calibrate:
  8156                           	callstack 20
  8157                           
  8158                           ;incstack = 0
  8159                           ;MTOUCH_Sensor_Calibrate@sensor stored from wreg
  8160   002C96  6E15               	movwf	MTOUCH_Sensor_Calibrate@sensor^0,c
  8161                           
  8162                           ;mcc_generated_files/touch/mtouch_sensor.c: 795: void MTOUCH_Sensor_Calibrate(enum mtouc
      +                          h_sensor_names sensor);mcc_generated_files/touch/mtouch_sensor.c: 796: {;mcc_generated_f
      +                          iles/touch/mtouch_sensor.c: 797:     if(sensor < 5u)
  8163   002C98  0E05               	movlw	5
  8164   002C9A  6015               	cpfslt	MTOUCH_Sensor_Calibrate@sensor^0,c
  8165   002C9C  0C05               	retlw	5
  8166                           
  8167                           ;mcc_generated_files/touch/mtouch_sensor.c: 798:     {;mcc_generated_files/touch/mtouch_
      +                          sensor.c: 799:         mtouch_sensor[sensor].calibrated = 0;
  8168   002C9E  5015               	movf	MTOUCH_Sensor_Calibrate@sensor^0,w,c
  8169   002CA0  EC6D  F00D         	call	PL113	;call to abstracted procedure
  8170   002CA4  96DF               	bcf	indf2,3,c
  8171   002CA6  0012               	return		;funcret
  8172   002CA8                     __end_of_MTOUCH_Sensor_Calibrate:
  8173                           	callstack 0
  8174                           
  8175 ;; *************** function _Button_Check_AKS_Block *****************
  8176 ;; Defined at:
  8177 ;;		line 578 in file "mcc_generated_files/touch/mtouch_button.c"
  8178 ;; Parameters:    Size  Location     Type
  8179 ;;  button          2   28[COMRAM] PTR struct .
  8180 ;;		 -> mtouch_button(85), 
  8181 ;; Auto vars:     Size  Location     Type
  8182 ;;  check_button    2   37[COMRAM] PTR struct .
  8183 ;;		 -> mtouch_button(85), 
  8184 ;;  surplus_devi    2   35[COMRAM] short 
  8185 ;;  surplus_devi    2   32[COMRAM] short 
  8186 ;;  currentAKSGr    1   34[COMRAM] enum E13448
  8187 ;; Return value:  Size  Location     Type
  8188 ;;                  1    wreg      _Bool 
  8189 ;; Registers used:
  8190 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8191 ;; Tracked objects:
  8192 ;;		On entry : 0/0
  8193 ;;		On exit  : 0/0
  8194 ;;		Unchanged: 0/0
  8195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  8196 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8197 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8198 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8199 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8200 ;;Total ram usage:       11 bytes
  8201 ;; Hardware stack levels used: 1
  8202 ;; Hardware stack levels required when called: 7
  8203 ;; This function calls:
  8204 ;;		_Button_Unscaled_Deviation_Get
  8205 ;;		_MTOUCH_Sensor_isEnabled
  8206 ;; This function is called by:
  8207 ;;		_Button_State_NotPressed
  8208 ;; This function uses a non-reentrant model
  8209 ;;
  8210                           
  8211                           	psect	text73
  8212   001870                     __ptext73:
  8213                           	callstack 0
  8214   001870                     _Button_Check_AKS_Block:
  8215                           	callstack 19
  8216                           
  8217                           ;mcc_generated_files/touch/mtouch_button.c: 578: static _Bool Button_Check_AKS_Block(mto
      +                          uch_button_t* button);mcc_generated_files/touch/mtouch_button.c: 579: {;mcc_generated_fi
      +                          les/touch/mtouch_button.c: 580:     enum mtouch_button_aks_group currentAKSGroup = butto
      +                          n->aks_group;
  8218                           
  8219                           ;incstack = 0
  8220   001870  EE20 F003          	lfsr	2,3
  8221   001874  D866               	call	PL211	;call to abstracted procedure
  8222   001876  6E23               	movwf	Button_Check_AKS_Block@currentAKSGroup^0,c
  8223                           
  8224                           ;mcc_generated_files/touch/mtouch_button.c: 581:     int16_t surplus_deviation_this_butt
      +                          on,surplus_deviation_check_button;;mcc_generated_files/touch/mtouch_button.c: 582:     m
      +                          touch_button_t* check_button;;mcc_generated_files/touch/mtouch_button.c: 584:     surplu
      +                          s_deviation_this_button = (int16_t)(Button_Unscaled_Deviation_Get(button) - (mtouch_butt
      +                          on_reading_t)button->threshold);
  8225   001878  C01D  F015         	movff	Button_Check_AKS_Block@button,Button_Unscaled_Deviation_Get@button
  8226   00187C  C01E  F016         	movff	Button_Check_AKS_Block@button+1,Button_Unscaled_Deviation_Get@button+1
  8227   001880  EC60  F013         	call	_Button_Unscaled_Deviation_Get	;wreg free
  8228   001884  EE20 F00F          	lfsr	2,15
  8229   001888  D85C               	call	PL211	;call to abstracted procedure
  8230   00188A  5C15               	subwf	?_Button_Unscaled_Deviation_Get^0,w,c
  8231   00188C  6E21               	movwf	Button_Check_AKS_Block@surplus_deviation_this_button^0,c
  8232   00188E  5016               	movf	(?_Button_Unscaled_Deviation_Get+1)^0,w,c
  8233   001890  A0D8               	btfss	status,0,c
  8234   001892  0416               	decf	(?_Button_Unscaled_Deviation_Get+1)^0,w,c
  8235   001894  6E22               	movwf	(Button_Check_AKS_Block@surplus_deviation_this_button+1)^0,c
  8236                           
  8237                           ;mcc_generated_files/touch/mtouch_button.c: 586:     for(check_button = &mtouch_button[0
      +                          ];check_button <= &mtouch_button[5u -1];check_button++)
  8238   001896  0E00               	movlw	low _mtouch_button
  8239   001898  6E26               	movwf	Button_Check_AKS_Block@check_button^0,c
  8240   00189A  0E01               	movlw	high _mtouch_button
  8241   00189C  6E27               	movwf	(Button_Check_AKS_Block@check_button+1)^0,c
  8242   00189E  5027               	movf	(Button_Check_AKS_Block@check_button+1)^0,w,c
  8243   0018A0  0801               	sublw	high (_mtouch_button+68)
  8244   0018A2  E101               	bnz	u4525
  8245   0018A4  D045               	goto	L7
  8246   0018A6                     u4525:
  8247   0018A6  E347               	bnc	u4590
  8248   0018A8                     l5496:
  8249                           
  8250                           ;mcc_generated_files/touch/mtouch_button.c: 587:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 588:         if(check_button->name == button->name)
  8251   0018A8  C01D  FFD9         	movff	Button_Check_AKS_Block@button,fsr2l
  8252   0018AC  C01E  FFDA         	movff	Button_Check_AKS_Block@button+1,fsr2h
  8253   0018B0  C026  FFE1         	movff	Button_Check_AKS_Block@check_button,fsr1l
  8254   0018B4  C027  FFE2         	movff	Button_Check_AKS_Block@check_button+1,fsr1h
  8255   0018B8  50DE               	movf	postinc2,w,c
  8256   0018BA  18E6               	xorwf	postinc1,w,c
  8257   0018BC  E032               	bz	l5522
  8258                           
  8259                           ;mcc_generated_files/touch/mtouch_button.c: 593:         {;mcc_generated_files/touch/mto
      +                          uch_button.c: 594:             if(check_button->aks_group == currentAKSGroup)
  8260                           
  8261                           ;mcc_generated_files/touch/mtouch_button.c: 589:         {;mcc_generated_files/touch/mto
      +                          uch_button.c: 591:         }
  8262   0018BE  EE20 F003          	lfsr	2,3
  8263   0018C2  D83A               	call	PL203	;call to abstracted procedure
  8264   0018C4  5023               	movf	Button_Check_AKS_Block@currentAKSGroup^0,w,c
  8265   0018C6  18DE               	xorwf	postinc2,w,c
  8266   0018C8  E12C               	bnz	l5522
  8267                           
  8268                           ;mcc_generated_files/touch/mtouch_button.c: 595:             {;mcc_generated_files/touch
      +                          /mtouch_button.c: 596:                 if(MTOUCH_Sensor_isEnabled(check_button))
  8269   0018CA  5026               	movf	Button_Check_AKS_Block@check_button^0,w,c
  8270   0018CC  EC12  F016         	call	_MTOUCH_Sensor_isEnabled
  8271   0018D0  0900               	iorlw	0
  8272   0018D2  E027               	bz	l5522
  8273                           
  8274                           ;mcc_generated_files/touch/mtouch_button.c: 597:                 {;mcc_generated_files/t
      +                          ouch/mtouch_button.c: 598:                         if(check_button->state == MTOUCH_BUTT
      +                          ON_STATE_pressed)
  8275   0018D4  EE20 F002          	lfsr	2,2
  8276   0018D8  D82F               	call	PL203	;call to abstracted procedure
  8277   0018DA  0E02               	movlw	2
  8278   0018DC  18DE               	xorwf	postinc2,w,c
  8279   0018DE  E101               	bnz	l5512
  8280                           
  8281                           ;mcc_generated_files/touch/mtouch_button.c: 599:                             return 1;
  8282   0018E0  0C01               	retlw	1
  8283   0018E2                     l5512:
  8284                           
  8285                           ;mcc_generated_files/touch/mtouch_button.c: 601:                             {;mcc_gener
      +                          ated_files/touch/mtouch_button.c: 602:                                 surplus_deviation
      +                          _check_button = (int16_t)(Button_Unscaled_Deviation_Get(check_button) - (mtouch_button_r
      +                          eading_t)check_button->threshold);
  8286   0018E2  C026  F015         	movff	Button_Check_AKS_Block@check_button,Button_Unscaled_Deviation_Get@button
  8287   0018E6  C027  F016         	movff	Button_Check_AKS_Block@check_button+1,Button_Unscaled_Deviation_Get@button+1
  8288   0018EA  EC60  F013         	call	_Button_Unscaled_Deviation_Get	;wreg free
  8289   0018EE  EE20 F00F          	lfsr	2,15
  8290   0018F2  D822               	call	PL203	;call to abstracted procedure
  8291   0018F4  50DF               	movf	indf2,w,c
  8292   0018F6  5C15               	subwf	?_Button_Unscaled_Deviation_Get^0,w,c
  8293   0018F8  6E24               	movwf	Button_Check_AKS_Block@surplus_deviation_check_button^0,c
  8294   0018FA  5016               	movf	(?_Button_Unscaled_Deviation_Get+1)^0,w,c
  8295   0018FC  A0D8               	btfss	status,0,c
  8296   0018FE  0416               	decf	(?_Button_Unscaled_Deviation_Get+1)^0,w,c
  8297   001900  6E25               	movwf	(Button_Check_AKS_Block@surplus_deviation_check_button+1)^0,c
  8298                           
  8299                           ;mcc_generated_files/touch/mtouch_button.c: 603:                                 if(surp
      +                          lus_deviation_check_button > 0 && surplus_deviation_check_button > surplus_deviation_thi
      +                          s_button)
  8300   001902  BE25               	btfsc	(Button_Check_AKS_Block@surplus_deviation_check_button+1)^0,7,c
  8301   001904  D00E               	goto	l5522
  8302   001906  5025               	movf	(Button_Check_AKS_Block@surplus_deviation_check_button+1)^0,w,c
  8303   001908  E102               	bnz	u4570
  8304   00190A  0424               	decf	Button_Check_AKS_Block@surplus_deviation_check_button^0,w,c
  8305   00190C  E30A               	bnc	l5522
  8306   00190E                     u4570:
  8307   00190E  5024               	movf	Button_Check_AKS_Block@surplus_deviation_check_button^0,w,c
  8308   001910  5C21               	subwf	Button_Check_AKS_Block@surplus_deviation_this_button^0,w,c
  8309   001912  5022               	movf	(Button_Check_AKS_Block@surplus_deviation_this_button+1)^0,w,c
  8310   001914  0A80               	xorlw	128
  8311   001916  6E1F               	movwf	??_Button_Check_AKS_Block^0,c
  8312   001918  5025               	movf	(Button_Check_AKS_Block@surplus_deviation_check_button+1)^0,w,c
  8313   00191A  0A80               	xorlw	128
  8314   00191C  581F               	subwfb	??_Button_Check_AKS_Block^0,w,c
  8315   00191E  E201               	bc	l5522
  8316   001920  0C01               	retlw	1
  8317   001922                     l5522:
  8318                           
  8319                           ;mcc_generated_files/touch/mtouch_button.c: 610:     }
  8320   001922  0E11               	movlw	17
  8321   001924  2626               	addwf	Button_Check_AKS_Block@check_button^0,f,c
  8322   001926  0E00               	movlw	0
  8323   001928  2227               	addwfc	(Button_Check_AKS_Block@check_button+1)^0,f,c
  8324   00192A  5027               	movf	(Button_Check_AKS_Block@check_button+1)^0,w,c
  8325   00192C  0801               	sublw	high (_mtouch_button+68)
  8326   00192E  E102               	bnz	u4595
  8327   001930                     L7:
  8328   001930  5026               	movf	Button_Check_AKS_Block@check_button^0,w,c
  8329   001932  0844               	sublw	low (_mtouch_button+68)
  8330   001934                     u4595:
  8331   001934  E2B9               	bc	l5496
  8332   001936                     u4590:
  8333                           
  8334                           ;mcc_generated_files/touch/mtouch_button.c: 611:     return 0;
  8335   001936  0C00               	retlw	0	;funcret
  8336   001938                     __end_of_Button_Check_AKS_Block:
  8337                           	callstack 0
  8338   001938                     PL203:
  8339                           	callstack 19
  8340   001938  5026               	movf	Button_Check_AKS_Block@check_button^0,w,c
  8341   00193A  26D9               	addwf	fsr2l,f,c
  8342   00193C  5027               	movf	(Button_Check_AKS_Block@check_button+1)^0,w,c
  8343   00193E  22DA               	addwfc	fsr2h,f,c
  8344   001940  0012               	return	
  8345   001942                     __end_ofPL203:
  8346                           	callstack 0
  8347   001942                     PL211:
  8348                           	callstack 19
  8349   001942  501D               	movf	Button_Check_AKS_Block@button^0,w,c
  8350   001944  26D9               	addwf	fsr2l,f,c
  8351   001946  501E               	movf	(Button_Check_AKS_Block@button+1)^0,w,c
  8352   001948  22DA               	addwfc	fsr2h,f,c
  8353   00194A  50DF               	movf	indf2,w,c
  8354   00194C  0012               	return	
  8355   00194E                     __end_ofPL211:
  8356                           	callstack 0
  8357                           
  8358 ;; *************** function _MTOUCH_Sensor_isEnabled *****************
  8359 ;; Defined at:
  8360 ;;		line 739 in file "mcc_generated_files/touch/mtouch_sensor.c"
  8361 ;; Parameters:    Size  Location     Type
  8362 ;;  sensor          1    wreg     enum E13072
  8363 ;; Auto vars:     Size  Location     Type
  8364 ;;  sensor          1   20[COMRAM] enum E13072
  8365 ;; Return value:  Size  Location     Type
  8366 ;;                  1    wreg      _Bool 
  8367 ;; Registers used:
  8368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8369 ;; Tracked objects:
  8370 ;;		On entry : 0/E
  8371 ;;		On exit  : 0/0
  8372 ;;		Unchanged: 0/0
  8373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  8374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8375 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8377 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8378 ;;Total ram usage:        1 bytes
  8379 ;; Hardware stack levels used: 1
  8380 ;; Hardware stack levels required when called: 6
  8381 ;; This function calls:
  8382 ;;		Nothing
  8383 ;; This function is called by:
  8384 ;;		_Button_Check_AKS_Block
  8385 ;;		_MTOUCH_Sensor_isSamplingComplete
  8386 ;;		_Sensor_scheduleNextScan
  8387 ;; This function uses a non-reentrant model
  8388 ;;
  8389                           
  8390                           	psect	text74
  8391   002C24                     __ptext74:
  8392                           	callstack 0
  8393   002C24                     _MTOUCH_Sensor_isEnabled:
  8394                           	callstack 20
  8395                           
  8396                           ;incstack = 0
  8397                           ;MTOUCH_Sensor_isEnabled@sensor stored from wreg
  8398   002C24  6E15               	movwf	MTOUCH_Sensor_isEnabled@sensor^0,c
  8399                           
  8400                           ;mcc_generated_files/touch/mtouch_sensor.c: 739: _Bool MTOUCH_Sensor_isEnabled(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/touch/mtouch_sensor.c: 740: {;mcc_generated_
      +                          files/touch/mtouch_sensor.c: 741:     if(sensor < 5u)
  8401   002C26  0E05               	movlw	5
  8402   002C28  6015               	cpfslt	MTOUCH_Sensor_isEnabled@sensor^0,c
  8403   002C2A  0C00               	retlw	0
  8404                           
  8405                           ;mcc_generated_files/touch/mtouch_sensor.c: 742:         return (_Bool)mtouch_sensor[sen
      +                          sor].enabled;
  8406   002C2C  5015               	movf	MTOUCH_Sensor_isEnabled@sensor^0,w,c
  8407   002C2E  EC6D  F00D         	call	PL113	;call to abstracted procedure
  8408   002C32  B0DF               	btfsc	indf2,0,c
  8409   002C34  0C01               	retlw	1
  8410   002C36  0C00               	retlw	0
  8411   002C38                     __end_of_MTOUCH_Sensor_isEnabled:
  8412                           	callstack 0
  8413                           
  8414 ;; *************** function _Button_Unscaled_Deviation_Get *****************
  8415 ;; Defined at:
  8416 ;;		line 471 in file "mcc_generated_files/touch/mtouch_button.c"
  8417 ;; Parameters:    Size  Location     Type
  8418 ;;  button          2   20[COMRAM] PTR struct .
  8419 ;;		 -> mtouch_button(85), 
  8420 ;; Auto vars:     Size  Location     Type
  8421 ;;		None
  8422 ;; Return value:  Size  Location     Type
  8423 ;;                  2   20[COMRAM] unsigned short 
  8424 ;; Registers used:
  8425 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8426 ;; Tracked objects:
  8427 ;;		On entry : 0/0
  8428 ;;		On exit  : 0/0
  8429 ;;		Unchanged: 0/0
  8430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  8431 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8432 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8433 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8434 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8435 ;;Total ram usage:        8 bytes
  8436 ;; Hardware stack levels used: 1
  8437 ;; Hardware stack levels required when called: 6
  8438 ;; This function calls:
  8439 ;;		Nothing
  8440 ;; This function is called by:
  8441 ;;		_Button_Check_AKS_Block
  8442 ;; This function uses a non-reentrant model
  8443 ;;
  8444                           
  8445                           	psect	text75
  8446   0026C0                     __ptext75:
  8447                           	callstack 0
  8448   0026C0                     _Button_Unscaled_Deviation_Get:
  8449                           	callstack 19
  8450                           
  8451                           ;mcc_generated_files/touch/mtouch_button.c: 471: static mtouch_button_reading_t Button_U
      +                          nscaled_Deviation_Get(mtouch_button_t* button);mcc_generated_files/touch/mtouch_button.c
      +                          : 472: {;mcc_generated_files/touch/mtouch_button.c: 473:     return (mtouch_button_readi
      +                          ng_t)(button->reading - (mtouch_button_reading_t)((button->baseline)>>((uint8_t)4u)));
  8452                           
  8453                           ;incstack = 0
  8454   0026C0  EE20 F006          	lfsr	2,6
  8455   0026C4  D81F               	call	PL237	;call to abstracted procedure
  8456   0026C6  CFDE F017          	movff	postinc2,??_Button_Unscaled_Deviation_Get
  8457   0026CA  CFDE F018          	movff	postinc2,??_Button_Unscaled_Deviation_Get+1
  8458   0026CE  CFDE F019          	movff	postinc2,??_Button_Unscaled_Deviation_Get+2
  8459   0026D2  CFDE F01A          	movff	postinc2,??_Button_Unscaled_Deviation_Get+3
  8460   0026D6  0E05               	movlw	5
  8461   0026D8  D005               	goto	u4350
  8462   0026DA                     u4355:
  8463   0026DA  90D8               	bcf	status,0,c
  8464   0026DC  321A               	rrcf	(??_Button_Unscaled_Deviation_Get+3)^0,f,c
  8465   0026DE  3219               	rrcf	(??_Button_Unscaled_Deviation_Get+2)^0,f,c
  8466   0026E0  3218               	rrcf	(??_Button_Unscaled_Deviation_Get+1)^0,f,c
  8467   0026E2  3217               	rrcf	??_Button_Unscaled_Deviation_Get^0,f,c
  8468   0026E4                     u4350:
  8469   0026E4  2EE8               	decfsz	wreg,f,c
  8470   0026E6  D7F9               	goto	u4355
  8471   0026E8  EE20 F004          	lfsr	2,4
  8472   0026EC  D80B               	call	PL237	;call to abstracted procedure
  8473   0026EE  CFDE F01B          	movff	postinc2,??_Button_Unscaled_Deviation_Get+4
  8474   0026F2  CFDD F01C          	movff	postdec2,??_Button_Unscaled_Deviation_Get+5
  8475   0026F6  5017               	movf	??_Button_Unscaled_Deviation_Get^0,w,c
  8476   0026F8  5C1B               	subwf	(??_Button_Unscaled_Deviation_Get+4)^0,w,c
  8477   0026FA  6E15               	movwf	?_Button_Unscaled_Deviation_Get^0,c
  8478   0026FC  5018               	movf	(??_Button_Unscaled_Deviation_Get+1)^0,w,c
  8479   0026FE  581C               	subwfb	(??_Button_Unscaled_Deviation_Get+5)^0,w,c
  8480   002700  6E16               	movwf	(?_Button_Unscaled_Deviation_Get+1)^0,c
  8481   002702  0012               	return		;funcret
  8482   002704                     __end_of_Button_Unscaled_Deviation_Get:
  8483                           	callstack 0
  8484   002704                     PL237:
  8485                           	callstack 19
  8486   002704  5015               	movf	Button_Unscaled_Deviation_Get@button^0,w,c
  8487   002706  26D9               	addwf	fsr2l,f,c
  8488   002708  5016               	movf	(Button_Unscaled_Deviation_Get@button+1)^0,w,c
  8489   00270A  22DA               	addwfc	fsr2h,f,c
  8490   00270C  0012               	return	
  8491   00270E                     __end_ofPL237:
  8492                           	callstack 0
  8493                           
  8494 ;; *************** function _Button_Baseline_Update *****************
  8495 ;; Defined at:
  8496 ;;		line 535 in file "mcc_generated_files/touch/mtouch_button.c"
  8497 ;; Parameters:    Size  Location     Type
  8498 ;;  button          2   20[COMRAM] PTR struct .
  8499 ;;		 -> mtouch_button(85), 
  8500 ;; Auto vars:     Size  Location     Type
  8501 ;;		None
  8502 ;; Return value:  Size  Location     Type
  8503 ;;                  1    wreg      void 
  8504 ;; Registers used:
  8505 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8506 ;; Tracked objects:
  8507 ;;		On entry : 0/0
  8508 ;;		On exit  : 0/0
  8509 ;;		Unchanged: 0/0
  8510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  8511 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8513 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8514 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8515 ;;Total ram usage:        6 bytes
  8516 ;; Hardware stack levels used: 1
  8517 ;; Hardware stack levels required when called: 6
  8518 ;; This function calls:
  8519 ;;		Nothing
  8520 ;; This function is called by:
  8521 ;;		_Button_State_Initializing
  8522 ;;		_Button_State_NotPressed
  8523 ;; This function uses a non-reentrant model
  8524 ;;
  8525                           
  8526                           	psect	text76
  8527   001FCA                     __ptext76:
  8528                           	callstack 0
  8529   001FCA                     _Button_Baseline_Update:
  8530                           	callstack 20
  8531                           
  8532                           ;mcc_generated_files/touch/mtouch_button.c: 535: static void Button_Baseline_Update(mtou
      +                          ch_button_t* button);mcc_generated_files/touch/mtouch_button.c: 536: {;mcc_generated_fil
      +                          es/touch/mtouch_button.c: 537:     if (GIE == (uint8_t)1)
  8533                           
  8534                           ;incstack = 0
  8535   001FCA  AEF2               	btfss	4082,7,c	;volatile
  8536   001FCC  D005               	goto	l5484
  8537                           
  8538                           ;mcc_generated_files/touch/mtouch_button.c: 538:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 539:         GIE = (uint8_t)0;
  8539   001FCE  9EF2               	bcf	4082,7,c	;volatile
  8540                           
  8541                           ;mcc_generated_files/touch/mtouch_button.c: 540:         button->baseline -= (button->ba
      +                          seline) >> ((uint8_t)4u);
  8542   001FD0  D83E               	call	PL125	;call to abstracted procedure
  8543                           
  8544                           ;mcc_generated_files/touch/mtouch_button.c: 541:         button->baseline += button->rea
      +                          ding;
  8545   001FD2  D805               	call	PL111	;call to abstracted procedure
  8546                           
  8547                           ;mcc_generated_files/touch/mtouch_button.c: 542:         GIE = (uint8_t)1;
  8548   001FD4  8EF2               	bsf	4082,7,c	;volatile
  8549                           
  8550                           ;mcc_generated_files/touch/mtouch_button.c: 543:     }
  8551   001FD6  0C00               	retlw	0
  8552   001FD8                     l5484:
  8553                           
  8554                           ;mcc_generated_files/touch/mtouch_button.c: 545:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 546:         button->baseline -= (button->baseline) >> ((uint8_t)4u);
  8555   001FD8  D83A               	call	PL125	;call to abstracted procedure
  8556                           
  8557                           ;mcc_generated_files/touch/mtouch_button.c: 547:         button->baseline += button->rea
      +                          ding;
  8558   001FDA  D801               	call	PL111	;call to abstracted procedure
  8559   001FDC  0C00               	retlw	0	;funcret
  8560   001FDE                     __end_of_Button_Baseline_Update:
  8561                           	callstack 0
  8562   001FDE                     PL111:
  8563                           	callstack 20
  8564   001FDE  22DA               	addwfc	fsr2h,f,c
  8565   001FE0  CFDE F017          	movff	postinc2,??_Button_Baseline_Update
  8566   001FE4  CFDE F018          	movff	postinc2,??_Button_Baseline_Update+1
  8567   001FE8  CFDE F019          	movff	postinc2,??_Button_Baseline_Update+2
  8568   001FEC  CFDE F01A          	movff	postinc2,??_Button_Baseline_Update+3
  8569   001FF0  0E05               	movlw	5
  8570   001FF2  D005               	goto	u4500
  8571   001FF4                     u4505:
  8572   001FF4  90D8               	bcf	status,0,c
  8573   001FF6  321A               	rrcf	(??_Button_Baseline_Update+3)^0,f,c
  8574   001FF8  3219               	rrcf	(??_Button_Baseline_Update+2)^0,f,c
  8575   001FFA  3218               	rrcf	(??_Button_Baseline_Update+1)^0,f,c
  8576   001FFC  3217               	rrcf	??_Button_Baseline_Update^0,f,c
  8577   001FFE                     u4500:
  8578   001FFE  2EE8               	decfsz	wreg,f,c
  8579   002000  D7F9               	goto	u4505
  8580   002002  EE20 F006          	lfsr	2,6
  8581   002006  5015               	movf	Button_Baseline_Update@button^0,w,c
  8582   002008  26D9               	addwf	fsr2l,f,c
  8583   00200A  5016               	movf	(Button_Baseline_Update@button+1)^0,w,c
  8584   00200C  22DA               	addwfc	fsr2h,f,c
  8585   00200E  5017               	movf	??_Button_Baseline_Update^0,w,c
  8586   002010  5EDE               	subwf	postinc2,f,c
  8587   002012  5018               	movf	(??_Button_Baseline_Update+1)^0,w,c
  8588   002014  5ADE               	subwfb	postinc2,f,c
  8589   002016  5019               	movf	(??_Button_Baseline_Update+2)^0,w,c
  8590   002018  5ADE               	subwfb	postinc2,f,c
  8591   00201A  501A               	movf	(??_Button_Baseline_Update+3)^0,w,c
  8592   00201C  5ADE               	subwfb	postinc2,f,c
  8593   00201E  EE20 F004          	lfsr	2,4
  8594   002022  5015               	movf	Button_Baseline_Update@button^0,w,c
  8595   002024  26D9               	addwf	fsr2l,f,c
  8596   002026  5016               	movf	(Button_Baseline_Update@button+1)^0,w,c
  8597   002028  22DA               	addwfc	fsr2h,f,c
  8598   00202A  CFDE F017          	movff	postinc2,??_Button_Baseline_Update
  8599   00202E  CFDD F018          	movff	postdec2,??_Button_Baseline_Update+1
  8600   002032  EE20 F006          	lfsr	2,6
  8601   002036  5015               	movf	Button_Baseline_Update@button^0,w,c
  8602   002038  26D9               	addwf	fsr2l,f,c
  8603   00203A  5016               	movf	(Button_Baseline_Update@button+1)^0,w,c
  8604   00203C  22DA               	addwfc	fsr2h,f,c
  8605   00203E  5017               	movf	??_Button_Baseline_Update^0,w,c
  8606   002040  26DE               	addwf	postinc2,f,c
  8607   002042  5018               	movf	(??_Button_Baseline_Update+1)^0,w,c
  8608   002044  22DE               	addwfc	postinc2,f,c
  8609   002046  0E00               	movlw	0
  8610   002048  22DE               	addwfc	postinc2,f,c
  8611   00204A  22DE               	addwfc	postinc2,f,c
  8612   00204C  0C00               	retlw	0
  8613   00204E                     __end_ofPL111:
  8614                           	callstack 0
  8615   00204E                     PL125:
  8616                           	callstack 20
  8617   00204E  EE20 F006          	lfsr	2,6
  8618   002052  5015               	movf	Button_Baseline_Update@button^0,w,c
  8619   002054  26D9               	addwf	fsr2l,f,c
  8620   002056  5016               	movf	(Button_Baseline_Update@button+1)^0,w,c
  8621   002058  0012               	return	
  8622   00205A                     __end_ofPL125:
  8623                           	callstack 0
  8624                           
  8625 ;; *************** function _Button_Baseline_Initialize *****************
  8626 ;; Defined at:
  8627 ;;		line 529 in file "mcc_generated_files/touch/mtouch_button.c"
  8628 ;; Parameters:    Size  Location     Type
  8629 ;;  button          2   23[COMRAM] PTR struct .
  8630 ;;		 -> mtouch_button(85), 
  8631 ;; Auto vars:     Size  Location     Type
  8632 ;;		None
  8633 ;; Return value:  Size  Location     Type
  8634 ;;                  1    wreg      void 
  8635 ;; Registers used:
  8636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8637 ;; Tracked objects:
  8638 ;;		On entry : 0/0
  8639 ;;		On exit  : 0/0
  8640 ;;		Unchanged: 0/0
  8641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  8642 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8644 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8645 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8646 ;;Total ram usage:        6 bytes
  8647 ;; Hardware stack levels used: 1
  8648 ;; Hardware stack levels required when called: 7
  8649 ;; This function calls:
  8650 ;;		_MTOUCH_Sensor_RawSample_Get
  8651 ;; This function is called by:
  8652 ;;		_Button_State_Initializing
  8653 ;; This function uses a non-reentrant model
  8654 ;;
  8655                           
  8656                           	psect	text77
  8657   0025CE                     __ptext77:
  8658                           	callstack 0
  8659   0025CE                     _Button_Baseline_Initialize:
  8660                           	callstack 19
  8661                           
  8662                           ;mcc_generated_files/touch/mtouch_button.c: 529: static void Button_Baseline_Initialize(
      +                          mtouch_button_t* button);mcc_generated_files/touch/mtouch_button.c: 530: {;mcc_generated
      +                          _files/touch/mtouch_button.c: 531:     button->baseline = MTOUCH_Sensor_RawSample_Get(bu
      +                          tton->sensor);
  8663                           
  8664                           ;incstack = 0
  8665   0025CE  EE20 F001          	lfsr	2,1
  8666   0025D2  5018               	movf	Button_Baseline_Initialize@button^0,w,c
  8667   0025D4  26D9               	addwf	fsr2l,f,c
  8668   0025D6  5019               	movf	(Button_Baseline_Initialize@button+1)^0,w,c
  8669   0025D8  22DA               	addwfc	fsr2h,f,c
  8670   0025DA  50DF               	movf	indf2,w,c
  8671   0025DC  EC11  F015         	call	_MTOUCH_Sensor_RawSample_Get
  8672   0025E0  5015               	movf	?_MTOUCH_Sensor_RawSample_Get^0,w,c
  8673   0025E2  6E1A               	movwf	??_Button_Baseline_Initialize^0,c
  8674   0025E4  5016               	movf	(?_MTOUCH_Sensor_RawSample_Get+1)^0,w,c
  8675   0025E6  6E1B               	movwf	(??_Button_Baseline_Initialize+1)^0,c
  8676   0025E8  6A1C               	clrf	(??_Button_Baseline_Initialize+2)^0,c
  8677   0025EA  6A1D               	clrf	(??_Button_Baseline_Initialize+3)^0,c
  8678   0025EC  D814               	call	PL191	;call to abstracted procedure
  8679   0025EE  C01A  FFDE         	movff	??_Button_Baseline_Initialize,postinc2
  8680   0025F2  C01B  FFDE         	movff	??_Button_Baseline_Initialize+1,postinc2
  8681   0025F6  C01C  FFDE         	movff	??_Button_Baseline_Initialize+2,postinc2
  8682   0025FA  C01D  FFDE         	movff	??_Button_Baseline_Initialize+3,postinc2
  8683                           
  8684                           ;mcc_generated_files/touch/mtouch_button.c: 532:     button->baseline <<= ((uint8_t)4u);
  8685   0025FE  D80B               	call	PL191	;call to abstracted procedure
  8686   002600  0E04               	movlw	4
  8687   002602                     u4485:
  8688   002602  90D8               	bcf	status,0,c
  8689   002604  36DE               	rlcf	postinc2,f,c
  8690   002606  36DE               	rlcf	postinc2,f,c
  8691   002608  36DE               	rlcf	postinc2,f,c
  8692   00260A  36DD               	rlcf	postdec2,f,c
  8693   00260C  52DD               	movf	postdec2,f,c
  8694   00260E  52DD               	movf	postdec2,f,c
  8695   002610  2EE8               	decfsz	wreg,f,c
  8696   002612  D7F7               	goto	u4485
  8697   002614  0012               	return		;funcret
  8698   002616                     __end_of_Button_Baseline_Initialize:
  8699                           	callstack 0
  8700   002616                     PL191:
  8701                           	callstack 19
  8702   002616  EE20 F006          	lfsr	2,6
  8703   00261A  5018               	movf	Button_Baseline_Initialize@button^0,w,c
  8704   00261C  26D9               	addwf	fsr2l,f,c
  8705   00261E  5019               	movf	(Button_Baseline_Initialize@button+1)^0,w,c
  8706   002620  22DA               	addwfc	fsr2h,f,c
  8707   002622  0012               	return	
  8708   002624                     __end_ofPL191:
  8709                           	callstack 0
  8710                           
  8711 ;; *************** function _Button_Reading_Update *****************
  8712 ;; Defined at:
  8713 ;;		line 502 in file "mcc_generated_files/touch/mtouch_button.c"
  8714 ;; Parameters:    Size  Location     Type
  8715 ;;  button          2   27[COMRAM] PTR struct .
  8716 ;;		 -> mtouch_button(85), 
  8717 ;; Auto vars:     Size  Location     Type
  8718 ;;		None
  8719 ;; Return value:  Size  Location     Type
  8720 ;;                  1    wreg      void 
  8721 ;; Registers used:
  8722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8723 ;; Tracked objects:
  8724 ;;		On entry : 0/0
  8725 ;;		On exit  : 0/0
  8726 ;;		Unchanged: 0/0
  8727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  8728 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8729 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8730 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8731 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8732 ;;Total ram usage:        2 bytes
  8733 ;; Hardware stack levels used: 1
  8734 ;; Hardware stack levels required when called: 8
  8735 ;; This function calls:
  8736 ;;		_Button_Reading_Update_Helper
  8737 ;; This function is called by:
  8738 ;;		_Button_Service
  8739 ;; This function uses a non-reentrant model
  8740 ;;
  8741                           
  8742                           	psect	text78
  8743   002B34                     __ptext78:
  8744                           	callstack 0
  8745   002B34                     _Button_Reading_Update:
  8746                           	callstack 19
  8747                           
  8748                           ;mcc_generated_files/touch/mtouch_button.c: 502: static void Button_Reading_Update(mtouc
      +                          h_button_t* button);mcc_generated_files/touch/mtouch_button.c: 503: {;mcc_generated_file
      +                          s/touch/mtouch_button.c: 504:     if (GIE == (uint8_t) 1)
  8749                           
  8750                           ;incstack = 0
  8751   002B34  AEF2               	btfss	4082,7,c	;volatile
  8752   002B36  D006               	goto	l5760
  8753                           
  8754                           ;mcc_generated_files/touch/mtouch_button.c: 505:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 506:         GIE = (uint8_t) 0;
  8755   002B38  9EF2               	bcf	4082,7,c	;volatile
  8756                           
  8757                           ;mcc_generated_files/touch/mtouch_button.c: 507:         Button_Reading_Update_Helper(bu
      +                          tton);
  8758   002B3A  D807               	call	PL221	;call to abstracted procedure
  8759   002B3C  EC2B  F011         	call	_Button_Reading_Update_Helper	;wreg free
  8760                           
  8761                           ;mcc_generated_files/touch/mtouch_button.c: 508:         GIE = (uint8_t) 1;
  8762   002B40  8EF2               	bsf	4082,7,c	;volatile
  8763                           
  8764                           ;mcc_generated_files/touch/mtouch_button.c: 509:     }
  8765   002B42  0012               	return	
  8766   002B44                     l5760:
  8767                           
  8768                           ;mcc_generated_files/touch/mtouch_button.c: 511:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 512:         Button_Reading_Update_Helper(button);
  8769   002B44  D802               	call	PL221	;call to abstracted procedure
  8770   002B46  EF2B  F011         	goto	_Button_Reading_Update_Helper	;wreg free
  8771   002B4A                     __end_of_Button_Reading_Update:
  8772                           	callstack 0
  8773   002B4A                     PL221:
  8774                           	callstack 19
  8775   002B4A  C01C  F018         	movff	Button_Reading_Update@button,Button_Reading_Update_Helper@button
  8776   002B4E  C01D  F019         	movff	Button_Reading_Update@button+1,Button_Reading_Update_Helper@button+1
  8777   002B52  0012               	return	
  8778   002B54                     __end_ofPL221:
  8779                           	callstack 0
  8780                           
  8781 ;; *************** function _Button_Reading_Update_Helper *****************
  8782 ;; Defined at:
  8783 ;;		line 516 in file "mcc_generated_files/touch/mtouch_button.c"
  8784 ;; Parameters:    Size  Location     Type
  8785 ;;  button          2   23[COMRAM] PTR struct .
  8786 ;;		 -> mtouch_button(85), 
  8787 ;; Auto vars:     Size  Location     Type
  8788 ;;		None
  8789 ;; Return value:  Size  Location     Type
  8790 ;;                  1    wreg      void 
  8791 ;; Registers used:
  8792 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8793 ;; Tracked objects:
  8794 ;;		On entry : 0/0
  8795 ;;		On exit  : 0/0
  8796 ;;		Unchanged: 0/0
  8797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  8798 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8800 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8801 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8802 ;;Total ram usage:        4 bytes
  8803 ;; Hardware stack levels used: 1
  8804 ;; Hardware stack levels required when called: 7
  8805 ;; This function calls:
  8806 ;;		_MTOUCH_Sensor_RawSample_Get
  8807 ;; This function is called by:
  8808 ;;		_Button_Reading_Update
  8809 ;; This function uses a non-reentrant model
  8810 ;;
  8811                           
  8812                           	psect	text79
  8813   002256                     __ptext79:
  8814                           	callstack 0
  8815   002256                     _Button_Reading_Update_Helper:
  8816                           	callstack 19
  8817                           
  8818                           ;mcc_generated_files/touch/mtouch_button.c: 516: static void Button_Reading_Update_Helpe
      +                          r(mtouch_button_t* button);mcc_generated_files/touch/mtouch_button.c: 517: {;mcc_generat
      +                          ed_files/touch/mtouch_button.c: 518:     if (button->state != MTOUCH_BUTTON_STATE_initia
      +                          lizing)
  8819                           
  8820                           ;incstack = 0
  8821   002256  EE20 F002          	lfsr	2,2
  8822   00225A  D834               	call	PL143	;call to abstracted procedure
  8823   00225C  E021               	bz	l5534
  8824                           
  8825                           ;mcc_generated_files/touch/mtouch_button.c: 519:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 520:         button->reading -= button->reading>>((uint8_t)2u);
  8826   00225E  D82B               	call	PL135	;call to abstracted procedure
  8827   002260  CFDE F01A          	movff	postinc2,??_Button_Reading_Update_Helper
  8828   002264  CFDD F01B          	movff	postdec2,??_Button_Reading_Update_Helper+1
  8829   002268  90D8               	bcf	status,0,c
  8830   00226A  321B               	rrcf	(??_Button_Reading_Update_Helper+1)^0,f,c
  8831   00226C  321A               	rrcf	??_Button_Reading_Update_Helper^0,f,c
  8832   00226E  90D8               	bcf	status,0,c
  8833   002270  321B               	rrcf	(??_Button_Reading_Update_Helper+1)^0,f,c
  8834   002272  321A               	rrcf	??_Button_Reading_Update_Helper^0,f,c
  8835   002274  D820               	call	PL135	;call to abstracted procedure
  8836   002276  501A               	movf	??_Button_Reading_Update_Helper^0,w,c
  8837   002278  5EDE               	subwf	postinc2,f,c
  8838   00227A  501B               	movf	(??_Button_Reading_Update_Helper+1)^0,w,c
  8839   00227C  5ADD               	subwfb	postdec2,f,c
  8840                           
  8841                           ;mcc_generated_files/touch/mtouch_button.c: 521:         button->reading += MTOUCH_Senso
      +                          r_RawSample_Get(button->sensor) >> ((uint8_t)2u);
  8842   00227E  EE20 F001          	lfsr	2,1
  8843   002282  D820               	call	PL143	;call to abstracted procedure
  8844   002284  EC11  F015         	call	_MTOUCH_Sensor_RawSample_Get
  8845   002288  90D8               	bcf	status,0,c
  8846   00228A  3216               	rrcf	(?_MTOUCH_Sensor_RawSample_Get+1)^0,f,c
  8847   00228C  3215               	rrcf	?_MTOUCH_Sensor_RawSample_Get^0,f,c
  8848   00228E  90D8               	bcf	status,0,c
  8849   002290  3216               	rrcf	(?_MTOUCH_Sensor_RawSample_Get+1)^0,f,c
  8850   002292  3215               	rrcf	?_MTOUCH_Sensor_RawSample_Get^0,f,c
  8851   002294  D810               	call	PL135	;call to abstracted procedure
  8852   002296  5015               	movf	?_MTOUCH_Sensor_RawSample_Get^0,w,c
  8853   002298  26DE               	addwf	postinc2,f,c
  8854   00229A  5016               	movf	(?_MTOUCH_Sensor_RawSample_Get+1)^0,w,c
  8855   00229C  22DD               	addwfc	postdec2,f,c
  8856                           
  8857                           ;mcc_generated_files/touch/mtouch_button.c: 522:     }
  8858   00229E  0012               	return	
  8859   0022A0                     l5534:
  8860                           
  8861                           ;mcc_generated_files/touch/mtouch_button.c: 524:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 525:         button->reading = MTOUCH_Sensor_RawSample_Get(button->sensor);
  8862   0022A0  EE20 F001          	lfsr	2,1
  8863   0022A4  D80F               	call	PL143	;call to abstracted procedure
  8864   0022A6  EC11  F015         	call	_MTOUCH_Sensor_RawSample_Get
  8865   0022AA  D805               	call	PL135	;call to abstracted procedure
  8866   0022AC  C015  FFDE         	movff	?_MTOUCH_Sensor_RawSample_Get,postinc2
  8867   0022B0  C016  FFDD         	movff	?_MTOUCH_Sensor_RawSample_Get+1,postdec2
  8868   0022B4  0012               	return		;funcret
  8869   0022B6                     __end_of_Button_Reading_Update_Helper:
  8870                           	callstack 0
  8871   0022B6                     PL135:
  8872                           	callstack 19
  8873   0022B6  EE20 F004          	lfsr	2,4
  8874   0022BA  5018               	movf	Button_Reading_Update_Helper@button^0,w,c
  8875   0022BC  26D9               	addwf	fsr2l,f,c
  8876   0022BE  5019               	movf	(Button_Reading_Update_Helper@button+1)^0,w,c
  8877   0022C0  22DA               	addwfc	fsr2h,f,c
  8878   0022C2  0012               	return	
  8879   0022C4                     __end_ofPL135:
  8880                           	callstack 0
  8881   0022C4                     PL143:
  8882                           	callstack 19
  8883   0022C4  5018               	movf	Button_Reading_Update_Helper@button^0,w,c
  8884   0022C6  26D9               	addwf	fsr2l,f,c
  8885   0022C8  5019               	movf	(Button_Reading_Update_Helper@button+1)^0,w,c
  8886   0022CA  22DA               	addwfc	fsr2h,f,c
  8887   0022CC  50DF               	movf	indf2,w,c
  8888   0022CE  0012               	return	
  8889   0022D0                     __end_ofPL143:
  8890                           	callstack 0
  8891                           
  8892 ;; *************** function _MTOUCH_Sensor_RawSample_Get *****************
  8893 ;; Defined at:
  8894 ;;		line 622 in file "mcc_generated_files/touch/mtouch_sensor.c"
  8895 ;; Parameters:    Size  Location     Type
  8896 ;;  name            1    wreg     enum E13072
  8897 ;; Auto vars:     Size  Location     Type
  8898 ;;  name            1   22[COMRAM] enum E13072
  8899 ;; Return value:  Size  Location     Type
  8900 ;;                  2   20[COMRAM] unsigned short 
  8901 ;; Registers used:
  8902 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8903 ;; Tracked objects:
  8904 ;;		On entry : 0/0
  8905 ;;		On exit  : 0/0
  8906 ;;		Unchanged: 0/0
  8907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  8908 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8909 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8911 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8912 ;;Total ram usage:        3 bytes
  8913 ;; Hardware stack levels used: 1
  8914 ;; Hardware stack levels required when called: 6
  8915 ;; This function calls:
  8916 ;;		Nothing
  8917 ;; This function is called by:
  8918 ;;		_Button_Reading_Update_Helper
  8919 ;;		_Button_Baseline_Initialize
  8920 ;; This function uses a non-reentrant model
  8921 ;;
  8922                           
  8923                           	psect	text80
  8924   002A22                     __ptext80:
  8925                           	callstack 0
  8926   002A22                     _MTOUCH_Sensor_RawSample_Get:
  8927                           	callstack 19
  8928                           
  8929                           ;incstack = 0
  8930                           ;MTOUCH_Sensor_RawSample_Get@name stored from wreg
  8931   002A22  6E17               	movwf	MTOUCH_Sensor_RawSample_Get@name^0,c
  8932                           
  8933                           ;mcc_generated_files/touch/mtouch_sensor.c: 622: mtouch_sensor_sample_t MTOUCH_Sensor_Ra
      +                          wSample_Get(enum mtouch_sensor_names name);mcc_generated_files/touch/mtouch_sensor.c: 62
      +                          3: {;mcc_generated_files/touch/mtouch_sensor.c: 624:     if (name < 5u)
  8934   002A24  0E05               	movlw	5
  8935   002A26  6017               	cpfslt	MTOUCH_Sensor_RawSample_Get@name^0,c
  8936   002A28  D00B               	goto	l1224
  8937                           
  8938                           ;mcc_generated_files/touch/mtouch_sensor.c: 625:     {;mcc_generated_files/touch/mtouch_
      +                          sensor.c: 626:         return mtouch_sensor[name].rawSample;
  8939   002A2A  5017               	movf	MTOUCH_Sensor_RawSample_Get@name^0,w,c
  8940   002A2C  0D0A               	mullw	10
  8941   002A2E  50F3               	movf	243,w,c
  8942   002A30  0F98               	addlw	low (_mtouch_sensor+7)
  8943   002A32  6ED9               	movwf	fsr2l,c
  8944   002A34  6ADA               	clrf	fsr2h,c
  8945   002A36  CFDE F015          	movff	postinc2,?_MTOUCH_Sensor_RawSample_Get
  8946   002A3A  CFDD F016          	movff	postdec2,?_MTOUCH_Sensor_RawSample_Get+1
  8947   002A3E  0012               	return	
  8948   002A40                     l1224:
  8949                           
  8950                           ;mcc_generated_files/touch/mtouch_sensor.c: 629:         return (mtouch_sensor_sample_t)
      +                          0;
  8951   002A40  6A15               	clrf	?_MTOUCH_Sensor_RawSample_Get^0,c
  8952   002A42  6A16               	clrf	(?_MTOUCH_Sensor_RawSample_Get+1)^0,c
  8953   002A44  0012               	return		;funcret
  8954   002A46                     __end_of_MTOUCH_Sensor_RawSample_Get:
  8955                           	callstack 0
  8956                           
  8957 ;; *************** function _Button_Deviation_Update *****************
  8958 ;; Defined at:
  8959 ;;		line 449 in file "mcc_generated_files/touch/mtouch_button.c"
  8960 ;; Parameters:    Size  Location     Type
  8961 ;;  button          2   20[COMRAM] PTR struct .
  8962 ;;		 -> mtouch_button(85), 
  8963 ;; Auto vars:     Size  Location     Type
  8964 ;;  deviation       4   32[COMRAM] long 
  8965 ;; Return value:  Size  Location     Type
  8966 ;;                  1    wreg      void 
  8967 ;; Registers used:
  8968 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  8969 ;; Tracked objects:
  8970 ;;		On entry : 0/0
  8971 ;;		On exit  : 0/0
  8972 ;;		Unchanged: 0/0
  8973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  8974 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8975 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8976 ;;      Temps:         10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8977 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  8978 ;;Total ram usage:       16 bytes
  8979 ;; Hardware stack levels used: 1
  8980 ;; Hardware stack levels required when called: 6
  8981 ;; This function calls:
  8982 ;;		Nothing
  8983 ;; This function is called by:
  8984 ;;		_Button_Service
  8985 ;; This function uses a non-reentrant model
  8986 ;;
  8987                           
  8988                           	psect	text81
  8989   001AF4                     __ptext81:
  8990                           	callstack 0
  8991   001AF4                     _Button_Deviation_Update:
  8992                           	callstack 21
  8993                           
  8994                           ;mcc_generated_files/touch/mtouch_button.c: 449: static void Button_Deviation_Update(mto
      +                          uch_button_t* button);mcc_generated_files/touch/mtouch_button.c: 450: {;mcc_generated_fi
      +                          les/touch/mtouch_button.c: 451:     int32_t deviation;;mcc_generated_files/touch/mtouch_
      +                          button.c: 453:     deviation = (int32_t)((int32_t)(button->reading) - (int32_t)((button-
      +                          >baseline)>>((uint8_t)4u)));
  8995                           
  8996                           ;incstack = 0
  8997   001AF4  EE20 F006          	lfsr	2,6
  8998   001AF8  D85D               	call	PL183	;call to abstracted procedure
  8999   001AFA  CFDE F017          	movff	postinc2,??_Button_Deviation_Update
  9000   001AFE  CFDE F018          	movff	postinc2,??_Button_Deviation_Update+1
  9001   001B02  CFDE F019          	movff	postinc2,??_Button_Deviation_Update+2
  9002   001B06  CFDE F01A          	movff	postinc2,??_Button_Deviation_Update+3
  9003   001B0A  0E05               	movlw	5
  9004   001B0C  D005               	goto	u5000
  9005   001B0E                     u5005:
  9006   001B0E  90D8               	bcf	status,0,c
  9007   001B10  321A               	rrcf	(??_Button_Deviation_Update+3)^0,f,c
  9008   001B12  3219               	rrcf	(??_Button_Deviation_Update+2)^0,f,c
  9009   001B14  3218               	rrcf	(??_Button_Deviation_Update+1)^0,f,c
  9010   001B16  3217               	rrcf	??_Button_Deviation_Update^0,f,c
  9011   001B18                     u5000:
  9012   001B18  2EE8               	decfsz	wreg,f,c
  9013   001B1A  D7F9               	goto	u5005
  9014   001B1C  EE20 F004          	lfsr	2,4
  9015   001B20  D849               	call	PL183	;call to abstracted procedure
  9016   001B22  CFDE F01B          	movff	postinc2,??_Button_Deviation_Update+4
  9017   001B26  CFDD F01C          	movff	postdec2,??_Button_Deviation_Update+5
  9018   001B2A  501B               	movf	(??_Button_Deviation_Update+4)^0,w,c
  9019   001B2C  6E1D               	movwf	(??_Button_Deviation_Update+6)^0,c
  9020   001B2E  501C               	movf	(??_Button_Deviation_Update+5)^0,w,c
  9021   001B30  6E1E               	movwf	(??_Button_Deviation_Update+7)^0,c
  9022   001B32  6A1F               	clrf	(??_Button_Deviation_Update+8)^0,c
  9023   001B34  6A20               	clrf	(??_Button_Deviation_Update+9)^0,c
  9024   001B36  5017               	movf	??_Button_Deviation_Update^0,w,c
  9025   001B38  5C1D               	subwf	(??_Button_Deviation_Update+6)^0,w,c
  9026   001B3A  6E21               	movwf	Button_Deviation_Update@deviation^0,c
  9027   001B3C  5018               	movf	(??_Button_Deviation_Update+1)^0,w,c
  9028   001B3E  581E               	subwfb	(??_Button_Deviation_Update+7)^0,w,c
  9029   001B40  6E22               	movwf	(Button_Deviation_Update@deviation+1)^0,c
  9030   001B42  5019               	movf	(??_Button_Deviation_Update+2)^0,w,c
  9031   001B44  581F               	subwfb	(??_Button_Deviation_Update+8)^0,w,c
  9032   001B46  6E23               	movwf	(Button_Deviation_Update@deviation+2)^0,c
  9033   001B48  501A               	movf	(??_Button_Deviation_Update+3)^0,w,c
  9034   001B4A  5820               	subwfb	(??_Button_Deviation_Update+9)^0,w,c
  9035   001B4C  6E24               	movwf	(Button_Deviation_Update@deviation+3)^0,c
  9036                           
  9037                           ;mcc_generated_files/touch/mtouch_button.c: 456:     deviation = deviation >> (button->s
      +                          caling);
  9038   001B4E  EE20 F010          	lfsr	2,16
  9039   001B52  D830               	call	PL183	;call to abstracted procedure
  9040   001B54  50DF               	movf	indf2,w,c
  9041   001B56  6E17               	movwf	??_Button_Deviation_Update^0,c
  9042   001B58  2817               	incf	??_Button_Deviation_Update^0,w,c
  9043   001B5A  6E18               	movwf	(??_Button_Deviation_Update+1)^0,c
  9044   001B5C  D005               	goto	u5010
  9045   001B5E                     u5015:
  9046   001B5E  3424               	rlcf	(Button_Deviation_Update@deviation+3)^0,w,c
  9047   001B60  3224               	rrcf	(Button_Deviation_Update@deviation+3)^0,f,c
  9048   001B62  3223               	rrcf	(Button_Deviation_Update@deviation+2)^0,f,c
  9049   001B64  3222               	rrcf	(Button_Deviation_Update@deviation+1)^0,f,c
  9050   001B66  3221               	rrcf	Button_Deviation_Update@deviation^0,f,c
  9051   001B68                     u5010:
  9052   001B68  2E18               	decfsz	(??_Button_Deviation_Update+1)^0,f,c
  9053   001B6A  D7F9               	goto	u5015
  9054                           
  9055                           ;mcc_generated_files/touch/mtouch_button.c: 459:     if (deviation > ((0x7f)))
  9056   001B6C  BE24               	btfsc	(Button_Deviation_Update@deviation+3)^0,7,c
  9057   001B6E  D00C               	goto	l5768
  9058   001B70  5024               	movf	(Button_Deviation_Update@deviation+3)^0,w,c
  9059   001B72  1023               	iorwf	(Button_Deviation_Update@deviation+2)^0,w,c
  9060   001B74  1022               	iorwf	(Button_Deviation_Update@deviation+1)^0,w,c
  9061   001B76  E103               	bnz	u5020
  9062   001B78  0E80               	movlw	128
  9063   001B7A  5C21               	subwf	Button_Deviation_Update@deviation^0,w,c
  9064   001B7C  E305               	bnc	l5768
  9065   001B7E                     u5020:
  9066                           
  9067                           ;mcc_generated_files/touch/mtouch_button.c: 460:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 461:         deviation = ((0x7f));
  9068   001B7E  0E7F               	movlw	127
  9069   001B80  6E21               	movwf	Button_Deviation_Update@deviation^0,c
  9070   001B82  6A22               	clrf	(Button_Deviation_Update@deviation+1)^0,c
  9071   001B84  6A23               	clrf	(Button_Deviation_Update@deviation+2)^0,c
  9072   001B86  6A24               	clrf	(Button_Deviation_Update@deviation+3)^0,c
  9073   001B88                     l5768:
  9074                           
  9075                           ;mcc_generated_files/touch/mtouch_button.c: 463:     if (deviation < ((-1-0x7f)))
  9076   001B88  AE24               	btfss	(Button_Deviation_Update@deviation+3)^0,7,c
  9077   001B8A  D00E               	goto	l5772
  9078   001B8C  0E80               	movlw	128
  9079   001B8E  5C21               	subwf	Button_Deviation_Update@deviation^0,w,c
  9080   001B90  0EFF               	movlw	255
  9081   001B92  5822               	subwfb	(Button_Deviation_Update@deviation+1)^0,w,c
  9082   001B94  0EFF               	movlw	255
  9083   001B96  5823               	subwfb	(Button_Deviation_Update@deviation+2)^0,w,c
  9084   001B98  0EFF               	movlw	255
  9085   001B9A  5824               	subwfb	(Button_Deviation_Update@deviation+3)^0,w,c
  9086   001B9C  E205               	bc	l5772
  9087                           
  9088                           ;mcc_generated_files/touch/mtouch_button.c: 464:     {;mcc_generated_files/touch/mtouch_
      +                          button.c: 465:         deviation = ((-1-0x7f));
  9089   001B9E  0E80               	movlw	128
  9090   001BA0  6E21               	movwf	Button_Deviation_Update@deviation^0,c
  9091   001BA2  6822               	setf	(Button_Deviation_Update@deviation+1)^0,c
  9092   001BA4  6823               	setf	(Button_Deviation_Update@deviation+2)^0,c
  9093   001BA6  6824               	setf	(Button_Deviation_Update@deviation+3)^0,c
  9094   001BA8                     l5772:
  9095                           
  9096                           ;mcc_generated_files/touch/mtouch_button.c: 468:     button->deviation = (mtouch_button_
      +                          deviation_t)deviation;
  9097   001BA8  EE20 F00A          	lfsr	2,10
  9098   001BAC  D803               	call	PL183	;call to abstracted procedure
  9099   001BAE  C021  FFDF         	movff	Button_Deviation_Update@deviation,indf2
  9100   001BB2  0012               	return		;funcret
  9101   001BB4                     __end_of_Button_Deviation_Update:
  9102                           	callstack 0
  9103   001BB4                     PL183:
  9104                           	callstack 21
  9105   001BB4  5015               	movf	Button_Deviation_Update@button^0,w,c
  9106   001BB6  26D9               	addwf	fsr2l,f,c
  9107   001BB8  5016               	movf	(Button_Deviation_Update@button+1)^0,w,c
  9108   001BBA  22DA               	addwfc	fsr2h,f,c
  9109   001BBC  0012               	return	
  9110   001BBE                     __end_ofPL183:
  9111                           	callstack 0
  9112                           
  9113 ;; *************** function _MTOUCH_Button_SetNotPressedCallback *****************
  9114 ;; Defined at:
  9115 ;;		line 626 in file "mcc_generated_files/touch/mtouch_button.c"
  9116 ;; Parameters:    Size  Location     Type
  9117 ;;  callback        3   20[COMRAM] PTR FTN(enum E13138,)voi
  9118 ;;		 -> ProcessButtonRelease(1), 
  9119 ;; Auto vars:     Size  Location     Type
  9120 ;;		None
  9121 ;; Return value:  Size  Location     Type
  9122 ;;                  1    wreg      void 
  9123 ;; Registers used:
  9124 ;;		wreg, status,2, status,0
  9125 ;; Tracked objects:
  9126 ;;		On entry : 3F/E
  9127 ;;		On exit  : 3F/E
  9128 ;;		Unchanged: 3F/0
  9129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  9130 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9133 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9134 ;;Total ram usage:        3 bytes
  9135 ;; Hardware stack levels used: 1
  9136 ;; Hardware stack levels required when called: 6
  9137 ;; This function calls:
  9138 ;;		Nothing
  9139 ;; This function is called by:
  9140 ;;		_main
  9141 ;; This function uses a non-reentrant model
  9142 ;;
  9143                           
  9144                           	psect	text82
  9145   002D04                     __ptext82:
  9146                           	callstack 0
  9147   002D04                     _MTOUCH_Button_SetNotPressedCallback:
  9148                           	callstack 24
  9149                           
  9150                           ; BSR set to: 14
  9151                           ;mcc_generated_files/touch/mtouch_button.c: 626: void MTOUCH_Button_SetNotPressedCallbac
      +                          k(void (*callback)(enum mtouch_button_names));mcc_generated_files/touch/mtouch_button.c:
      +                           627: {;mcc_generated_files/touch/mtouch_button.c: 628:     callback_notPressed = callba
      +                          ck;
  9152                           
  9153                           ;incstack = 0
  9154   002D04  C015  F0D2         	movff	MTOUCH_Button_SetNotPressedCallback@callback,_callback_notPressed
  9155   002D08  C016  F0D3         	movff	MTOUCH_Button_SetNotPressedCallback@callback+1,_callback_notPressed+1
  9156   002D0C  C017  F0D4         	movff	MTOUCH_Button_SetNotPressedCallback@callback+2,_callback_notPressed+2
  9157                           
  9158                           ; BSR set to: 14
  9159   002D10  0012               	return		;funcret
  9160   002D12                     __end_of_MTOUCH_Button_SetNotPressedCallback:
  9161                           	callstack 0
  9162                           
  9163 ;; *************** function _ApplicationTask *****************
  9164 ;; Defined at:
  9165 ;;		line 29 in file "application.c"
  9166 ;; Parameters:    Size  Location     Type
  9167 ;;		None
  9168 ;; Auto vars:     Size  Location     Type
  9169 ;;  motorSpeed      2   26[COMRAM] unsigned short 
  9170 ;; Return value:  Size  Location     Type
  9171 ;;                  1    wreg      void 
  9172 ;; Registers used:
  9173 ;;		wreg, status,2, status,0, cstack
  9174 ;; Tracked objects:
  9175 ;;		On entry : 0/E
  9176 ;;		On exit  : 0/0
  9177 ;;		Unchanged: 0/0
  9178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  9179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9180 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9181 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9182 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9183 ;;Total ram usage:        4 bytes
  9184 ;; Hardware stack levels used: 1
  9185 ;; Hardware stack levels required when called: 7
  9186 ;; This function calls:
  9187 ;;		_ClearButton
  9188 ;;		_ClearEvent
  9189 ;;		_GetButton
  9190 ;;		_GetEvent
  9191 ;;		_GetMotorSpeed
  9192 ;;		_PWM4_LoadDutyValue
  9193 ;; This function is called by:
  9194 ;;		_main
  9195 ;; This function uses a non-reentrant model
  9196 ;;
  9197                           
  9198                           	psect	text83
  9199   001784                     __ptext83:
  9200                           	callstack 0
  9201   001784                     _ApplicationTask:
  9202                           	callstack 23
  9203                           
  9204                           ;application.c: 33:     switch (state)
  9205                           
  9206                           ; BSR set to: 14
  9207                           ;incstack = 0
  9208   001784  D064               	goto	l5178
  9209   001786                     l5098:
  9210                           
  9211                           ;application.c: 37:             if (GetEvent() != NO_KEY)
  9212   001786  EC89  F016         	call	_GetEvent	;wreg free
  9213   00178A  0900               	iorlw	0
  9214   00178C  B4D8               	btfsc	status,2,c
  9215   00178E  0012               	return	
  9216                           
  9217                           ; BSR set to: 0
  9218                           ;application.c: 38:             {;application.c: 39:                 buttonNo = GetButto
      +                          n();
  9219   001790  EC94  F016         	call	_GetButton	;wreg free
  9220   001794  6E3F               	movwf	_buttonNo^0,c
  9221                           
  9222                           ; BSR set to: 0
  9223                           ;application.c: 40:                 if (buttonNo < MAX_KEYS)
  9224   001796  0E04               	movlw	4
  9225   001798  603F               	cpfslt	_buttonNo^0,c
  9226   00179A  D003               	goto	l5106
  9227                           
  9228                           ; BSR set to: 0
  9229                           ;application.c: 41:                 {;application.c: 42:                     state = (1)
      +                          ;
  9230   00179C  6A36               	clrf	(_state+1)^0,c
  9231   00179E  0E01               	movlw	1
  9232   0017A0  6E35               	movwf	_state^0,c
  9233   0017A2                     l5106:
  9234                           
  9235                           ; BSR set to: 0
  9236                           ;application.c: 44:                 ClearButton();
  9237   0017A2  EC98  F016         	call	_ClearButton	;wreg free
  9238                           
  9239                           ; BSR set to: 0
  9240                           ;application.c: 45:                 ClearEvent();
  9241   0017A6  EF96  F016         	goto	_ClearEvent	;wreg free
  9242   0017AA                     l5110:
  9243                           
  9244                           ;application.c: 50:             if (buttonNo == BUTTON1)
  9245   0017AA  043F               	decf	_buttonNo^0,w,c
  9246   0017AC  E103               	bnz	l5114
  9247                           
  9248                           ;application.c: 51:             {;application.c: 52:                 state = (2);
  9249   0017AE  6A36               	clrf	(_state+1)^0,c
  9250   0017B0  0E02               	movlw	2
  9251   0017B2  D00B               	goto	L9
  9252   0017B4                     l5114:
  9253   0017B4  0E02               	movlw	2
  9254   0017B6  183F               	xorwf	_buttonNo^0,w,c
  9255   0017B8  E103               	bnz	l5118
  9256                           
  9257                           ;application.c: 55:             {;application.c: 56:                 state = (3);
  9258   0017BA  6A36               	clrf	(_state+1)^0,c
  9259   0017BC  0E03               	movlw	3
  9260   0017BE  D005               	goto	L9
  9261   0017C0                     l5118:
  9262   0017C0  0E03               	movlw	3
  9263   0017C2  183F               	xorwf	_buttonNo^0,w,c
  9264   0017C4  E104               	bnz	l1420
  9265                           
  9266                           ;application.c: 59:             {;application.c: 60:                 state = (4);
  9267   0017C6  6A36               	clrf	(_state+1)^0,c
  9268   0017C8  0E04               	movlw	4
  9269   0017CA                     L9:
  9270   0017CA  6E35               	movwf	_state^0,c
  9271                           
  9272                           ;application.c: 61:             }
  9273   0017CC  D002               	goto	l1417
  9274   0017CE                     l1420:
  9275                           
  9276                           ;application.c: 63:             {;application.c: 64:                 state = (0);
  9277   0017CE  6A35               	clrf	_state^0,c
  9278   0017D0  6A36               	clrf	(_state+1)^0,c
  9279   0017D2                     l1417:
  9280                           
  9281                           ;application.c: 67:             buttonNo = NO_KEY;
  9282   0017D2  6A3F               	clrf	_buttonNo^0,c
  9283                           
  9284                           ;application.c: 68:             break;
  9285   0017D4  0012               	return	
  9286   0017D6                     l5122:
  9287                           
  9288                           ;application.c: 71:             if (motorState != (1))
  9289   0017D6  0433               	decf	_motorState^0,w,c
  9290   0017D8  1034               	iorwf	(_motorState+1)^0,w,c
  9291   0017DA  E00F               	bz	l1423
  9292                           
  9293                           ;application.c: 72:             {;application.c: 73:                 motorState = (1);
  9294   0017DC  6A34               	clrf	(_motorState+1)^0,c
  9295   0017DE  0E01               	movlw	1
  9296   0017E0  6E33               	movwf	_motorState^0,c
  9297   0017E2  8885               	bsf	133,4,c	;volatile
  9298                           
  9299                           ;application.c: 77:                 PWM4_LoadDutyValue((180));
  9300   0017E4  6A16               	clrf	(PWM4_LoadDutyValue@dutyValue+1)^0,c
  9301   0017E6  0EB4               	movlw	180
  9302   0017E8  6E15               	movwf	PWM4_LoadDutyValue@dutyValue^0,c
  9303   0017EA  EC37  F014         	call	_PWM4_LoadDutyValue	;wreg free
  9304   0017EE  9C84               	bcf	132,6,c	;volatile
  9305   0017F0  ECB2  F00B         	call	PL155	;call to abstracted procedure
  9306   0017F4  8483               	bsf	131,2,c	;volatile
  9307   0017F6  9A85               	bcf	133,5,c	;volatile
  9308   0017F8  0012               	return	
  9309   0017FA                     l1423:
  9310                           
  9311                           ;application.c: 83:             {;application.c: 84:                 state = (0);
  9312   0017FA  6A35               	clrf	_state^0,c
  9313   0017FC  6A36               	clrf	(_state+1)^0,c
  9314   0017FE  0012               	return	
  9315   001800                     l5146:
  9316                           
  9317                           ;application.c: 89:             if (motorState == (1))
  9318   001800  0433               	decf	_motorState^0,w,c
  9319   001802  1034               	iorwf	(_motorState+1)^0,w,c
  9320   001804  E1FA               	bnz	l1423
  9321                           
  9322                           ;application.c: 90:             {;application.c: 91:                 motorState = (0);
  9323   001806  6A33               	clrf	_motorState^0,c
  9324   001808  6A34               	clrf	(_motorState+1)^0,c
  9325                           
  9326                           ;application.c: 94:             do { LATDbits.LATD4 = 0; } while(0);
  9327   00180A  9885               	bcf	133,4,c	;volatile
  9328                           
  9329                           ;application.c: 97:             PWM4_LoadDutyValue((0));
  9330   00180C  6A16               	clrf	(PWM4_LoadDutyValue@dutyValue+1)^0,c
  9331   00180E  6A15               	clrf	PWM4_LoadDutyValue@dutyValue^0,c
  9332   001810  EC37  F014         	call	_PWM4_LoadDutyValue	;wreg free
  9333   001814  8C84               	bsf	132,6,c	;volatile
  9334   001816  ECB2  F00B         	call	PL155	;call to abstracted procedure
  9335   00181A  8A85               	bsf	133,5,c	;volatile
  9336   00181C  9483               	bcf	131,2,c	;volatile
  9337   00181E  0012               	return	
  9338   001820                     l5168:
  9339                           
  9340                           ;application.c: 109:             if (motorState == (1))
  9341   001820  0433               	decf	_motorState^0,w,c
  9342   001822  1034               	iorwf	(_motorState+1)^0,w,c
  9343   001824  E1EA               	bnz	l1423
  9344                           
  9345                           ;application.c: 110:             {;application.c: 112:                 motorSpeed = GetM
      +                          otorSpeed(keyInfo.sliderADCValue);
  9346   001826  C08F  F015         	movff	_keyInfo+2,GetMotorSpeed@adcVal
  9347   00182A  C090  F016         	movff	_keyInfo+3,GetMotorSpeed@adcVal+1
  9348   00182E  EC45  F00B         	call	_GetMotorSpeed	;wreg free
  9349   001832  C015  F01B         	movff	?_GetMotorSpeed,ApplicationTask@motorSpeed
  9350   001836  C016  F01C         	movff	?_GetMotorSpeed+1,ApplicationTask@motorSpeed+1
  9351                           
  9352                           ;application.c: 114:                 PWM4_LoadDutyValue(motorSpeed);
  9353   00183A  C01B  F015         	movff	ApplicationTask@motorSpeed,PWM4_LoadDutyValue@dutyValue
  9354   00183E  C01C  F016         	movff	ApplicationTask@motorSpeed+1,PWM4_LoadDutyValue@dutyValue+1
  9355   001842  EC37  F014         	call	_PWM4_LoadDutyValue	;wreg free
  9356                           
  9357                           ;application.c: 115:                 keyInfo.sliderADCValue = 0;
  9358   001846  0100               	movlb	0	; () banked
  9359   001848  6B8F               	clrf	(_keyInfo+2)& (0+255),b
  9360   00184A  6B90               	clrf	(_keyInfo+3)& (0+255),b
  9361   00184C  D7D6               	goto	l1423
  9362   00184E                     l5178:
  9363   00184E  C035  F019         	movff	_state,??_ApplicationTask
  9364   001852  C036  F01A         	movff	_state+1,??_ApplicationTask+1
  9365                           
  9366                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9367                           ; Switch size 1, requested type "space"
  9368                           ; Number of cases is 1, Range of values is 0 to 0
  9369                           ; switch strategies available:
  9370                           ; Name         Instructions Cycles
  9371                           ; simple_byte            4     3 (average)
  9372                           ;	Chosen strategy is simple_byte
  9373   001856  501A               	movf	(??_ApplicationTask+1)^0,w,c
  9374   001858  E1D0               	bnz	l1423
  9375                           
  9376                           ; Switch size 1, requested type "space"
  9377                           ; Number of cases is 5, Range of values is 0 to 4
  9378                           ; switch strategies available:
  9379                           ; Name         Instructions Cycles
  9380                           ; simple_byte           16     9 (average)
  9381                           ;	Chosen strategy is simple_byte
  9382   00185A  5019               	movf	??_ApplicationTask^0,w,c
  9383   00185C  E094               	bz	l5098
  9384   00185E  0A01               	xorlw	1	; case 1
  9385   001860  E0A4               	bz	l5110
  9386   001862  0A03               	xorlw	3	; case 2
  9387   001864  E0B8               	bz	l5122
  9388   001866  0A01               	xorlw	1	; case 3
  9389   001868  E0CB               	bz	l5146
  9390   00186A  0A07               	xorlw	7	; case 4
  9391   00186C  E0D9               	bz	l5168
  9392   00186E  D7C5               	goto	l1423
  9393   001870                     __end_of_ApplicationTask:
  9394                           	callstack 0
  9395                           
  9396 ;; *************** function _PWM4_LoadDutyValue *****************
  9397 ;; Defined at:
  9398 ;;		line 62 in file "mcc_generated_files/pwm/src/pwm4.c"
  9399 ;; Parameters:    Size  Location     Type
  9400 ;;  dutyValue       2   20[COMRAM] unsigned short 
  9401 ;; Auto vars:     Size  Location     Type
  9402 ;;		None
  9403 ;; Return value:  Size  Location     Type
  9404 ;;                  1    wreg      void 
  9405 ;; Registers used:
  9406 ;;		wreg, status,2, status,0
  9407 ;; Tracked objects:
  9408 ;;		On entry : 0/E
  9409 ;;		On exit  : 0/0
  9410 ;;		Unchanged: 0/0
  9411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  9412 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9414 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9415 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9416 ;;Total ram usage:        4 bytes
  9417 ;; Hardware stack levels used: 1
  9418 ;; Hardware stack levels required when called: 6
  9419 ;; This function calls:
  9420 ;;		Nothing
  9421 ;; This function is called by:
  9422 ;;		_ApplicationTask
  9423 ;; This function uses a non-reentrant model
  9424 ;;
  9425                           
  9426                           	psect	text84
  9427   00286E                     __ptext84:
  9428                           	callstack 0
  9429   00286E                     _PWM4_LoadDutyValue:
  9430                           	callstack 23
  9431                           
  9432                           ;mcc_generated_files/pwm/src/pwm4.c: 62:  void PWM4_LoadDutyValue(uint16_t dutyValue);mc
      +                          c_generated_files/pwm/src/pwm4.c: 63:  {;mcc_generated_files/pwm/src/pwm4.c: 65:      PW
      +                          M4DCH = (uint8_t) ((dutyValue & 0x03FCu) >> 2);
  9433                           
  9434                           ;incstack = 0
  9435   00286E  C015  F017         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  9436   002872  C016  F018         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
  9437   002876  90D8               	bcf	status,0,c
  9438   002878  3218               	rrcf	(??_PWM4_LoadDutyValue+1)^0,f,c
  9439   00287A  3217               	rrcf	??_PWM4_LoadDutyValue^0,f,c
  9440   00287C  90D8               	bcf	status,0,c
  9441   00287E  3218               	rrcf	(??_PWM4_LoadDutyValue+1)^0,f,c
  9442   002880  3217               	rrcf	??_PWM4_LoadDutyValue^0,f,c
  9443   002882  5017               	movf	??_PWM4_LoadDutyValue^0,w,c
  9444   002884  6EA0               	movwf	160,c	;volatile
  9445                           
  9446                           ;mcc_generated_files/pwm/src/pwm4.c: 68:      PWM4DCL = (uint8_t) ((dutyValue & 0x0003u)
      +                           << 6);
  9447   002886  C015  F017         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  9448   00288A  0E03               	movlw	3
  9449   00288C  1617               	andwf	??_PWM4_LoadDutyValue^0,f,c
  9450   00288E  0E06               	movlw	6
  9451   002890  6E18               	movwf	(??_PWM4_LoadDutyValue+1)^0,c
  9452   002892                     u3905:
  9453   002892  90D8               	bcf	status,0,c
  9454   002894  3617               	rlcf	??_PWM4_LoadDutyValue^0,f,c
  9455   002896  2E18               	decfsz	(??_PWM4_LoadDutyValue+1)^0,f,c
  9456   002898  D7FC               	goto	u3905
  9457   00289A  5017               	movf	??_PWM4_LoadDutyValue^0,w,c
  9458   00289C  6E9F               	movwf	159,c	;volatile
  9459   00289E  0012               	return		;funcret
  9460   0028A0                     __end_of_PWM4_LoadDutyValue:
  9461                           	callstack 0
  9462                           
  9463 ;; *************** function _GetMotorSpeed *****************
  9464 ;; Defined at:
  9465 ;;		line 174 in file "application.c"
  9466 ;; Parameters:    Size  Location     Type
  9467 ;;  adcVal          2   20[COMRAM] unsigned short 
  9468 ;; Auto vars:     Size  Location     Type
  9469 ;;  retVal          2   22[COMRAM] unsigned short 
  9470 ;; Return value:  Size  Location     Type
  9471 ;;                  2   20[COMRAM] unsigned short 
  9472 ;; Registers used:
  9473 ;;		wreg, status,2, status,0
  9474 ;; Tracked objects:
  9475 ;;		On entry : 0/E
  9476 ;;		On exit  : 0/0
  9477 ;;		Unchanged: 0/0
  9478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  9479 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9480 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9482 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9483 ;;Total ram usage:        4 bytes
  9484 ;; Hardware stack levels used: 1
  9485 ;; Hardware stack levels required when called: 6
  9486 ;; This function calls:
  9487 ;;		Nothing
  9488 ;; This function is called by:
  9489 ;;		_ApplicationTask
  9490 ;; This function uses a non-reentrant model
  9491 ;;
  9492                           
  9493                           	psect	text85
  9494   00168A                     __ptext85:
  9495                           	callstack 0
  9496   00168A                     _GetMotorSpeed:
  9497                           	callstack 23
  9498                           
  9499                           ;application.c: 178:     if (adcVal < ((20)))
  9500                           
  9501                           ;incstack = 0
  9502   00168A  5016               	movf	(GetMotorSpeed@adcVal+1)^0,w,c
  9503   00168C  E108               	bnz	l5008
  9504   00168E  0E14               	movlw	20
  9505   001690  5C15               	subwf	GetMotorSpeed@adcVal^0,w,c
  9506   001692  E205               	bc	l5008
  9507                           
  9508                           ;application.c: 179:     {;application.c: 181:         do { LATCbits.LATC6 = 1; } while(
      +                          0); do { LATCbits.LATC5 = 1; } while(0); do { LATCbits.LATC4 = 1; } while(0); do { LATDb
      +                          its.LATD6 = 1; } while(0); do { LATBbits.LATB1 = 1; } while(0); do { LATCbits.LATC7 = 1;
      +                           } while(0);
  9509   001694  8C84               	bsf	132,6,c	;volatile
  9510   001696  D866               	call	PL155	;call to abstracted procedure
  9511   001698                     l1505:
  9512                           
  9513                           ;application.c: 182:         retVal = (0);
  9514   001698  6A17               	clrf	GetMotorSpeed@retVal^0,c
  9515   00169A  6A18               	clrf	(GetMotorSpeed@retVal+1)^0,c
  9516                           
  9517                           ;application.c: 183:     }
  9518   00169C  D05E               	goto	l1506
  9519   00169E                     l5008:
  9520   00169E  5016               	movf	(GetMotorSpeed@adcVal+1)^0,w,c
  9521   0016A0  E103               	bnz	u3950
  9522   0016A2  0E14               	movlw	20
  9523   0016A4  5C15               	subwf	GetMotorSpeed@adcVal^0,w,c
  9524   0016A6  E30A               	bnc	l5014
  9525   0016A8                     u3950:
  9526   0016A8  5016               	movf	(GetMotorSpeed@adcVal+1)^0,w,c
  9527   0016AA  E108               	bnz	l5014
  9528   0016AC  0E3C               	movlw	60
  9529   0016AE  5C15               	subwf	GetMotorSpeed@adcVal^0,w,c
  9530   0016B0  E205               	bc	l5014
  9531                           
  9532                           ;application.c: 185:     {;application.c: 187:         do { LATCbits.LATC6 = 0; } while(
      +                          0); do { LATCbits.LATC5 = 1; } while(0); do { LATCbits.LATC4 = 1; } while(0); do { LATDb
      +                          its.LATD6 = 1; } while(0); do { LATBbits.LATB1 = 1; } while(0); do { LATCbits.LATC7 = 1;
      +                           } while(0);
  9533   0016B2  9C84               	bcf	132,6,c	;volatile
  9534   0016B4  D857               	call	PL155	;call to abstracted procedure
  9535                           
  9536                           ;application.c: 188:         retVal = ((180));
  9537   0016B6  6A18               	clrf	(GetMotorSpeed@retVal+1)^0,c
  9538   0016B8  0EB4               	movlw	180
  9539   0016BA  D04E               	goto	L10
  9540   0016BC                     l5014:
  9541   0016BC  5016               	movf	(GetMotorSpeed@adcVal+1)^0,w,c
  9542   0016BE  E103               	bnz	u3970
  9543   0016C0  0E3C               	movlw	60
  9544   0016C2  5C15               	subwf	GetMotorSpeed@adcVal^0,w,c
  9545   0016C4  E30E               	bnc	l5020
  9546   0016C6                     u3970:
  9547   0016C6  5016               	movf	(GetMotorSpeed@adcVal+1)^0,w,c
  9548   0016C8  E10C               	bnz	l5020
  9549   0016CA  0E64               	movlw	100
  9550   0016CC  5C15               	subwf	GetMotorSpeed@adcVal^0,w,c
  9551   0016CE  E209               	bc	l5020
  9552                           
  9553                           ;application.c: 191:     {;application.c: 193:         do { LATCbits.LATC6 = 0; } while(
      +                          0); do { LATCbits.LATC5 = 0; } while(0); do { LATCbits.LATC4 = 1; } while(0); do { LATDb
      +                          its.LATD6 = 1; } while(0); do { LATBbits.LATB1 = 1; } while(0); do { LATCbits.LATC7 = 1;
      +                           } while(0);;
  9554   0016D0  9C84               	bcf	132,6,c	;volatile
  9555   0016D2  9A84               	bcf	132,5,c	;volatile
  9556   0016D4  8884               	bsf	132,4,c	;volatile
  9557   0016D6  8C85               	bsf	133,6,c	;volatile
  9558   0016D8  8283               	bsf	131,1,c	;volatile
  9559   0016DA  8E84               	bsf	132,7,c	;volatile
  9560                           
  9561                           ;application.c: 194:         retVal = (((180)) + (70));
  9562   0016DC  6A18               	clrf	(GetMotorSpeed@retVal+1)^0,c
  9563   0016DE  0EFA               	movlw	250
  9564   0016E0  D03B               	goto	L10
  9565   0016E2                     l5020:
  9566   0016E2  5016               	movf	(GetMotorSpeed@adcVal+1)^0,w,c
  9567   0016E4  E103               	bnz	u3990
  9568   0016E6  0E64               	movlw	100
  9569   0016E8  5C15               	subwf	GetMotorSpeed@adcVal^0,w,c
  9570   0016EA  E30C               	bnc	l5026
  9571   0016EC                     u3990:
  9572   0016EC  5016               	movf	(GetMotorSpeed@adcVal+1)^0,w,c
  9573   0016EE  E10A               	bnz	l5026
  9574   0016F0  0E8C               	movlw	140
  9575   0016F2  5C15               	subwf	GetMotorSpeed@adcVal^0,w,c
  9576   0016F4  E207               	bc	l5026
  9577                           
  9578                           ;application.c: 197:     {;application.c: 199:         do { LATCbits.LATC6 = 0; } while(
      +                          0); do { LATCbits.LATC5 = 0; } while(0); do { LATCbits.LATC4 = 0; } while(0); do { LATDb
      +                          its.LATD6 = 1; } while(0); do { LATBbits.LATB1 = 1; } while(0); do { LATCbits.LATC7 = 1;
      +                           } while(0);
  9579   0016F6  9C84               	bcf	132,6,c	;volatile
  9580   0016F8  9A84               	bcf	132,5,c	;volatile
  9581   0016FA  9884               	bcf	132,4,c	;volatile
  9582   0016FC  8C85               	bsf	133,6,c	;volatile
  9583                           
  9584                           ;application.c: 200:         retVal = ((((180)) + (70)) + (70));
  9585   0016FE  D83D               	call	PL233	;call to abstracted procedure
  9586   001700  0E40               	movlw	64
  9587   001702  D02A               	goto	L10
  9588   001704                     l5026:
  9589   001704  5016               	movf	(GetMotorSpeed@adcVal+1)^0,w,c
  9590   001706  E103               	bnz	u4010
  9591   001708  0E8C               	movlw	140
  9592   00170A  5C15               	subwf	GetMotorSpeed@adcVal^0,w,c
  9593   00170C  E309               	bnc	l5032
  9594   00170E                     u4010:
  9595   00170E  5016               	movf	(GetMotorSpeed@adcVal+1)^0,w,c
  9596   001710  E107               	bnz	l5032
  9597   001712  0EB4               	movlw	180
  9598   001714  5C15               	subwf	GetMotorSpeed@adcVal^0,w,c
  9599   001716  E204               	bc	l5032
  9600                           
  9601                           ;application.c: 203:     {;application.c: 205:         do { LATCbits.LATC6 = 0; } while(
      +                          0); do { LATCbits.LATC5 = 0; } while(0); do { LATCbits.LATC4 = 0; } while(0); do { LATDb
      +                          its.LATD6 = 0; } while(0); do { LATBbits.LATB1 = 1; } while(0); do { LATCbits.LATC7 = 1;
      +                           } while(0);
  9602   001718  D82B               	call	PL197	;call to abstracted procedure
  9603                           
  9604                           ;application.c: 206:         retVal = (((((180)) + (70)) + (70)) + (70));
  9605   00171A  D82F               	call	PL233	;call to abstracted procedure
  9606   00171C  0E86               	movlw	134
  9607   00171E  D01C               	goto	L10
  9608   001720                     l5032:
  9609   001720  5016               	movf	(GetMotorSpeed@adcVal+1)^0,w,c
  9610   001722  E103               	bnz	u4030
  9611   001724  0EB4               	movlw	180
  9612   001726  5C15               	subwf	GetMotorSpeed@adcVal^0,w,c
  9613   001728  E30C               	bnc	l5038
  9614   00172A                     u4030:
  9615   00172A  5016               	movf	(GetMotorSpeed@adcVal+1)^0,w,c
  9616   00172C  E10A               	bnz	l5038
  9617   00172E  0ED7               	movlw	215
  9618   001730  5C15               	subwf	GetMotorSpeed@adcVal^0,w,c
  9619   001732  E207               	bc	l5038
  9620                           
  9621                           ;application.c: 209:     {;application.c: 211:         do { LATCbits.LATC6 = 0; } while(
      +                          0); do { LATCbits.LATC5 = 0; } while(0); do { LATCbits.LATC4 = 0; } while(0); do { LATDb
      +                          its.LATD6 = 0; } while(0); do { LATBbits.LATB1 = 0; } while(0); do { LATCbits.LATC7 = 1;
      +                           } while(0);
  9622   001734  D81D               	call	PL197	;call to abstracted procedure
  9623   001736  9283               	bcf	131,1,c	;volatile
  9624   001738  8E84               	bsf	132,7,c	;volatile
  9625                           
  9626                           ;application.c: 212:         retVal = ((((((180)) + (70)) + (70)) + (70)) + (70));
  9627   00173A  0E01               	movlw	1
  9628   00173C  6E18               	movwf	(GetMotorSpeed@retVal+1)^0,c
  9629   00173E  0ECC               	movlw	204
  9630   001740  D00B               	goto	L10
  9631   001742                     l5038:
  9632   001742  5016               	movf	(GetMotorSpeed@adcVal+1)^0,w,c
  9633   001744  E103               	bnz	u4050
  9634   001746  0ED7               	movlw	215
  9635   001748  5C15               	subwf	GetMotorSpeed@adcVal^0,w,c
  9636   00174A  E3A6               	bnc	l1505
  9637   00174C                     u4050:
  9638                           
  9639                           ;application.c: 215:     {;application.c: 217:         do { LATCbits.LATC6 = 0; } while(
      +                          0); do { LATCbits.LATC5 = 0; } while(0); do { LATCbits.LATC4 = 0; } while(0); do { LATDb
      +                          its.LATD6 = 0; } while(0); do { LATBbits.LATB1 = 0; } while(0); do { LATCbits.LATC7 = 0;
      +                           } while(0);
  9640   00174C  D811               	call	PL197	;call to abstracted procedure
  9641   00174E  9283               	bcf	131,1,c	;volatile
  9642   001750  9E84               	bcf	132,7,c	;volatile
  9643                           
  9644                           ;application.c: 218:         retVal = (530);
  9645   001752  0E02               	movlw	2
  9646   001754  6E18               	movwf	(GetMotorSpeed@retVal+1)^0,c
  9647   001756  0E12               	movlw	18
  9648   001758                     L10:
  9649   001758  6E17               	movwf	GetMotorSpeed@retVal^0,c
  9650   00175A                     l1506:
  9651                           
  9652                           ;application.c: 224:     return retVal;
  9653   00175A  C017  F015         	movff	GetMotorSpeed@retVal,?_GetMotorSpeed
  9654   00175E  C018  F016         	movff	GetMotorSpeed@retVal+1,?_GetMotorSpeed+1
  9655   001762  0012               	return		;funcret
  9656   001764                     __end_of_GetMotorSpeed:
  9657                           	callstack 0
  9658   001764                     PL155:
  9659                           	callstack 23
  9660   001764  8A84               	bsf	132,5,c	;volatile
  9661   001766  8884               	bsf	132,4,c	;volatile
  9662   001768  8C85               	bsf	133,6,c	;volatile
  9663   00176A  8283               	bsf	131,1,c	;volatile
  9664   00176C  8E84               	bsf	132,7,c	;volatile
  9665   00176E  0012               	return	
  9666   001770                     __end_ofPL155:
  9667                           	callstack 0
  9668   001770                     PL197:
  9669                           	callstack 23
  9670   001770  9C84               	bcf	132,6,c	;volatile
  9671   001772  9A84               	bcf	132,5,c	;volatile
  9672   001774  9884               	bcf	132,4,c	;volatile
  9673   001776  9C85               	bcf	133,6,c	;volatile
  9674   001778  0012               	return	
  9675   00177A                     __end_ofPL197:
  9676                           	callstack 0
  9677   00177A                     PL233:
  9678                           	callstack 23
  9679   00177A  8283               	bsf	131,1,c	;volatile
  9680   00177C  8E84               	bsf	132,7,c	;volatile
  9681   00177E  0E01               	movlw	1
  9682   001780  6E18               	movwf	(GetMotorSpeed@retVal+1)^0,c
  9683   001782  0C01               	retlw	1
  9684   001784                     __end_ofPL233:
  9685                           	callstack 0
  9686                           
  9687 ;; *************** function _GetEvent *****************
  9688 ;; Defined at:
  9689 ;;		line 154 in file "application.c"
  9690 ;; Parameters:    Size  Location     Type
  9691 ;;		None
  9692 ;; Auto vars:     Size  Location     Type
  9693 ;;		None
  9694 ;; Return value:  Size  Location     Type
  9695 ;;                  1    wreg      enum E13277
  9696 ;; Registers used:
  9697 ;;		wreg, status,2
  9698 ;; Tracked objects:
  9699 ;;		On entry : 0/E
  9700 ;;		On exit  : 3F/0
  9701 ;;		Unchanged: 0/0
  9702 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  9703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9704 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9706 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9707 ;;Total ram usage:        0 bytes
  9708 ;; Hardware stack levels used: 1
  9709 ;; Hardware stack levels required when called: 6
  9710 ;; This function calls:
  9711 ;;		Nothing
  9712 ;; This function is called by:
  9713 ;;		_ApplicationTask
  9714 ;; This function uses a non-reentrant model
  9715 ;;
  9716                           
  9717                           	psect	text86
  9718   002D12                     __ptext86:
  9719                           	callstack 0
  9720   002D12                     _GetEvent:
  9721                           	callstack 23
  9722                           
  9723                           ;application.c: 156:     return keyInfo.keyStatus;
  9724                           
  9725                           ;incstack = 0
  9726   002D12  0100               	movlb	0	; () banked
  9727   002D14  518E               	movf	(_keyInfo+1)& (0+255),w,b
  9728                           
  9729                           ; BSR set to: 0
  9730   002D16  0012               	return		;funcret
  9731   002D18                     __end_of_GetEvent:
  9732                           	callstack 0
  9733                           
  9734 ;; *************** function _GetButton *****************
  9735 ;; Defined at:
  9736 ;;		line 164 in file "application.c"
  9737 ;; Parameters:    Size  Location     Type
  9738 ;;		None
  9739 ;; Auto vars:     Size  Location     Type
  9740 ;;		None
  9741 ;; Return value:  Size  Location     Type
  9742 ;;                  1    wreg      enum E13283
  9743 ;; Registers used:
  9744 ;;		wreg, status,2
  9745 ;; Tracked objects:
  9746 ;;		On entry : 3F/0
  9747 ;;		On exit  : 3F/0
  9748 ;;		Unchanged: 0/0
  9749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  9750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9754 ;;Total ram usage:        0 bytes
  9755 ;; Hardware stack levels used: 1
  9756 ;; Hardware stack levels required when called: 6
  9757 ;; This function calls:
  9758 ;;		Nothing
  9759 ;; This function is called by:
  9760 ;;		_ApplicationTask
  9761 ;; This function uses a non-reentrant model
  9762 ;;
  9763                           
  9764                           	psect	text87
  9765   002D28                     __ptext87:
  9766                           	callstack 0
  9767   002D28                     _GetButton:
  9768                           	callstack 23
  9769                           
  9770                           ; BSR set to: 0
  9771                           ;application.c: 166:     return keyInfo.key;
  9772                           
  9773                           ; BSR set to: 0
  9774                           ;incstack = 0
  9775   002D28  518D               	movf	_keyInfo& (0+255),w,b
  9776                           
  9777                           ; BSR set to: 0
  9778   002D2A  0012               	return		;funcret
  9779   002D2C                     __end_of_GetButton:
  9780                           	callstack 0
  9781                           
  9782 ;; *************** function _ClearEvent *****************
  9783 ;; Defined at:
  9784 ;;		line 159 in file "application.c"
  9785 ;; Parameters:    Size  Location     Type
  9786 ;;		None
  9787 ;; Auto vars:     Size  Location     Type
  9788 ;;		None
  9789 ;; Return value:  Size  Location     Type
  9790 ;;                  1    wreg      void 
  9791 ;; Registers used:
  9792 ;;		None
  9793 ;; Tracked objects:
  9794 ;;		On entry : 3F/0
  9795 ;;		On exit  : 3F/0
  9796 ;;		Unchanged: 0/0
  9797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  9798 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9799 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9801 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9802 ;;Total ram usage:        0 bytes
  9803 ;; Hardware stack levels used: 1
  9804 ;; Hardware stack levels required when called: 6
  9805 ;; This function calls:
  9806 ;;		Nothing
  9807 ;; This function is called by:
  9808 ;;		_ApplicationTask
  9809 ;; This function uses a non-reentrant model
  9810 ;;
  9811                           
  9812                           	psect	text88
  9813   002D2C                     __ptext88:
  9814                           	callstack 0
  9815   002D2C                     _ClearEvent:
  9816                           	callstack 23
  9817                           
  9818                           ; BSR set to: 0
  9819                           ;application.c: 161:     keyInfo.keyStatus = KEY_NO_ACTION;
  9820                           
  9821                           ; BSR set to: 0
  9822                           ;incstack = 0
  9823   002D2C  6B8E               	clrf	(_keyInfo+1)& (0+255),b
  9824                           
  9825                           ; BSR set to: 0
  9826   002D2E  0012               	return		;funcret
  9827   002D30                     __end_of_ClearEvent:
  9828                           	callstack 0
  9829                           
  9830 ;; *************** function _ClearButton *****************
  9831 ;; Defined at:
  9832 ;;		line 169 in file "application.c"
  9833 ;; Parameters:    Size  Location     Type
  9834 ;;		None
  9835 ;; Auto vars:     Size  Location     Type
  9836 ;;		None
  9837 ;; Return value:  Size  Location     Type
  9838 ;;                  1    wreg      void 
  9839 ;; Registers used:
  9840 ;;		None
  9841 ;; Tracked objects:
  9842 ;;		On entry : 3F/0
  9843 ;;		On exit  : 3F/0
  9844 ;;		Unchanged: 0/0
  9845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  9846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9850 ;;Total ram usage:        0 bytes
  9851 ;; Hardware stack levels used: 1
  9852 ;; Hardware stack levels required when called: 6
  9853 ;; This function calls:
  9854 ;;		Nothing
  9855 ;; This function is called by:
  9856 ;;		_ApplicationTask
  9857 ;; This function uses a non-reentrant model
  9858 ;;
  9859                           
  9860                           	psect	text89
  9861   002D30                     __ptext89:
  9862                           	callstack 0
  9863   002D30                     _ClearButton:
  9864                           	callstack 23
  9865                           
  9866                           ; BSR set to: 0
  9867                           ;application.c: 171:     keyInfo.key = NO_KEY;
  9868                           
  9869                           ; BSR set to: 0
  9870                           ;incstack = 0
  9871   002D30  6B8D               	clrf	_keyInfo& (0+255),b
  9872                           
  9873                           ; BSR set to: 0
  9874   002D32  0012               	return		;funcret
  9875   002D34                     __end_of_ClearButton:
  9876                           	callstack 0
  9877                           
  9878 ;; *************** function _INTERRUPT_InterruptManager *****************
  9879 ;; Defined at:
  9880 ;;		line 80 in file "mcc_generated_files/system/src/interrupt.c"
  9881 ;; Parameters:    Size  Location     Type
  9882 ;;		None
  9883 ;; Auto vars:     Size  Location     Type
  9884 ;;		None
  9885 ;; Return value:  Size  Location     Type
  9886 ;;                  1    wreg      void 
  9887 ;; Registers used:
  9888 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
  9889 ;; Tracked objects:
  9890 ;;		On entry : 0/0
  9891 ;;		On exit  : 0/0
  9892 ;;		Unchanged: 0/0
  9893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  9894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9896 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9897 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9898 ;;Total ram usage:        6 bytes
  9899 ;; Hardware stack levels used: 1
  9900 ;; Hardware stack levels required when called: 5
  9901 ;; This function calls:
  9902 ;;		_ADCC_ThresholdISR
  9903 ;;		_PIN_MANAGER_IOC
  9904 ;; This function is called by:
  9905 ;;		Interrupt level 2
  9906 ;; This function uses a non-reentrant model
  9907 ;;
  9908                           
  9909                           	psect	intcode
  9910   000008                     __pintcode:
  9911                           	callstack 0
  9912   000008                     _INTERRUPT_InterruptManager:
  9913                           	callstack 18
  9914                           
  9915                           ; BSR set to: 0
  9916                           ;incstack = 0
  9917   000008  824B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9918   00000A  CFFA F00F          	movff	pclath,??_INTERRUPT_InterruptManager
  9919   00000E  CFFB F010          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  9920   000012  CFD9 F011          	movff	fsr2l,??_INTERRUPT_InterruptManager+2
  9921   000016  CFDA F012          	movff	fsr2h,??_INTERRUPT_InterruptManager+3
  9922   00001A  CFF3 F013          	movff	prodl,??_INTERRUPT_InterruptManager+4
  9923   00001E  CFF4 F014          	movff	prodh,??_INTERRUPT_InterruptManager+5
  9924                           
  9925                           ;mcc_generated_files/system/src/interrupt.c: 83:     if(PIE0bits.IOCIE == 1 && PIR0bits.
      +                          IOCIF == 1)
  9926   000022  010E               	movlb	14	; () banked
  9927   000024  B9BD               	btfsc	189,4,b	;volatile
  9928                           
  9929                           ; BSR set to: 14
  9930   000026  A9C5               	btfss	197,4,b	;volatile
  9931   000028  D003               	goto	i2l247
  9932                           
  9933                           ; BSR set to: 14
  9934                           ;mcc_generated_files/system/src/interrupt.c: 84:     {;mcc_generated_files/system/src/in
      +                          terrupt.c: 85:         PIN_MANAGER_IOC();
  9935   00002A  ECA1  F016         	call	_PIN_MANAGER_IOC	;wreg free
  9936                           
  9937                           ;mcc_generated_files/system/src/interrupt.c: 86:     }
  9938   00002E  D006               	goto	i2l252
  9939   000030                     i2l247:
  9940                           
  9941                           ; BSR set to: 14
  9942   000030  BCF2               	btfsc	242,6,c	;volatile
  9943                           
  9944                           ; BSR set to: 14
  9945                           ;mcc_generated_files/system/src/interrupt.c: 88:     {;mcc_generated_files/system/src/in
      +                          terrupt.c: 89:         if(PIE1bits.ADTIE == 1 && PIR1bits.ADTIF == 1)
  9946   000032  A3BE               	btfss	190,1,b	;volatile
  9947   000034  D003               	goto	i2l252
  9948                           
  9949                           ; BSR set to: 14
  9950   000036  B3C6               	btfsc	198,1,b	;volatile
  9951                           
  9952                           ; BSR set to: 14
  9953                           ;mcc_generated_files/system/src/interrupt.c: 90:         {;mcc_generated_files/system/sr
      +                          c/interrupt.c: 91:             ADCC_ThresholdISR();
  9954   000038  EC79  F015         	call	_ADCC_ThresholdISR	;wreg free
  9955   00003C                     i2l252:
  9956                           
  9957                           ; BSR set to: 14
  9958   00003C  C014  FFF4         	movff	??_INTERRUPT_InterruptManager+5,prodh
  9959   000040  C013  FFF3         	movff	??_INTERRUPT_InterruptManager+4,prodl
  9960   000044  C012  FFDA         	movff	??_INTERRUPT_InterruptManager+3,fsr2h
  9961   000048  C011  FFD9         	movff	??_INTERRUPT_InterruptManager+2,fsr2l
  9962   00004C  C010  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  9963   000050  C00F  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  9964   000054  924B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9965   000056  0011               	retfie		f
  9966   000058                     __end_of_INTERRUPT_InterruptManager:
  9967                           	callstack 0
  9968                           
  9969 ;; *************** function _PIN_MANAGER_IOC *****************
  9970 ;; Defined at:
  9971 ;;		line 130 in file "mcc_generated_files/system/src/pins.c"
  9972 ;; Parameters:    Size  Location     Type
  9973 ;;		None
  9974 ;; Auto vars:     Size  Location     Type
  9975 ;;		None
  9976 ;; Return value:  Size  Location     Type
  9977 ;;                  1    wreg      void 
  9978 ;; Registers used:
  9979 ;;		None
  9980 ;; Tracked objects:
  9981 ;;		On entry : 3F/E
  9982 ;;		On exit  : 3F/E
  9983 ;;		Unchanged: 3F/0
  9984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
  9985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
  9989 ;;Total ram usage:        0 bytes
  9990 ;; Hardware stack levels used: 1
  9991 ;; This function calls:
  9992 ;;		Nothing
  9993 ;; This function is called by:
  9994 ;;		_INTERRUPT_InterruptManager
  9995 ;; This function uses a non-reentrant model
  9996 ;;
  9997                           
  9998                           	psect	text91
  9999   002D42                     __ptext91:
 10000                           	callstack 0
 10001   002D42                     _PIN_MANAGER_IOC:
 10002                           	callstack 22
 10003                           
 10004                           ; BSR set to: 14
 10005                           
 10006                           ;incstack = 0
 10007   002D42  0012               	return		;funcret
 10008   002D44                     __end_of_PIN_MANAGER_IOC:
 10009                           	callstack 0
 10010                           
 10011 ;; *************** function _ADCC_ThresholdISR *****************
 10012 ;; Defined at:
 10013 ;;		line 285 in file "mcc_generated_files/adc/src/adcc.c"
 10014 ;; Parameters:    Size  Location     Type
 10015 ;;		None
 10016 ;; Auto vars:     Size  Location     Type
 10017 ;;		None
 10018 ;; Return value:  Size  Location     Type
 10019 ;;                  1    wreg      void 
 10020 ;; Registers used:
 10021 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pcl, pclath, pclatu, tosl, prodl, prodh, cstack
 10022 ;; Tracked objects:
 10023 ;;		On entry : 3F/E
 10024 ;;		On exit  : 0/0
 10025 ;;		Unchanged: 0/0
 10026 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
 10027 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10029 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10030 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10031 ;;Total ram usage:        0 bytes
 10032 ;; Hardware stack levels used: 1
 10033 ;; Hardware stack levels required when called: 4
 10034 ;; This function calls:
 10035 ;;		NULL
 10036 ;;		_ADCC_DefaultADTI_ISR
 10037 ;;		_ADCC_ThresholdISR_mTouch
 10038 ;; This function is called by:
 10039 ;;		_INTERRUPT_InterruptManager
 10040 ;; This function uses a non-reentrant model
 10041 ;;
 10042                           
 10043                           	psect	text92
 10044   002AF2                     __ptext92:
 10045                           	callstack 0
 10046   002AF2                     _ADCC_ThresholdISR:
 10047                           	callstack 18
 10048                           
 10049                           ; BSR set to: 14
 10050                           ;mcc_generated_files/adc/src/adcc.c: 288:     PIR1bits.ADTIF = 0;
 10051                           
 10052                           ; BSR set to: 14
 10053                           ;incstack = 0
 10054   002AF2  93C6               	bcf	198,1,b	;volatile
 10055                           
 10056                           ; BSR set to: 14
 10057                           ;mcc_generated_files/adc/src/adcc.c: 290:     if (ADCC_ADTI_InterruptHandler != ((void*)
      +                          0))
 10058   002AF4  0100               	movlb	0	; () banked
 10059   002AF6  51FD               	movf	_ADCC_ADTI_InterruptHandler& (0+255),w,b
 10060   002AF8  11FE               	iorwf	(_ADCC_ADTI_InterruptHandler+1)& (0+255),w,b
 10061   002AFA  11FF               	iorwf	(_ADCC_ADTI_InterruptHandler+2)& (0+255),w,b
 10062   002AFC  B4D8               	btfsc	status,2,c
 10063   002AFE  0012               	return	
 10064                           
 10065                           ; BSR set to: 0
 10066                           ;mcc_generated_files/adc/src/adcc.c: 291:     {;mcc_generated_files/adc/src/adcc.c: 292:
      +                                   ADCC_ADTI_InterruptHandler();
 10067   002B00  0005               	push	
 10068   002B02  6EFA               	movwf	pclath,c
 10069   002B04  51FD               	movf	_ADCC_ADTI_InterruptHandler& (0+255),w,b
 10070   002B06  6EFD               	movwf	tosl,c
 10071   002B08  51FE               	movf	(_ADCC_ADTI_InterruptHandler+1)& (0+255),w,b
 10072   002B0A  6EFE               	movwf	tosh,c
 10073   002B0C  51FF               	movf	(_ADCC_ADTI_InterruptHandler+2)& (0+255),w,b
 10074   002B0E  6EFF               	movwf	tosu,c
 10075   002B10  50FA               	movf	pclath,w,c
 10076   002B12  0012               	return		;indir
 10077   002B14                     __end_of_ADCC_ThresholdISR:
 10078                           	callstack 0
 10079                           
 10080 ;; *************** function _ADCC_DefaultADTI_ISR *****************
 10081 ;; Defined at:
 10082 ;;		line 301 in file "mcc_generated_files/adc/src/adcc.c"
 10083 ;; Parameters:    Size  Location     Type
 10084 ;;		None
 10085 ;; Auto vars:     Size  Location     Type
 10086 ;;		None
 10087 ;; Return value:  Size  Location     Type
 10088 ;;                  1    wreg      void 
 10089 ;; Registers used:
 10090 ;;		None
 10091 ;; Tracked objects:
 10092 ;;		On entry : 3F/0
 10093 ;;		On exit  : 3F/0
 10094 ;;		Unchanged: 3F/0
 10095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
 10096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10100 ;;Total ram usage:        0 bytes
 10101 ;; Hardware stack levels used: 1
 10102 ;; This function calls:
 10103 ;;		Nothing
 10104 ;; This function is called by:
 10105 ;;		_ADCC_Initialize
 10106 ;;		_ADCC_ThresholdISR
 10107 ;; This function uses a non-reentrant model
 10108 ;;
 10109                           
 10110                           	psect	text93
 10111   002D44                     __ptext93:
 10112                           	callstack 0
 10113   002D44                     _ADCC_DefaultADTI_ISR:
 10114                           	callstack 21
 10115                           
 10116                           ; BSR set to: 0
 10117                           
 10118                           ;incstack = 0
 10119   002D44  0012               	return		;funcret
 10120   002D46                     __end_of_ADCC_DefaultADTI_ISR:
 10121                           	callstack 0
 10122                           
 10123 ;; *************** function _ADCC_ThresholdISR_mTouch *****************
 10124 ;; Defined at:
 10125 ;;		line 538 in file "mcc_generated_files/touch/mtouch_sensor.c"
 10126 ;; Parameters:    Size  Location     Type
 10127 ;;		None
 10128 ;; Auto vars:     Size  Location     Type
 10129 ;;		None
 10130 ;; Return value:  Size  Location     Type
 10131 ;;                  1    wreg      void 
 10132 ;; Registers used:
 10133 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10134 ;; Tracked objects:
 10135 ;;		On entry : 3F/0
 10136 ;;		On exit  : 0/0
 10137 ;;		Unchanged: 0/0
 10138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
 10139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10143 ;;Total ram usage:        0 bytes
 10144 ;; Hardware stack levels used: 1
 10145 ;; Hardware stack levels required when called: 3
 10146 ;; This function calls:
 10147 ;;		_MTOUCH_Sensor_Service
 10148 ;; This function is called by:
 10149 ;;		_MTOUCH_Sensor_ADCC_Initialize
 10150 ;;		_ADCC_ThresholdISR
 10151 ;; This function uses a non-reentrant model
 10152 ;;
 10153                           
 10154                           	psect	text94
 10155   001A24                     __ptext94:
 10156                           	callstack 0
 10157   001A24                     _ADCC_ThresholdISR_mTouch:
 10158                           	callstack 18
 10159                           
 10160                           ; BSR set to: 0
 10161                           ;mcc_generated_files/touch/mtouch_sensor.c: 541:     PIR1bits.ADTIF = 0;
 10162                           
 10163                           ; BSR set to: 0
 10164                           ;incstack = 0
 10165   001A24  010E               	movlb	14	; () banked
 10166   001A26  93C6               	bcf	198,1,b	;volatile
 10167   001A28                     i5L__ptext95:
 10168                           	callstack 18
 10169   001A28                     i5L_MTOUCH_Sensor_Service:
 10170                           	callstack 18
 10171   001A28                     i5Li2l4868:
 10172                           	callstack 18
 10173                           
 10174                           ; BSR set to: 14
 10175                           ;mcc_generated_files/touch/mtouch_sensor.c: 553:     mtouch_sensor_t* sensor;;mcc_genera
      +                          ted_files/touch/mtouch_sensor.c: 555:     Sensor_SetTrisBit(currentScanSensor,0);
 10176   001A28  6A01               	clrf	i2Sensor_SetTrisBit@TrisBit^0,c
 10177   001A2A  5045               	movf	_currentScanSensor^0,w,c
 10178   001A2C  ECB6  F012         	call	i2_Sensor_SetTrisBit
 10179   001A30                     i5Li2l4870:
 10180                           	callstack 18
 10181                           
 10182                           ;mcc_generated_files/touch/mtouch_sensor.c: 557:     if(scanInterrupted)
 10183   001A30  5043               	movf	_scanInterrupted^0,w,c	;volatile
 10184   001A32  E005               	bz	i5Li2l1208
 10185   001A34  D001               	goto	i5Li2u385_40
 10186   001A36                     i5Li2u385_41:
 10187                           	callstack 18
 10188   001A36  D003               	goto	i5Li2l1208
 10189   001A38                     i5Li2u385_40:
 10190                           	callstack 18
 10191   001A38                     i5Li2l4872:
 10192                           	callstack 18
 10193                           
 10194                           ;mcc_generated_files/touch/mtouch_sensor.c: 558:     {;mcc_generated_files/touch/mtouch_
      +                          sensor.c: 559:         ADCON0bits.ADON = 0;
 10195   001A38  010F               	movlb	15	; () banked
 10196   001A3A  9F5B               	bcf	91,7,b	;volatile
 10197   001A3C  D045               	goto	i5Li2l4892
 10198   001A3E                     i5Li2l1208:
 10199                           	callstack 18
 10200                           
 10201                           ;mcc_generated_files/touch/mtouch_sensor.c: 562:     {;mcc_generated_files/touch/mtouch_
      +                          sensor.c: 563:         ADCON0bits.ADON = 0;
 10202   001A3E  010F               	movlb	15	; () banked
 10203   001A40  9F5B               	bcf	91,7,b	;volatile
 10204   001A42                     i5Li2l4874:
 10205                           	callstack 0
 10206                           
 10207                           ; BSR set to: 15
 10208                           ;mcc_generated_files/touch/mtouch_sensor.c: 564:         sensor = &mtouch_sensor[current
      +                          ScanSensor];
 10209   001A42  EC1E  F00A         	call	PL207	;call to abstracted procedure
 10210   001A46  6E0E               	movwf	MTOUCH_Sensor_Service@sensor^0,c
 10211   001A48                     i5Li2l4876:
 10212                           	callstack 18
 10213                           
 10214                           ; BSR set to: 15
 10215                           ;mcc_generated_files/touch/mtouch_sensor.c: 565:         if(!Sensor_isCalibrated(sensor)
      +                          )
 10216   001A48  C00E  F001         	movff	MTOUCH_Sensor_Service@sensor,i2Sensor_isCalibrated@sensor
 10217   001A4C                     i6L__ptext98:
 10218                           	callstack 18
 10219   001A4C                     i6Li2_Sensor_isCalibrated:
 10220                           	callstack 18
 10221   001A4C                     i6Li2l4332:
 10222                           	callstack 18
 10223                           
 10224                           ;mcc_generated_files/touch/mtouch_sensor.c: 811: static __attribute__((inline)) _Bool Se
      +                          nsor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/touch/mtouch_sensor.c: 81
      +                          2: {;mcc_generated_files/touch/mtouch_sensor.c: 813:     return (_Bool)sensor->calibrate
      +                          d;
 10225   001A4C  5001               	movf	i2Sensor_isCalibrated@sensor^0,w,c
 10226   001A4E  ECFB  F00C         	call	PL123	;call to abstracted procedure
 10227   001A52  B6DF               	btfsc	indf2,3,c
 10228   001A54  D001               	goto	i6Li2u302_41
 10229   001A56  D002               	goto	i6Li2u302_40
 10230   001A58                     i6Li2u302_41:
 10231                           	callstack 18
 10232   001A58  0E01               	movlw	1
 10233   001A5A  D001               	goto	i6Li2u302_46
 10234   001A5C                     i6Li2u302_40:
 10235                           	callstack 18
 10236   001A5C  0E00               	movlw	0
 10237   001A5E                     i6Li2u302_46:
 10238                           	callstack 18
 10239   001A5E                     i6Li2l1303:
 10240                           	callstack 18
 10241   001A5E  0900               	iorlw	0
 10242   001A60  E107               	bnz	i5Li2l4880
 10243   001A62  D001               	goto	i5Li2u386_40
 10244   001A64                     i5Li2u386_41:
 10245                           	callstack 18
 10246   001A64  D005               	goto	i5Li2l4880
 10247   001A66                     i5Li2u386_40:
 10248                           	callstack 18
 10249   001A66                     i5Li2l4878:
 10250                           	callstack 18
 10251                           
 10252                           ;mcc_generated_files/touch/mtouch_sensor.c: 566:         {;mcc_generated_files/touch/mto
      +                          uch_sensor.c: 568:             Sensor_setCalibrated(sensor);
 10253   001A66  C00E  F001         	movff	MTOUCH_Sensor_Service@sensor,Sensor_setCalibrated@sensor
 10254   001A6A  EC54  F016         	call	_Sensor_setCalibrated	;wreg free
 10255   001A6E  D006               	goto	i5Li2l4882
 10256   001A70                     i5Li2l4880:
 10257                           	callstack 18
 10258                           
 10259                           ;mcc_generated_files/touch/mtouch_sensor.c: 571:         {;mcc_generated_files/touch/mto
      +                          uch_sensor.c: 572:             Sensor_setSampled(sensor);
 10260   001A70  C00E  F001         	movff	MTOUCH_Sensor_Service@sensor,Sensor_setSampled@sensor
 10261   001A74                     i7L__ptext103:
 10262                           	callstack 18
 10263   001A74                     i7L_Sensor_setSampled:
 10264                           	callstack 18
 10265   001A74                     i7Li2l4616:
 10266                           	callstack 18
 10267                           
 10268                           ;mcc_generated_files/touch/mtouch_sensor.c: 864: static __attribute__((inline)) void Sen
      +                          sor_setSampled(mtouch_sensor_t* sensor);mcc_generated_files/touch/mtouch_sensor.c: 865: 
      +                          {;mcc_generated_files/touch/mtouch_sensor.c: 866:     sensor->sampled = 1;
 10269   001A74  5001               	movf	Sensor_setSampled@sensor^0,w,c
 10270   001A76  ECFB  F00C         	call	PL123	;call to abstracted procedure
 10271   001A7A  82DF               	bsf	indf2,1,c
 10272   001A7C                     i7Li2l1328:
 10273                           	callstack 18
 10274   001A7C                     i5Li2l4882:
 10275                           	callstack 18
 10276                           
 10277                           ;mcc_generated_files/touch/mtouch_sensor.c: 575:         if((mtouch_sensor_packetsample_
      +                          t)
 10278   001A7C  5045               	movf	_currentScanSensor^0,w,c
 10279   001A7E  D834               	call	PL173	;call to abstracted procedure
 10280   001A80  CFDE F00C          	movff	postinc2,??_MTOUCH_Sensor_Service
 10281   001A84  CFDD F00D          	movff	postdec2,??_MTOUCH_Sensor_Service+1
 10282   001A88  506D               	movf	109,w,c	;volatile
 10283   001A8A  5C0C               	subwf	??_MTOUCH_Sensor_Service^0,w,c
 10284   001A8C  6E01               	movwf	abs@a^0,c
 10285   001A8E  506E               	movf	110,w,c	;volatile
 10286   001A90  580D               	subwfb	(??_MTOUCH_Sensor_Service+1)^0,w,c
 10287   001A92  6E02               	movwf	(abs@a+1)^0,c
 10288   001A94  ECD7  F014         	call	_abs	;wreg free
 10289   001A98  5002               	movf	(?_abs+1)^0,w,c
 10290   001A9A  E105               	bnz	i5Li2u387_40
 10291   001A9C  0E65               	movlw	101
 10292   001A9E  5C01               	subwf	?_abs^0,w,c
 10293   001AA0  E306               	bnc	i5Li2l4886
 10294   001AA2  D001               	goto	i5Li2u387_40
 10295   001AA4                     i5Li2u387_41:
 10296                           	callstack 18
 10297   001AA4  D004               	goto	i5Li2l4886
 10298   001AA6                     i5Li2u387_40:
 10299                           	callstack 18
 10300   001AA6                     i5Li2l4884:
 10301                           	callstack 18
 10302                           
 10303                           ;mcc_generated_files/touch/mtouch_sensor.c: 578:         {;mcc_generated_files/touch/mto
      +                          uch_sensor.c: 579:             mtouch_sensor[currentScanSensor].active = 1;
 10304   001AA6  5045               	movf	_currentScanSensor^0,w,c
 10305   001AA8  D818               	call	PL113	;call to abstracted procedure
 10306   001AAA  84DF               	bsf	indf2,2,c
 10307   001AAC  D003               	goto	i5Li2l4888
 10308   001AAE                     i5Li2l4886:
 10309                           	callstack 18
 10310                           
 10311                           ;mcc_generated_files/touch/mtouch_sensor.c: 582:         {;mcc_generated_files/touch/mto
      +                          uch_sensor.c: 583:             mtouch_sensor[currentScanSensor].active = 0;
 10312   001AAE  5045               	movf	_currentScanSensor^0,w,c
 10313   001AB0  D814               	call	PL113	;call to abstracted procedure
 10314   001AB2  94DF               	bcf	indf2,2,c
 10315   001AB4                     i5Li2l4888:
 10316                           	callstack 18
 10317                           
 10318                           ; BSR set to: 0
 10319                           ;mcc_generated_files/touch/mtouch_sensor.c: 591:         if(!lowpowerActivated)
 10320   001AB4  5042               	movf	_lowpowerActivated^0,w,c
 10321   001AB6  E108               	bnz	i5Li2l4892
 10322   001AB8  D001               	goto	i5Li2u388_40
 10323   001ABA                     i5Li2u388_41:
 10324                           	callstack 18
 10325   001ABA  D006               	goto	i5Li2l4892
 10326   001ABC                     i5Li2u388_40:
 10327                           	callstack 18
 10328   001ABC                     i5Li2l4890:
 10329                           	callstack 18
 10330                           
 10331                           ; BSR set to: 0
 10332                           ;mcc_generated_files/touch/mtouch_sensor.c: 592:             packet_sample[currentScanSe
      +                          nsor] = ADFLTR;
 10333   001ABC  5045               	movf	_currentScanSensor^0,w,c
 10334   001ABE  D814               	call	PL173	;call to abstracted procedure
 10335   001AC0  CF6D FFDE          	movff	3949,postinc2	;volatile
 10336   001AC4  CF6E FFDD          	movff	3950,postdec2	;volatile
 10337   001AC8                     i5Li2l4892:
 10338                           	callstack 18
 10339                           
 10340                           ;mcc_generated_files/touch/mtouch_sensor.c: 595:     if(lowpowerActivated == 1u)
 10341   001AC8  0442               	decf	_lowpowerActivated^0,w,c
 10342   001ACA  E104               	bnz	i5Li2l4896
 10343   001ACC  D001               	goto	i5Li2u389_40
 10344   001ACE                     i5Li2u389_41:
 10345                           	callstack 18
 10346   001ACE  D002               	goto	i5Li2l4896
 10347   001AD0                     i5Li2u389_40:
 10348                           	callstack 18
 10349   001AD0                     i5Li2l4894:
 10350                           	callstack 18
 10351                           
 10352                           ;mcc_generated_files/touch/mtouch_sensor.c: 596:     {;mcc_generated_files/touch/mtouch_
      +                          sensor.c: 597:         sampling_flag = 0;
 10353   001AD0  6A44               	clrf	_sampling_flag^0,c
 10354   001AD2  0012               	return	
 10355   001AD4                     i5Li2l4896:
 10356                           	callstack 18
 10357                           
 10358                           ;mcc_generated_files/touch/mtouch_sensor.c: 600:     {;mcc_generated_files/touch/mtouch_
      +                          sensor.c: 601:         Sensor_scheduleNextScan();
 10359   001AD4  EC91  F009         	call	i2_Sensor_scheduleNextScan	;wreg free
 10360   001AD8                     i5Li2l1217:
 10361                           	callstack 18
 10362   001AD8  0012               	return	
 10363   001ADA                     __end_of_ADCC_ThresholdISR_mTouch:
 10364                           	callstack 0
 10365   001ADA                     PL113:
 10366                           	callstack 20
 10367   001ADA  0D0A               	mullw	10
 10368   001ADC  50F3               	movf	243,w,c
 10369   001ADE  0F9A               	addlw	low (_mtouch_sensor+9)
 10370   001AE0  6ED9               	movwf	fsr2l,c
 10371   001AE2  6ADA               	clrf	fsr2h,c
 10372   001AE4  0100               	movlb	0	; () banked
 10373   001AE6  0012               	return	
 10374   001AE8                     __end_ofPL113:
 10375                           	callstack 0
 10376   001AE8                     PL173:
 10377                           	callstack 18
 10378   001AE8  0D02               	mullw	2
 10379   001AEA  50F3               	movf	243,w,c
 10380   001AEC  0F7E               	addlw	low _packet_sample
 10381   001AEE  6ED9               	movwf	fsr2l,c
 10382   001AF0  6ADA               	clrf	fsr2h,c
 10383   001AF2  0012               	return	
 10384   001AF4                     __end_ofPL173:
 10385                           	callstack 0
 10386                           
 10387 ;; *************** function _MTOUCH_Sensor_Service *****************
 10388 ;; Defined at:
 10389 ;;		line 551 in file "mcc_generated_files/touch/mtouch_sensor.c"
 10390 ;; Parameters:    Size  Location     Type
 10391 ;;		None
 10392 ;; Auto vars:     Size  Location     Type
 10393 ;;  sensor          1   13[COMRAM] PTR struct .
 10394 ;;		 -> mtouch_sensor(50), 
 10395 ;; Return value:  Size  Location     Type
 10396 ;;                  1    wreg      void 
 10397 ;; Registers used:
 10398 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10399 ;; Tracked objects:
 10400 ;;		On entry : 3F/E
 10401 ;;		On exit  : 0/0
 10402 ;;		Unchanged: 0/0
 10403 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
 10404 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10405 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10406 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10407 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10408 ;;Total ram usage:        3 bytes
 10409 ;; Hardware stack levels used: 1
 10410 ;; Hardware stack levels required when called: 2
 10411 ;; This function calls:
 10412 ;;		_Sensor_setCalibrated
 10413 ;;		_Sensor_setSampled
 10414 ;;		_abs
 10415 ;;		i2_Sensor_SetTrisBit
 10416 ;;		i2_Sensor_isCalibrated
 10417 ;;		i2_Sensor_scheduleNextScan
 10418 ;; This function is called by:
 10419 ;;		_ADCC_ThresholdISR_mTouch
 10420 ;; This function uses a non-reentrant model
 10421 ;;
 10422                           
 10423                           	psect	text95
 10424   000000                     __ptext95:
 10425                           	callstack 0
 10426   000000                     _MTOUCH_Sensor_Service:
 10427                           	callstack 18
 10428   000000                     iL77:
 10429   000000                     iL78:
 10430   000000                     iL86:
 10431   000000                     iL87:
 10432   000000                     __end_of_MTOUCH_Sensor_Service:
 10433                           	callstack 0
 10434                           
 10435 ;; *************** function i2_Sensor_scheduleNextScan *****************
 10436 ;; Defined at:
 10437 ;;		line 405 in file "mcc_generated_files/touch/mtouch_sensor.c"
 10438 ;; Parameters:    Size  Location     Type
 10439 ;;		None
 10440 ;; Auto vars:     Size  Location     Type
 10441 ;;  sensor          1   10[COMRAM] PTR struct .
 10442 ;;		 -> mtouch_sensor(50), 
 10443 ;;  skipScan        1    9[COMRAM] _Bool 
 10444 ;;  state           1    8[COMRAM] _Bool 
 10445 ;; Return value:  Size  Location     Type
 10446 ;;                  1    wreg      void 
 10447 ;; Registers used:
 10448 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10449 ;; Tracked objects:
 10450 ;;		On entry : 30/F
 10451 ;;		On exit  : 0/0
 10452 ;;		Unchanged: 0/0
 10453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
 10454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10455 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10456 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10457 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10458 ;;Total ram usage:        7 bytes
 10459 ;; Hardware stack levels used: 1
 10460 ;; Hardware stack levels required when called: 1
 10461 ;; This function calls:
 10462 ;;		i2_MTOUCH_Sensor_isEnabled
 10463 ;;		i2_MTOUCH_Sensor_wasSampled
 10464 ;;		i2_Sensor_SetTrisBit
 10465 ;;		i2_Sensor_isCalibrated
 10466 ;;		i2_Sensor_isCalibratingAcqTime
 10467 ;; This function is called by:
 10468 ;;		_MTOUCH_Sensor_Service
 10469 ;; This function uses a non-reentrant model
 10470 ;;
 10471                           
 10472                           	psect	text96
 10473   001322                     __ptext96:
 10474                           	callstack 0
 10475   001322                     i2_Sensor_scheduleNextScan:
 10476                           	callstack 18
 10477                           
 10478                           ;mcc_generated_files/touch/mtouch_sensor.c: 407:     mtouch_sensor_t* sensor;;mcc_genera
      +                          ted_files/touch/mtouch_sensor.c: 408:     _Bool skipScan = (_Bool)0;
 10479                           
 10480                           ;incstack = 0
 10481   001322  6A0A               	clrf	i2Sensor_scheduleNextScan@skipScan^0,c
 10482                           
 10483                           ;mcc_generated_files/touch/mtouch_sensor.c: 409:     _Bool state = (_Bool)GIE;
 10484   001324  0E00               	movlw	0
 10485   001326  BEF2               	btfsc	4082,7,c	;volatile
 10486   001328  0E01               	movlw	1
 10487   00132A  6E09               	movwf	i2Sensor_scheduleNextScan@state^0,c
 10488                           
 10489                           ;mcc_generated_files/touch/mtouch_sensor.c: 412:     while(MTOUCH_Sensor_wasSampled(curr
      +                          entScanSensor) || !MTOUCH_Sensor_isEnabled(currentScanSensor))
 10490   00132C  D009               	goto	i2l4638
 10491   00132E                     i2l4632:
 10492                           
 10493                           ;mcc_generated_files/touch/mtouch_sensor.c: 413:     {;mcc_generated_files/touch/mtouch_
      +                          sensor.c: 414:         if(++currentScanSensor == 5u)
 10494   00132E  2A45               	incf	_currentScanSensor^0,f,c
 10495   001330  0E05               	movlw	5
 10496   001332  1845               	xorwf	_currentScanSensor^0,w,c
 10497   001334  E105               	bnz	i2l4638
 10498                           
 10499                           ;mcc_generated_files/touch/mtouch_sensor.c: 415:         {;mcc_generated_files/touch/mto
      +                          uch_sensor.c: 416:             currentScanSensor = 0;
 10500   001336  6A45               	clrf	_currentScanSensor^0,c
 10501                           
 10502                           ;mcc_generated_files/touch/mtouch_sensor.c: 417:             sampling_flag = 0;
 10503   001338  6A44               	clrf	_sampling_flag^0,c
 10504                           
 10505                           ;mcc_generated_files/touch/mtouch_sensor.c: 418:             skipScan = 1;
 10506   00133A  0E01               	movlw	1
 10507   00133C  6E0A               	movwf	i2Sensor_scheduleNextScan@skipScan^0,c
 10508                           
 10509                           ;mcc_generated_files/touch/mtouch_sensor.c: 419:             break;
 10510   00133E  D00A               	goto	i2u351_40
 10511   001340                     i2l4638:
 10512                           
 10513                           ;mcc_generated_files/touch/mtouch_sensor.c: 412:     while(MTOUCH_Sensor_wasSampled(curr
      +                          entScanSensor) || !MTOUCH_Sensor_isEnabled(currentScanSensor))
 10514   001340  5045               	movf	_currentScanSensor^0,w,c
 10515   001342  EC1C  F016         	call	i2_MTOUCH_Sensor_wasSampled
 10516   001346  0900               	iorlw	0
 10517   001348  E1F2               	bnz	i2l4632
 10518   00134A  5045               	movf	_currentScanSensor^0,w,c
 10519   00134C  EC26  F016         	call	i2_MTOUCH_Sensor_isEnabled
 10520   001350  0900               	iorlw	0
 10521   001352  E0ED               	bz	i2l4632
 10522   001354                     i2u351_40:
 10523                           
 10524                           ;mcc_generated_files/touch/mtouch_sensor.c: 424:     if(skipScan==0)
 10525   001354  500A               	movf	i2Sensor_scheduleNextScan@skipScan^0,w,c
 10526   001356  A4D8               	btfss	status,2,c
 10527   001358  0012               	return	
 10528                           
 10529                           ;mcc_generated_files/touch/mtouch_sensor.c: 425:     {;mcc_generated_files/touch/mtouch_
      +                          sensor.c: 426:         sensor = &mtouch_sensor[currentScanSensor];
 10530   00135A  D870               	call	PL207	;call to abstracted procedure
 10531   00135C  6E0B               	movwf	i2Sensor_scheduleNextScan@sensor^0,c
 10532                           
 10533                           ;mcc_generated_files/touch/mtouch_sensor.c: 427:         if(Sensor_isCalibrated(sensor))
 10534   00135E  C00B  F001         	movff	i2Sensor_scheduleNextScan@sensor,i2Sensor_isCalibrated@sensor
 10535   001362                     i10L__ptext98:
 10536                           	callstack 18
 10537   001362                     i10Li2_Sensor_isCalibrated:
 10538                           	callstack 18
 10539   001362                     i10Li2l4332:
 10540                           	callstack 18
 10541                           
 10542                           ;mcc_generated_files/touch/mtouch_sensor.c: 811: static __attribute__((inline)) _Bool Se
      +                          nsor_isCalibrated(mtouch_sensor_t* sensor);mcc_generated_files/touch/mtouch_sensor.c: 81
      +                          2: {;mcc_generated_files/touch/mtouch_sensor.c: 813:     return (_Bool)sensor->calibrate
      +                          d;
 10543   001362  5001               	movf	i2Sensor_isCalibrated@sensor^0,w,c
 10544   001364  ECFB  F00C         	call	PL123	;call to abstracted procedure
 10545   001368  B6DF               	btfsc	indf2,3,c
 10546   00136A  D001               	goto	i10Li2u302_41
 10547   00136C  D002               	goto	i10Li2u302_40
 10548   00136E                     i10Li2u302_41:
 10549                           	callstack 18
 10550   00136E  0E01               	movlw	1
 10551   001370  D001               	goto	i10Li2u302_46
 10552   001372                     i10Li2u302_40:
 10553                           	callstack 18
 10554   001372  0E00               	movlw	0
 10555   001374                     i10Li2u302_46:
 10556                           	callstack 18
 10557   001374                     i10Li2l1303:
 10558                           	callstack 18
 10559   001374  0900               	iorlw	0
 10560   001376  E00A               	bz	i2l4650
 10561                           
 10562                           ;mcc_generated_files/touch/mtouch_sensor.c: 428:         {;mcc_generated_files/touch/mto
      +                          uch_sensor.c: 429:             ADACQ = (mtouch_sensor_time_t)sensor->acquisition_time;
 10563   001378  500B               	movf	i2Sensor_scheduleNextScan@sensor^0,w,c
 10564   00137A  EC3A  F00B         	call	PL119	;call to abstracted procedure
 10565   00137E  010F               	movlb	15	; () banked
 10566   001380  6F57               	movwf	87,b	;volatile
 10567                           
 10568                           ;mcc_generated_files/touch/mtouch_sensor.c: 430:             ADPRE = (mtouch_sensor_time
      +                          _t)sensor->precharge_time;
 10569   001382  500B               	movf	i2Sensor_scheduleNextScan@sensor^0,w,c
 10570   001384  EC25  F011         	call	PL115	;call to abstracted procedure
 10571   001388  6F59               	movwf	89,b	;volatile
 10572                           
 10573                           ;mcc_generated_files/touch/mtouch_sensor.c: 431:         }
 10574   00138A  D018               	goto	i2l4656
 10575   00138C                     i2l4650:
 10576                           
 10577                           ;mcc_generated_files/touch/mtouch_sensor.c: 433:         {;mcc_generated_files/touch/mto
      +                          uch_sensor.c: 434:             if(Sensor_isCalibratingAcqTime(sensor))
 10578   00138C  C00B  F001         	movff	i2Sensor_scheduleNextScan@sensor,i2Sensor_isCalibratingAcqTime@sensor
 10579   001390                     i11L__ptext97:
 10580                           	callstack 18
 10581   001390                     i11Li2_Sensor_isCalibratingAcqTime:
 10582                           	callstack 18
 10583   001390                     i11Li2l4336:
 10584                           	callstack 18
 10585                           
 10586                           ;mcc_generated_files/touch/mtouch_sensor.c: 829: static __attribute__((inline)) _Bool Se
      +                          nsor_isCalibratingAcqTime(mtouch_sensor_t* sensor);mcc_generated_files/touch/mtouch_sens
      +                          or.c: 830: {;mcc_generated_files/touch/mtouch_sensor.c: 831:     return (_Bool)sensor->a
      +                          cqTime_cal;
 10587   001390  5001               	movf	i2Sensor_isCalibratingAcqTime@sensor^0,w,c
 10588   001392  ECFB  F00C         	call	PL123	;call to abstracted procedure
 10589   001396  B8DF               	btfsc	indf2,4,c
 10590   001398  D001               	goto	i11Li2u303_41
 10591   00139A  D002               	goto	i11Li2u303_40
 10592   00139C                     i11Li2u303_41:
 10593                           	callstack 18
 10594   00139C  0E01               	movlw	1
 10595   00139E  D001               	goto	i11Li2u303_46
 10596   0013A0                     i11Li2u303_40:
 10597                           	callstack 18
 10598   0013A0  0E00               	movlw	0
 10599   0013A2                     i11Li2u303_46:
 10600                           	callstack 18
 10601   0013A2                     i11Li2l1312:
 10602                           	callstack 18
 10603   0013A2  0900               	iorlw	0
 10604   0013A4  E009               	bz	i2l4654
 10605                           
 10606                           ;mcc_generated_files/touch/mtouch_sensor.c: 435:             {;mcc_generated_files/touch
      +                          /mtouch_sensor.c: 436:                 ADPRE = (mtouch_sensor_time_t)sensor->precharge_t
      +                          ime;
 10607   0013A6  500B               	movf	i2Sensor_scheduleNextScan@sensor^0,w,c
 10608   0013A8  EC25  F011         	call	PL115	;call to abstracted procedure
 10609   0013AC  010F               	movlb	15	; () banked
 10610   0013AE  6F59               	movwf	89,b	;volatile
 10611                           
 10612                           ;mcc_generated_files/touch/mtouch_sensor.c: 437:                 ADACQ = (mtouch_sensor_
      +                          time_t)sensor->acquisition_time;
 10613   0013B0  500B               	movf	i2Sensor_scheduleNextScan@sensor^0,w,c
 10614   0013B2  EC3A  F00B         	call	PL119	;call to abstracted procedure
 10615   0013B6  D001               	goto	L11
 10616   0013B8                     i2l4654:
 10617                           
 10618                           ;mcc_generated_files/touch/mtouch_sensor.c: 440:             {;mcc_generated_files/touch
      +                          /mtouch_sensor.c: 441:                 ADPRE = ((mtouch_sensor_time_t)((mtouch_sensor_ti
      +                          me_t)48 << (uint8_t)2));
 10619   0013B8  D84B               	call	PL239	;call to abstracted procedure
 10620   0013BA                     L11:
 10621                           
 10622                           ;mcc_generated_files/touch/mtouch_sensor.c: 442:                 ADACQ = ((mtouch_sensor
      +                          _time_t)((mtouch_sensor_time_t)48 << (uint8_t)2));
 10623   0013BA  6F57               	movwf	87,b	;volatile
 10624   0013BC                     i2l4656:
 10625                           
 10626                           ; BSR set to: 15
 10627                           ;mcc_generated_files/touch/mtouch_sensor.c: 446:         ADPRE +=(uint8_t)sample_delay;
 10628   0013BC  5040               	movf	_sample_delay^0,w,c	;volatile
 10629   0013BE  2759               	addwf	89,f,b	;volatile
 10630                           
 10631                           ; BSR set to: 15
 10632                           ;mcc_generated_files/touch/mtouch_sensor.c: 447:         ADPCH = (uint8_t)sensor->adpch;
 10633   0013C0  500B               	movf	i2Sensor_scheduleNextScan@sensor^0,w,c
 10634   0013C2  D837               	call	PL205	;call to abstracted procedure
 10635   0013C4  6F5A               	movwf	90,b	;volatile
 10636                           
 10637                           ; BSR set to: 15
 10638                           ;mcc_generated_files/touch/mtouch_sensor.c: 448:         ADRPT = (uint8_t)(sensor->overs
      +                          ampling>>1);
 10639   0013C6  500B               	movf	i2Sensor_scheduleNextScan@sensor^0,w,c
 10640   0013C8  D826               	call	PL137	;call to abstracted procedure
 10641   0013CA  D83D               	call	PL215	;call to abstracted procedure
 10642   0013CC  90D8               	bcf	status,0,c
 10643   0013CE  3006               	rrcf	(??i2_Sensor_scheduleNextScan+1)^0,w,c
 10644   0013D0  6E08               	movwf	(??i2_Sensor_scheduleNextScan+3)^0,c
 10645   0013D2  3005               	rrcf	??i2_Sensor_scheduleNextScan^0,w,c
 10646   0013D4  6E07               	movwf	(??i2_Sensor_scheduleNextScan+2)^0,c
 10647   0013D6  5007               	movf	(??i2_Sensor_scheduleNextScan+2)^0,w,c
 10648   0013D8  6E61               	movwf	97,c	;volatile
 10649                           
 10650                           ; BSR set to: 15
 10651                           ;mcc_generated_files/touch/mtouch_sensor.c: 449:         ADCAP = (uint8_t)sensor->addcap
      +                          ;
 10652   0013DA  500B               	movf	i2Sensor_scheduleNextScan@sensor^0,w,c
 10653   0013DC  6ED9               	movwf	fsr2l,c
 10654                           
 10655                           ; BSR set to: 15
 10656                           ;mcc_generated_files/touch/mtouch_sensor.c: 450:         ADCON0bits.ADON = 1;
 10657                           
 10658                           ; BSR set to: 15
 10659                           ;mcc_generated_files/touch/mtouch_sensor.c: 451:         sampling_flag= 1;
 10660   0013DE  D820               	call	PL167	;call to abstracted procedure
 10661                           
 10662                           ; BSR set to: 15
 10663                           ;mcc_generated_files/touch/mtouch_sensor.c: 452:         Sensor_SetTrisBit(currentScanSe
      +                          nsor,1);
 10664   0013E0  6E01               	movwf	i2Sensor_SetTrisBit@TrisBit^0,c
 10665   0013E2  5045               	movf	_currentScanSensor^0,w,c
 10666   0013E4  ECB6  F012         	call	i2_Sensor_SetTrisBit
 10667                           
 10668                           ;mcc_generated_files/touch/mtouch_sensor.c: 453:         GIE = 0;
 10669   0013E8  9EF2               	bcf	4082,7,c	;volatile
 10670                           
 10671                           ;mcc_generated_files/touch/mtouch_sensor.c: 454:         ADCON0bits.GO = 1;
 10672   0013EA  010F               	movlb	15	; () banked
 10673   0013EC  815B               	bsf	91,0,b	;volatile
 10674                           
 10675                           ; BSR set to: 15
 10676                           ;mcc_generated_files/touch/mtouch_sensor.c: 455:         ADACC = ((mtouch_sensor_packets
      +                          ample_t)(sensor->oversampling)<<9);
 10677   0013EE  500B               	movf	i2Sensor_scheduleNextScan@sensor^0,w,c
 10678   0013F0  D812               	call	PL137	;call to abstracted procedure
 10679   0013F2  D829               	call	PL215	;call to abstracted procedure
 10680   0013F4  0E09               	movlw	9
 10681   0013F6                     i2u355_45:
 10682   0013F6  90D8               	bcf	status,0,c
 10683   0013F8  3605               	rlcf	??i2_Sensor_scheduleNextScan^0,f,c
 10684   0013FA  3606               	rlcf	(??i2_Sensor_scheduleNextScan+1)^0,f,c
 10685   0013FC  2EE8               	decfsz	wreg,f,c
 10686   0013FE  D7FB               	goto	i2u355_45
 10687   001400  C005  FF6B         	movff	??i2_Sensor_scheduleNextScan,3947	;volatile
 10688   001404  C006  FF6C         	movff	??i2_Sensor_scheduleNextScan+1,3948	;volatile
 10689                           
 10690                           ; BSR set to: 15
 10691                           ;mcc_generated_files/touch/mtouch_sensor.c: 456:         GIE = state;
 10692   001408  B009               	btfsc	i2Sensor_scheduleNextScan@state^0,0,c
 10693   00140A  D002               	bra	i2u356_45
 10694   00140C  9EF2               	bcf	4082,7,c	;volatile
 10695   00140E  D001               	bra	i2u356_46
 10696   001410                     i2u356_45:
 10697   001410  8EF2               	bsf	4082,7,c	;volatile
 10698   001412                     i2u356_46:
 10699                           
 10700                           ;mcc_generated_files/touch/mtouch_sensor.c: 457:         scanInterrupted = 0;
 10701   001412  6A43               	clrf	_scanInterrupted^0,c	;volatile
 10702   001414  0012               	return		;funcret
 10703   001416                     __end_ofi2_Sensor_scheduleNextScan:
 10704                           	callstack 0
 10705   001416                     PL137:
 10706                           	callstack 20
 10707   001416  6ED9               	movwf	fsr2l,c
 10708   001418  6ADA               	clrf	fsr2h,c
 10709   00141A  0E04               	movlw	4
 10710   00141C  26D9               	addwf	fsr2l,f,c
 10711   00141E  0C04               	retlw	4
 10712   001420                     __end_ofPL137:
 10713                           	callstack 0
 10714   001420                     PL167:
 10715                           	callstack 20
 10716   001420  6ADA               	clrf	fsr2h,c
 10717   001422  0E06               	movlw	6
 10718   001424  26D9               	addwf	fsr2l,f,c
 10719   001426  50DF               	movf	indf2,w,c
 10720   001428  6F58               	movwf	88,b	;volatile
 10721   00142A  8F5B               	bsf	91,7,b	;volatile
 10722   00142C  0E01               	movlw	1
 10723   00142E  6E44               	movwf	_sampling_flag^0,c
 10724   001430  0C01               	retlw	1
 10725   001432                     __end_ofPL167:
 10726                           	callstack 0
 10727   001432                     PL205:
 10728                           	callstack 20
 10729   001432  6ED9               	movwf	fsr2l,c
 10730   001434  6ADA               	clrf	fsr2h,c
 10731   001436  2AD9               	incf	fsr2l,f,c
 10732   001438  50DF               	movf	indf2,w,c
 10733   00143A  0012               	return	
 10734   00143C                     __end_ofPL205:
 10735                           	callstack 0
 10736   00143C                     PL207:
 10737                           	callstack 20
 10738   00143C  5045               	movf	_currentScanSensor^0,w,c
 10739   00143E  0D0A               	mullw	10
 10740   001440  50F3               	movf	243,w,c
 10741   001442  0F91               	addlw	low _mtouch_sensor
 10742   001444  0012               	return	
 10743   001446                     __end_ofPL207:
 10744                           	callstack 0
 10745   001446                     PL215:
 10746                           	callstack 18
 10747   001446  CFDE F005          	movff	postinc2,??i2_Sensor_scheduleNextScan
 10748   00144A  CFDD F006          	movff	postdec2,??i2_Sensor_scheduleNextScan+1
 10749   00144E  0012               	return	
 10750   001450                     __end_ofPL215:
 10751                           	callstack 0
 10752   001450                     PL239:
 10753                           	callstack 20
 10754   001450  0EC0               	movlw	192
 10755   001452  010F               	movlb	15	; () banked
 10756   001454  6F59               	movwf	89,b	;volatile
 10757   001456  0CC0               	retlw	192
 10758   001458                     __end_ofPL239:
 10759                           	callstack 0
 10760                           
 10761 ;; *************** function i2_Sensor_isCalibratingAcqTime *****************
 10762 ;; Defined at:
 10763 ;;		line 829 in file "mcc_generated_files/touch/mtouch_sensor.c"
 10764 ;; Parameters:    Size  Location     Type
 10765 ;;  sensor          1    0[COMRAM] PTR struct .
 10766 ;;		 -> mtouch_sensor(50), 
 10767 ;; Auto vars:     Size  Location     Type
 10768 ;;		None
 10769 ;; Return value:  Size  Location     Type
 10770 ;;                  1    wreg      _Bool 
 10771 ;; Registers used:
 10772 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10773 ;; Tracked objects:
 10774 ;;		On entry : 0/F
 10775 ;;		On exit  : 0/0
 10776 ;;		Unchanged: 0/0
 10777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
 10778 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10781 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10782 ;;Total ram usage:        1 bytes
 10783 ;; Hardware stack levels used: 1
 10784 ;; This function calls:
 10785 ;;		Nothing
 10786 ;; This function is called by:
 10787 ;;		i2_Sensor_scheduleNextScan
 10788 ;; This function uses a non-reentrant model
 10789 ;;
 10790                           
 10791                           	psect	text97
 10792   000000                     __ptext97:
 10793                           	callstack 0
 10794   000000                     __end_ofi2_Sensor_isCalibratingAcqTime:
 10795                           	callstack 0
 10796                           
 10797 ;; *************** function i2_Sensor_isCalibrated *****************
 10798 ;; Defined at:
 10799 ;;		line 811 in file "mcc_generated_files/touch/mtouch_sensor.c"
 10800 ;; Parameters:    Size  Location     Type
 10801 ;;  sensor          1    0[COMRAM] PTR struct .
 10802 ;;		 -> mtouch_sensor(50), 
 10803 ;; Auto vars:     Size  Location     Type
 10804 ;;		None
 10805 ;; Return value:  Size  Location     Type
 10806 ;;                  1    wreg      _Bool 
 10807 ;; Registers used:
 10808 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 10809 ;; Tracked objects:
 10810 ;;		On entry : 0/F
 10811 ;;		On exit  : 0/0
 10812 ;;		Unchanged: 0/0
 10813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
 10814 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10815 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10817 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10818 ;;Total ram usage:        1 bytes
 10819 ;; Hardware stack levels used: 1
 10820 ;; This function calls:
 10821 ;;		Nothing
 10822 ;; This function is called by:
 10823 ;;		_MTOUCH_Sensor_Service
 10824 ;;		i2_Sensor_scheduleNextScan
 10825 ;; This function uses a non-reentrant model
 10826 ;;
 10827                           
 10828                           	psect	text98
 10829   000000                     __ptext98:
 10830                           	callstack 0
 10831   000000                     __end_ofi2_Sensor_isCalibrated:
 10832                           	callstack 0
 10833                           
 10834 ;; *************** function i2_Sensor_SetTrisBit *****************
 10835 ;; Defined at:
 10836 ;;		line 242 in file "mcc_generated_files/touch/mtouch_sensor.c"
 10837 ;; Parameters:    Size  Location     Type
 10838 ;;  sensor          1    wreg     enum E13072
 10839 ;;  TrisBit         1    0[COMRAM] unsigned char 
 10840 ;; Auto vars:     Size  Location     Type
 10841 ;;  sensor          1    3[COMRAM] enum E13072
 10842 ;; Return value:  Size  Location     Type
 10843 ;;                  1    wreg      void 
 10844 ;; Registers used:
 10845 ;;		wreg, status,2, status,0
 10846 ;; Tracked objects:
 10847 ;;		On entry : 3E/E
 10848 ;;		On exit  : 0/0
 10849 ;;		Unchanged: 0/0
 10850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
 10851 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10852 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10853 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10854 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10855 ;;Total ram usage:        4 bytes
 10856 ;; Hardware stack levels used: 1
 10857 ;; This function calls:
 10858 ;;		Nothing
 10859 ;; This function is called by:
 10860 ;;		_MTOUCH_Sensor_Service
 10861 ;;		i2_Sensor_scheduleNextScan
 10862 ;; This function uses a non-reentrant model
 10863 ;;
 10864                           
 10865                           	psect	text99
 10866   00256C                     __ptext99:
 10867                           	callstack 0
 10868   00256C                     i2_Sensor_SetTrisBit:
 10869                           	callstack 18
 10870                           
 10871                           ;incstack = 0
 10872                           ;i2Sensor_SetTrisBit@sensor stored from wreg
 10873   00256C  6E04               	movwf	i2Sensor_SetTrisBit@sensor^0,c
 10874                           
 10875                           ;mcc_generated_files/touch/mtouch_sensor.c: 242: static void Sensor_SetTrisBit(enum mtou
      +                          ch_sensor_names sensor,uint8_t TrisBit);mcc_generated_files/touch/mtouch_sensor.c: 243: 
      +                          {;mcc_generated_files/touch/mtouch_sensor.c: 244:     switch(sensor)
 10876   00256E  D01E               	goto	i2l4312
 10877   002570                     i2l1128:
 10878                           
 10879                           ;mcc_generated_files/touch/mtouch_sensor.c: 247:             TRISAbits.TRISA2 = TrisBit;
 10880   002570  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit^0,0,c
 10881   002572  D002               	bra	i2u295_45
 10882   002574  9487               	bcf	135,2,c	;volatile
 10883   002576  D001               	bra	i2u295_46
 10884   002578                     i2u295_45:
 10885   002578  8487               	bsf	135,2,c	;volatile
 10886   00257A                     i2u295_46:
 10887                           
 10888                           ;mcc_generated_files/touch/mtouch_sensor.c: 248:             break;
 10889   00257A  0012               	return	
 10890   00257C                     i2l1130:
 10891                           
 10892                           ;mcc_generated_files/touch/mtouch_sensor.c: 250:             TRISDbits.TRISD7 = TrisBit;
 10893   00257C  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit^0,0,c
 10894   00257E  D002               	bra	i2u296_45
 10895   002580  9E8A               	bcf	138,7,c	;volatile
 10896   002582  D001               	bra	i2u296_46
 10897   002584                     i2u296_45:
 10898   002584  8E8A               	bsf	138,7,c	;volatile
 10899   002586                     i2u296_46:
 10900                           
 10901                           ;mcc_generated_files/touch/mtouch_sensor.c: 251:             break;
 10902   002586  0012               	return	
 10903   002588                     i2l1131:
 10904                           
 10905                           ;mcc_generated_files/touch/mtouch_sensor.c: 253:             TRISBbits.TRISB4 = TrisBit;
 10906   002588  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit^0,0,c
 10907   00258A  D002               	bra	i2u297_45
 10908   00258C  9888               	bcf	136,4,c	;volatile
 10909   00258E  D001               	bra	i2u297_46
 10910   002590                     i2u297_45:
 10911   002590  8888               	bsf	136,4,c	;volatile
 10912   002592                     i2u297_46:
 10913                           
 10914                           ;mcc_generated_files/touch/mtouch_sensor.c: 254:             break;
 10915   002592  0012               	return	
 10916   002594                     i2l1132:
 10917                           
 10918                           ;mcc_generated_files/touch/mtouch_sensor.c: 256:             TRISAbits.TRISA5 = TrisBit;
 10919   002594  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit^0,0,c
 10920   002596  D002               	bra	i2u298_45
 10921   002598  9A87               	bcf	135,5,c	;volatile
 10922   00259A  D001               	bra	i2u298_46
 10923   00259C                     i2u298_45:
 10924   00259C  8A87               	bsf	135,5,c	;volatile
 10925   00259E                     i2u298_46:
 10926                           
 10927                           ;mcc_generated_files/touch/mtouch_sensor.c: 257:             break;
 10928   00259E  0012               	return	
 10929   0025A0                     i2l1133:
 10930                           
 10931                           ;mcc_generated_files/touch/mtouch_sensor.c: 259:             TRISAbits.TRISA4 = TrisBit;
 10932   0025A0  B001               	btfsc	i2Sensor_SetTrisBit@TrisBit^0,0,c
 10933   0025A2  D002               	bra	i2u299_45
 10934   0025A4  9887               	bcf	135,4,c	;volatile
 10935   0025A6  D001               	bra	i2u299_46
 10936   0025A8                     i2u299_45:
 10937   0025A8  8887               	bsf	135,4,c	;volatile
 10938   0025AA                     i2u299_46:
 10939                           
 10940                           ;mcc_generated_files/touch/mtouch_sensor.c: 260:             break;
 10941   0025AA  0012               	return	
 10942   0025AC                     i2l4312:
 10943   0025AC  5004               	movf	i2Sensor_SetTrisBit@sensor^0,w,c
 10944   0025AE  6E02               	movwf	??i2_Sensor_SetTrisBit^0,c
 10945   0025B0  6A03               	clrf	(??i2_Sensor_SetTrisBit+1)^0,c
 10946                           
 10947                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10948                           ; Switch size 1, requested type "space"
 10949                           ; Number of cases is 1, Range of values is 0 to 0
 10950                           ; switch strategies available:
 10951                           ; Name         Instructions Cycles
 10952                           ; simple_byte            4     3 (average)
 10953                           ;	Chosen strategy is simple_byte
 10954   0025B2  5003               	movf	(??i2_Sensor_SetTrisBit+1)^0,w,c
 10955   0025B4  A4D8               	btfss	status,2,c
 10956   0025B6  0012               	return	
 10957                           
 10958                           ; Switch size 1, requested type "space"
 10959                           ; Number of cases is 5, Range of values is 0 to 4
 10960                           ; switch strategies available:
 10961                           ; Name         Instructions Cycles
 10962                           ; simple_byte           16     9 (average)
 10963                           ;	Chosen strategy is simple_byte
 10964   0025B8  5002               	movf	??i2_Sensor_SetTrisBit^0,w,c
 10965   0025BA  E0DA               	bz	i2l1128
 10966   0025BC  0A01               	xorlw	1	; case 1
 10967   0025BE  E0DE               	bz	i2l1130
 10968   0025C0  0A03               	xorlw	3	; case 2
 10969   0025C2  E0E2               	bz	i2l1131
 10970   0025C4  0A01               	xorlw	1	; case 3
 10971   0025C6  E0E6               	bz	i2l1132
 10972   0025C8  0A07               	xorlw	7	; case 4
 10973   0025CA  E0EA               	bz	i2l1133
 10974   0025CC  0012               	return		;funcret
 10975   0025CE                     __end_ofi2_Sensor_SetTrisBit:
 10976                           	callstack 0
 10977                           
 10978 ;; *************** function i2_MTOUCH_Sensor_wasSampled *****************
 10979 ;; Defined at:
 10980 ;;		line 851 in file "mcc_generated_files/touch/mtouch_sensor.c"
 10981 ;; Parameters:    Size  Location     Type
 10982 ;;  sensor          1    wreg     enum E13072
 10983 ;; Auto vars:     Size  Location     Type
 10984 ;;  sensor          1    0[COMRAM] enum E13072
 10985 ;; Return value:  Size  Location     Type
 10986 ;;                  1    wreg      _Bool 
 10987 ;; Registers used:
 10988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 10989 ;; Tracked objects:
 10990 ;;		On entry : 0/F
 10991 ;;		On exit  : 0/0
 10992 ;;		Unchanged: 0/0
 10993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
 10994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10995 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10997 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 10998 ;;Total ram usage:        1 bytes
 10999 ;; Hardware stack levels used: 1
 11000 ;; This function calls:
 11001 ;;		Nothing
 11002 ;; This function is called by:
 11003 ;;		i2_Sensor_scheduleNextScan
 11004 ;; This function uses a non-reentrant model
 11005 ;;
 11006                           
 11007                           	psect	text100
 11008   002C38                     __ptext100:
 11009                           	callstack 0
 11010   002C38                     i2_MTOUCH_Sensor_wasSampled:
 11011                           	callstack 18
 11012                           
 11013                           ;incstack = 0
 11014                           ;i2MTOUCH_Sensor_wasSampled@sensor stored from wreg
 11015   002C38  6E01               	movwf	i2MTOUCH_Sensor_wasSampled@sensor^0,c
 11016                           
 11017                           ;mcc_generated_files/touch/mtouch_sensor.c: 851: _Bool MTOUCH_Sensor_wasSampled(enum mto
      +                          uch_sensor_names sensor);mcc_generated_files/touch/mtouch_sensor.c: 852: {;mcc_generated
      +                          _files/touch/mtouch_sensor.c: 853:     if(sensor < 5u)
 11018   002C3A  0E05               	movlw	5
 11019   002C3C  6001               	cpfslt	i2MTOUCH_Sensor_wasSampled@sensor^0,c
 11020   002C3E  0C00               	retlw	0
 11021                           
 11022                           ;mcc_generated_files/touch/mtouch_sensor.c: 854:         return (_Bool)mtouch_sensor[sen
      +                          sor].sampled;
 11023   002C40  5001               	movf	i2MTOUCH_Sensor_wasSampled@sensor^0,w,c
 11024   002C42  EC6D  F00D         	call	PL113	;call to abstracted procedure
 11025   002C46  B2DF               	btfsc	indf2,1,c
 11026   002C48  0C01               	retlw	1
 11027   002C4A  0C00               	retlw	0
 11028   002C4C                     __end_ofi2_MTOUCH_Sensor_wasSampled:
 11029                           	callstack 0
 11030                           
 11031 ;; *************** function i2_MTOUCH_Sensor_isEnabled *****************
 11032 ;; Defined at:
 11033 ;;		line 739 in file "mcc_generated_files/touch/mtouch_sensor.c"
 11034 ;; Parameters:    Size  Location     Type
 11035 ;;  sensor          1    wreg     enum E13072
 11036 ;; Auto vars:     Size  Location     Type
 11037 ;;  sensor          1    0[COMRAM] enum E13072
 11038 ;; Return value:  Size  Location     Type
 11039 ;;                  1    wreg      _Bool 
 11040 ;; Registers used:
 11041 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 11042 ;; Tracked objects:
 11043 ;;		On entry : 0/F
 11044 ;;		On exit  : 0/0
 11045 ;;		Unchanged: 0/0
 11046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
 11047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11048 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11050 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11051 ;;Total ram usage:        1 bytes
 11052 ;; Hardware stack levels used: 1
 11053 ;; This function calls:
 11054 ;;		Nothing
 11055 ;; This function is called by:
 11056 ;;		i2_Sensor_scheduleNextScan
 11057 ;; This function uses a non-reentrant model
 11058 ;;
 11059                           
 11060                           	psect	text101
 11061   002C4C                     __ptext101:
 11062                           	callstack 0
 11063   002C4C                     i2_MTOUCH_Sensor_isEnabled:
 11064                           	callstack 18
 11065                           
 11066                           ;incstack = 0
 11067                           ;i2MTOUCH_Sensor_isEnabled@sensor stored from wreg
 11068   002C4C  6E01               	movwf	i2MTOUCH_Sensor_isEnabled@sensor^0,c
 11069                           
 11070                           ;mcc_generated_files/touch/mtouch_sensor.c: 739: _Bool MTOUCH_Sensor_isEnabled(enum mtou
      +                          ch_sensor_names sensor);mcc_generated_files/touch/mtouch_sensor.c: 740: {;mcc_generated_
      +                          files/touch/mtouch_sensor.c: 741:     if(sensor < 5u)
 11071   002C4E  0E05               	movlw	5
 11072   002C50  6001               	cpfslt	i2MTOUCH_Sensor_isEnabled@sensor^0,c
 11073   002C52  0C00               	retlw	0
 11074                           
 11075                           ;mcc_generated_files/touch/mtouch_sensor.c: 742:         return (_Bool)mtouch_sensor[sen
      +                          sor].enabled;
 11076   002C54  5001               	movf	i2MTOUCH_Sensor_isEnabled@sensor^0,w,c
 11077   002C56  EC6D  F00D         	call	PL113	;call to abstracted procedure
 11078   002C5A  B0DF               	btfsc	indf2,0,c
 11079   002C5C  0C01               	retlw	1
 11080   002C5E  0C00               	retlw	0
 11081   002C60                     __end_ofi2_MTOUCH_Sensor_isEnabled:
 11082                           	callstack 0
 11083                           
 11084 ;; *************** function _abs *****************
 11085 ;; Defined at:
 11086 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\abs.c"
 11087 ;; Parameters:    Size  Location     Type
 11088 ;;  a               2    0[COMRAM] int 
 11089 ;; Auto vars:     Size  Location     Type
 11090 ;;		None
 11091 ;; Return value:  Size  Location     Type
 11092 ;;                  2    0[COMRAM] int 
 11093 ;; Registers used:
 11094 ;;		wreg, status,2, status,0
 11095 ;; Tracked objects:
 11096 ;;		On entry : 0/F
 11097 ;;		On exit  : 0/0
 11098 ;;		Unchanged: 0/0
 11099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
 11100 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11101 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11102 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11103 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11104 ;;Total ram usage:        4 bytes
 11105 ;; Hardware stack levels used: 1
 11106 ;; This function calls:
 11107 ;;		Nothing
 11108 ;; This function is called by:
 11109 ;;		_MTOUCH_Sensor_Service
 11110 ;; This function uses a non-reentrant model
 11111 ;;
 11112                           
 11113                           	psect	text102
 11114   0029AE                     __ptext102:
 11115                           	callstack 0
 11116   0029AE                     _abs:
 11117                           	callstack 19
 11118                           
 11119                           ;incstack = 0
 11120   0029AE  BE02               	btfsc	(abs@a+1)^0,7,c
 11121   0029B0  D005               	goto	i2l2269
 11122   0029B2  C001  F001         	movff	abs@a,?_abs
 11123   0029B6  C002  F002         	movff	abs@a+1,?_abs+1
 11124   0029BA  0012               	return	
 11125   0029BC                     i2l2269:
 11126   0029BC  C001  F003         	movff	abs@a,??_abs
 11127   0029C0  C002  F004         	movff	abs@a+1,??_abs+1
 11128   0029C4  1E03               	comf	??_abs^0,f,c
 11129   0029C6  1E04               	comf	(??_abs+1)^0,f,c
 11130   0029C8  4A03               	infsnz	??_abs^0,f,c
 11131   0029CA  2A04               	incf	(??_abs+1)^0,f,c
 11132   0029CC  C003  F001         	movff	??_abs,?_abs
 11133   0029D0  C004  F002         	movff	??_abs+1,?_abs+1
 11134   0029D4  0012               	return		;funcret
 11135   0029D6                     __end_of_abs:
 11136                           	callstack 0
 11137                           
 11138 ;; *************** function _Sensor_setSampled *****************
 11139 ;; Defined at:
 11140 ;;		line 864 in file "mcc_generated_files/touch/mtouch_sensor.c"
 11141 ;; Parameters:    Size  Location     Type
 11142 ;;  sensor          1    0[COMRAM] PTR struct .
 11143 ;;		 -> mtouch_sensor(50), 
 11144 ;; Auto vars:     Size  Location     Type
 11145 ;;		None
 11146 ;; Return value:  Size  Location     Type
 11147 ;;                  1    wreg      void 
 11148 ;; Registers used:
 11149 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11150 ;; Tracked objects:
 11151 ;;		On entry : 0/F
 11152 ;;		On exit  : 0/0
 11153 ;;		Unchanged: 0/0
 11154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
 11155 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11158 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11159 ;;Total ram usage:        1 bytes
 11160 ;; Hardware stack levels used: 1
 11161 ;; This function calls:
 11162 ;;		Nothing
 11163 ;; This function is called by:
 11164 ;;		_MTOUCH_Sensor_Service
 11165 ;; This function uses a non-reentrant model
 11166 ;;
 11167                           
 11168                           	psect	text103
 11169   000000                     __ptext103:
 11170                           	callstack 0
 11171   000000                     _Sensor_setSampled:
 11172                           	callstack 0
 11173   000000                     __end_of_Sensor_setSampled:
 11174                           	callstack 0
 11175                           
 11176 ;; *************** function _Sensor_setCalibrated *****************
 11177 ;; Defined at:
 11178 ;;		line 816 in file "mcc_generated_files/touch/mtouch_sensor.c"
 11179 ;; Parameters:    Size  Location     Type
 11180 ;;  sensor          1    0[COMRAM] PTR struct .
 11181 ;;		 -> mtouch_sensor(50), 
 11182 ;; Auto vars:     Size  Location     Type
 11183 ;;		None
 11184 ;; Return value:  Size  Location     Type
 11185 ;;                  1    wreg      void 
 11186 ;; Registers used:
 11187 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 11188 ;; Tracked objects:
 11189 ;;		On entry : 0/F
 11190 ;;		On exit  : 0/0
 11191 ;;		Unchanged: 0/0
 11192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK14
 11193 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11196 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
 11197 ;;Total ram usage:        1 bytes
 11198 ;; Hardware stack levels used: 1
 11199 ;; This function calls:
 11200 ;;		Nothing
 11201 ;; This function is called by:
 11202 ;;		_MTOUCH_Sensor_Service
 11203 ;; This function uses a non-reentrant model
 11204 ;;
 11205                           
 11206                           	psect	text104
 11207   002CA8                     __ptext104:
 11208                           	callstack 0
 11209   002CA8                     _Sensor_setCalibrated:
 11210                           	callstack 19
 11211                           
 11212                           ;mcc_generated_files/touch/mtouch_sensor.c: 816: static void Sensor_setCalibrated(mtouch
      +                          _sensor_t* sensor);mcc_generated_files/touch/mtouch_sensor.c: 817: {;mcc_generated_files
      +                          /touch/mtouch_sensor.c: 818:     sensor->calibrated = 1;
 11213                           
 11214                           ;incstack = 0
 11215   002CA8  5001               	movf	Sensor_setCalibrated@sensor^0,w,c
 11216   002CAA  ECFB  F00C         	call	PL123	;call to abstracted procedure
 11217   002CAE  86DF               	bsf	indf2,3,c
 11218                           
 11219                           ;mcc_generated_files/touch/mtouch_sensor.c: 819:     sensor->acqTime_cal = 0;
 11220   002CB0  5001               	movf	Sensor_setCalibrated@sensor^0,w,c
 11221   002CB2  ECFB  F00C         	call	PL123	;call to abstracted procedure
 11222   002CB6  98DF               	bcf	indf2,4,c
 11223   002CB8  0C09               	retlw	9	;funcret
 11224   002CBA                     __end_of_Sensor_setCalibrated:
 11225                           	callstack 0
 11226                           
 11227                           	psect	rparam
 11228   000000                     
 11229                           	psect	temp
 11230   00004B                     btemp:
 11231                           	callstack 0
 11232   00004B                     	ds	1
 11233   000000                     int$flags	set	btemp
 11234   000000                     wtemp8	set	btemp+1
 11235   000000                     ttemp5	set	btemp+1
 11236   000000                     ttemp6	set	btemp+4
 11237   000000                     ttemp7	set	btemp+8
 11238                           
 11239                           	psect	config
 11240                           
 11241                           ;Config register CONFIG1L @ 0x300000
 11242                           ;	External Oscillator mode Selection bits
 11243                           ;	FEXTOSC = ECH, EC (external clock) above 8 MHz; PFM set to high power
 11244                           ;	Power-up default value for COSC bits
 11245                           ;	RSTOSC = EXTOSC, EXTOSC operating per FEXTOSC bits (device manufacturing default)
 11246   300000                     	org	3145728
 11247   300000  FF                 	db	255
 11248                           
 11249                           ;Config register CONFIG1H @ 0x300001
 11250                           ;	Clock Out Enable bit
 11251                           ;	CLKOUTEN = OFF, CLKOUT function is disabled
 11252                           ;	Clock Switch Enable bit
 11253                           ;	CSWEN = ON, Writing to NOSC and NDIV is allowed
 11254                           ;	Fail-Safe Clock Monitor Enable bit
 11255                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
 11256   300001                     	org	3145729
 11257   300001  FF                 	db	255
 11258                           
 11259                           ;Config register CONFIG2L @ 0x300002
 11260                           ;	Master Clear Enable bit
 11261                           ;	MCLRE = EXTMCLR, MCLR pin (RE3) is MCLR
 11262                           ;	Power-up Timer Enable bit
 11263                           ;	PWRTE = OFF, Power up timer disabled
 11264                           ;	Low-power BOR enable bit
 11265                           ;	LPBOREN = OFF, Low power BOR is disabled
 11266                           ;	Brown-out Reset Enable bits
 11267                           ;	BOREN = SBORDIS, Brown-out Reset enabled , SBOREN bit is ignored
 11268   300002                     	org	3145730
 11269   300002  FF                 	db	255
 11270                           
 11271                           ;Config register CONFIG2H @ 0x300003
 11272                           ;	Brown Out Reset Voltage selection bits
 11273                           ;	BORV = VBOR_190, Brown-out Reset Voltage (VBOR) set to 1.90V
 11274                           ;	ZCD Disable bit
 11275                           ;	ZCD = OFF, ZCD disabled. ZCD can be enabled by setting the ZCDSEN bit of ZCDCON
 11276                           ;	PPSLOCK bit One-Way Set Enable bit
 11277                           ;	PPS1WAY = ON, PPSLOCK bit can be cleared and set only once; PPS registers remain locke
      +                          d after one clear/set cycle
 11278                           ;	Stack Full/Underflow Reset Enable bit
 11279                           ;	STVREN = ON, Stack full/underflow will cause Reset
 11280                           ;	Extended Instruction Set Enable bit
 11281                           ;	XINST = OFF, Extended Instruction Set and Indexed Addressing Mode disabled
 11282   300003                     	org	3145731
 11283   300003  FF                 	db	255
 11284                           
 11285                           ;Config register CONFIG3L @ 0x300004
 11286                           ;	WDT Period Select bits
 11287                           ;	WDTCPS = WDTCPS_31, Divider ratio 1:65536; software control of WDTPS
 11288                           ;	WDT operating mode
 11289                           ;	WDTE = OFF, WDT Disabled
 11290   300004                     	org	3145732
 11291   300004  9F                 	db	159
 11292                           
 11293                           ;Config register CONFIG3H @ 0x300005
 11294                           ;	WDT Window Select bits
 11295                           ;	WDTCWS = WDTCWS_7, window always open (100%); software control; keyed access not requi
      +                          red
 11296                           ;	WDT input clock selector
 11297                           ;	WDTCCS = SC, Software Control
 11298   300005                     	org	3145733
 11299   300005  FF                 	db	255
 11300                           
 11301                           ;Config register CONFIG4L @ 0x300006
 11302                           ;	Write Protection Block 0
 11303                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
 11304                           ;	Write Protection Block 1
 11305                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
 11306                           ;	Write Protection Block 2
 11307                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
 11308                           ;	Write Protection Block 3
 11309                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
 11310                           ;	Write Protection Block 4
 11311                           ;	WRT4 = OFF, Block 4 (010000-013FFFh) not write-protected
 11312                           ;	Write Protection Block 5
 11313                           ;	WRT5 = OFF, Block 5 (014000-017FFFh) not write-protected
 11314                           ;	Write Protection Block 6
 11315                           ;	WRT6 = OFF, Block 6 (018000-01BFFFh) not write-protected
 11316                           ;	Write Protection Block 7
 11317                           ;	WRT7 = OFF, Block 7 (01C000-01FFFFh) not write-protected
 11318   300006                     	org	3145734
 11319   300006  FF                 	db	255
 11320                           
 11321                           ;Config register CONFIG4H @ 0x300007
 11322                           ;	Configuration Register Write Protection bit
 11323                           ;	WRTC = OFF, Configuration registers (300000-30000Bh) not write-protected
 11324                           ;	Boot Block Write Protection bit
 11325                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
 11326                           ;	Data EEPROM Write Protection bit
 11327                           ;	WRTD = OFF, Data EEPROM not write-protected
 11328                           ;	Scanner Enable bit
 11329                           ;	SCANE = ON, Scanner module is available for use, SCANMD bit can control the module
 11330                           ;	Low Voltage Programming Enable bit
 11331                           ;	LVP = ON, Low voltage programming enabled. MCLR/VPP pin function is MCLR. MCLRE config
      +                          uration bit is ignored
 11332   300007                     	org	3145735
 11333   300007  FF                 	db	255
 11334                           
 11335                           ;Config register CONFIG5L @ 0x300008
 11336                           ;	UserNVM Program Memory Code Protection bit
 11337                           ;	CP = OFF, UserNVM code protection disabled
 11338                           ;	DataNVM Memory Code Protection bit
 11339                           ;	CPD = OFF, DataNVM code protection disabled
 11340   300008                     	org	3145736
 11341   300008  FF                 	db	255
 11342                           
 11343                           ;Config register CONFIG5H @ 0x300009
 11344                           ;	unspecified, using default values
 11345   300009                     	org	3145737
 11346   300009  FF                 	db	255
 11347                           
 11348                           ;Config register CONFIG6L @ 0x30000A
 11349                           ;	Table Read Protection Block 0
 11350                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
 11351                           ;	Table Read Protection Block 1
 11352                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
 11353                           ;	Table Read Protection Block 2
 11354                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
 11355                           ;	Table Read Protection Block 3
 11356                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
 11357                           ;	Table Read Protection Block 4
 11358                           ;	EBTR4 = OFF, Block 4 (010000-013FFFh) not protected from table reads executed in other
      +                           blocks
 11359                           ;	Table Read Protection Block 5
 11360                           ;	EBTR5 = OFF, Block 5 (014000-017FFFh) not protected from table reads executed in other
      +                           blocks
 11361                           ;	Table Read Protection Block 6
 11362                           ;	EBTR6 = OFF, Block 6 (018000-01BFFFh) not protected from table reads executed in other
      +                           blocks
 11363                           ;	Table Read Protection Block 7
 11364                           ;	EBTR7 = OFF, Block 7 (01C000-01FFFFh) not protected from table reads executed in other
      +                           blocks
 11365   30000A                     	org	3145738
 11366   30000A  FF                 	db	255
 11367                           
 11368                           ;Config register CONFIG6H @ 0x30000B
 11369                           ;	Boot Block Table Read Protection bit
 11370                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
 11371   30000B                     	org	3145739
 11372   30000B  FF                 	db	255
 11373                           tosu	equ	0xFFF
 11374                           tosh	equ	0xFFE
 11375                           tosl	equ	0xFFD
 11376                           stkptr	equ	0xFFC
 11377                           pclatu	equ	0xFFB
 11378                           pclath	equ	0xFFA
 11379                           pcl	equ	0xFF9
 11380                           tblptru	equ	0xFF8
 11381                           tblptrh	equ	0xFF7
 11382                           tblptrl	equ	0xFF6
 11383                           tablat	equ	0xFF5
 11384                           prodh	equ	0xFF4
 11385                           prodl	equ	0xFF3
 11386                           indf0	equ	0xFEF
 11387                           postinc0	equ	0xFEE
 11388                           postdec0	equ	0xFED
 11389                           preinc0	equ	0xFEC
 11390                           plusw0	equ	0xFEB
 11391                           fsr0h	equ	0xFEA
 11392                           fsr0l	equ	0xFE9
 11393                           wreg	equ	0xFE8
 11394                           indf1	equ	0xFE7
 11395                           postinc1	equ	0xFE6
 11396                           postdec1	equ	0xFE5
 11397                           preinc1	equ	0xFE4
 11398                           plusw1	equ	0xFE3
 11399                           fsr1h	equ	0xFE2
 11400                           fsr1l	equ	0xFE1
 11401                           bsr	equ	0xFE0
 11402                           indf2	equ	0xFDF
 11403                           postinc2	equ	0xFDE
 11404                           postdec2	equ	0xFDD
 11405                           preinc2	equ	0xFDC
 11406                           plusw2	equ	0xFDB
 11407                           fsr2h	equ	0xFDA
 11408                           fsr2l	equ	0xFD9
 11409                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    135
    Data        35
    BSS         208
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     50      74
    BANK0           160     20     160
    BANK1           256      9      94
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK14           31      0       0

Pointer List with Targets:

    ADCC_ADTI_InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> ADCC_DefaultADTI_ISR(), ADCC_ThresholdISR_mTouch(), NULL(), 

    ADCC_SetADTIInterruptHandler@InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> ADCC_DefaultADTI_ISR(), ADCC_ThresholdISR_mTouch(), 

    Button_Baseline_Initialize@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_Baseline_Update@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_Check_AKS_Block@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_Check_AKS_Block@check_button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_Deviation_Update@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_Reading_Update@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_Reading_Update_Helper@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_Service@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_State_Initializing@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_State_NotPressed@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_State_Pressed@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_StateMachine	PTR FTN(PTR struct .,)void [3] size(3) Largest target is 1
		 -> Button_State_Initializing(), Button_State_NotPressed(), Button_State_Pressed(), 

    Button_StateMachine$0	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_Tick_helper@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    Button_Unscaled_Deviation_Get@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    calculate_contact_size@slider	PTR struct . size(1) Largest target is 17
		 -> mtouch_slider(BANK0[17]), 

    calculate_position@slider	PTR struct . size(1) Largest target is 17
		 -> mtouch_slider(BANK0[17]), 

    calculate_raw_position@slider	PTR struct . size(1) Largest target is 17
		 -> mtouch_slider(BANK0[17]), 

    callback_notPressed	PTR FTN(enum E13138,)void  size(3) Largest target is 1
		 -> Button_DefaultCallback(), ProcessButtonRelease(), 

    callback_position_changed	PTR FTN(enum E13201,)void  size(3) Largest target is 1
		 -> ProcessSliderChange(), Slider_DefaultCallback(), 

    callback_pressed	PTR FTN(enum E13138,)void  size(3) Largest target is 1
		 -> Button_DefaultCallback(), 

    callback_pressed@mtouch_slider$F1588	PTR FTN(enum E13201,)void  size(3) Largest target is 1
		 -> Slider_DefaultCallback(), 

    callback_released	PTR FTN(enum E13201,)void  size(3) Largest target is 1
		 -> Slider_DefaultCallback(), 

    callback_sampled	PTR FTN(enum E13072,)void  size(3) Largest target is 1
		 -> Sensor_DefaultCallback(), 

    get_difference@slider	PTR struct . size(1) Largest target is 17
		 -> mtouch_slider(BANK0[17]), 

    INT0_InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), NULL(), 

    INT0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> INT0_DefaultInterruptHandler(), 

    INT1_InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), NULL(), 

    INT1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> INT1_DefaultInterruptHandler(), 

    INT2_InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), NULL(), 

    INT2_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> INT2_DefaultInterruptHandler(), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), mtouch_sensor(BANK0[50]), 

    memcpy@d1	PTR void  size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), mtouch_sensor(BANK0[50]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 85
		 -> mtouch_button_init(CODE[85]), mtouch_sensor_init(CODE[50]), 

    memcpy@s1	PTR const void  size(1) Largest target is 85
		 -> mtouch_button_init(CODE[85]), mtouch_sensor_init(CODE[50]), 

    moving_average_filter@slider	PTR struct . size(1) Largest target is 17
		 -> mtouch_slider(BANK0[17]), 

    MTOUCH_Button_Initialize@button	PTR struct . size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), 

    MTOUCH_Button_SetNotPressedCallback@callback	PTR FTN(enum E13138,)void  size(3) Largest target is 1
		 -> ProcessButtonRelease(), 

    MTOUCH_Sensor_Sampled_ResetAll@sensor	PTR struct . size(1) Largest target is 50
		 -> mtouch_sensor(BANK0[50]), 

    MTOUCH_Sensor_Service@sensor	PTR struct . size(1) Largest target is 50
		 -> mtouch_sensor(BANK0[50]), 

    MTOUCH_Slider_SetPositionChangedCallback@callback	PTR FTN(enum E13201,)void  size(3) Largest target is 1
		 -> ProcessSliderChange(), 

    positional_hysteresis@slider	PTR struct . size(1) Largest target is 17
		 -> mtouch_slider(BANK0[17]), 

    S660$4$0	PTR FTN()void  size(3) Largest target is 1
		 -> TMR2_DefaultOverflowCallback(), 

    S660TMR_INTERFACE$Initialize	PTR FTN()void  size(3) Largest target is 1
		 -> TMR2_Initialize(), 

    S660TMR_INTERFACE$PeriodCountSet	PTR FTN(unsigned int ,)void  size(3) Largest target is 1
		 -> TMR2_PeriodCountSet(), 

    S660TMR_INTERFACE$Start	PTR FTN()void  size(3) Largest target is 1
		 -> TMR2_Start(), 

    S660TMR_INTERFACE$Stop	PTR FTN()void  size(3) Largest target is 1
		 -> TMR2_Stop(), 

    S660TMR_INTERFACE$Tasks	PTR FTN()void  size(3) Largest target is 1
		 -> TMR2_Tasks(), 

    S660TMR_INTERFACE$TimeoutCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(3) Largest target is 1
		 -> TMR2_OverflowCallbackRegister(), 

    Sensor_isCalibrated@sensor	PTR struct . size(1) Largest target is 50
		 -> mtouch_sensor(BANK0[50]), 

    Sensor_isCalibratingAcqTime@sensor	PTR struct . size(1) Largest target is 50
		 -> mtouch_sensor(BANK0[50]), 

    Sensor_RawSample_Update@sensor	PTR struct . size(1) Largest target is 50
		 -> mtouch_sensor(BANK0[50]), 

    Sensor_Sampled_Reset@sensor	PTR struct . size(1) Largest target is 50
		 -> mtouch_sensor(BANK0[50]), 

    Sensor_scheduleNextScan@sensor	PTR struct . size(1) Largest target is 50
		 -> mtouch_sensor(BANK0[50]), 

    Sensor_setCalibrated@sensor	PTR struct . size(1) Largest target is 50
		 -> mtouch_sensor(BANK0[50]), 

    Sensor_setSampled@sensor	PTR struct . size(1) Largest target is 50
		 -> mtouch_sensor(BANK0[50]), 

    Slider_FindLeft@slider	PTR struct . size(1) Largest target is 17
		 -> mtouch_slider(BANK0[17]), 

    Slider_FindMiddle@slider	PTR struct . size(1) Largest target is 17
		 -> mtouch_slider(BANK0[17]), 

    Slider_FindRight@slider	PTR struct . size(1) Largest target is 17
		 -> mtouch_slider(BANK0[17]), 

    Slider_Initialize@slider	PTR struct . size(1) Largest target is 17
		 -> mtouch_slider(BANK0[17]), 

    Slider_Service@slider	PTR struct . size(1) Largest target is 17
		 -> mtouch_slider(BANK0[17]), 

    sp__memcpy	PTR void  size(2) Largest target is 85
		 -> mtouch_button(BANK1[85]), mtouch_sensor(BANK0[50]), 

    Timer2$Initialize	PTR FTN()void  size(3) Largest target is 1
		 -> TMR2_Initialize(), 

    Timer2$PeriodCountSet	PTR FTN(unsigned int ,)void  size(3) Largest target is 1
		 -> TMR2_PeriodCountSet(), 

    Timer2$Start	PTR FTN()void  size(3) Largest target is 1
		 -> TMR2_Start(), 

    Timer2$Stop	PTR FTN()void  size(3) Largest target is 1
		 -> TMR2_Stop(), 

    Timer2$Tasks	PTR FTN()void  size(3) Largest target is 1
		 -> TMR2_Tasks(), 

    Timer2$TimeoutCallbackRegister	PTR FTN(PTR FTN()void ,)void  size(3) Largest target is 1
		 -> TMR2_OverflowCallbackRegister(), 

    TMR2_OverflowCallback	PTR FTN()void  size(3) Largest target is 1
		 -> TMR2_DefaultOverflowCallback(), NULL(), 

    TMR2_OverflowCallbackRegister@InterruptHandler	PTR FTN()void  size(3) Largest target is 1
		 -> TMR2_DefaultOverflowCallback(), 


Critical Paths under _main in COMRAM

    _TMR2_Initialize->_TMR2_OverflowCallbackRegister
    _INTERRUPT_Initialize->_INT0_SetInterruptHandler
    _INTERRUPT_Initialize->_INT1_SetInterruptHandler
    _INTERRUPT_Initialize->_INT2_SetInterruptHandler
    _ADCC_Initialize->_ADCC_SetADTIInterruptHandler
    _MTOUCH_Service_Mainloop->_MTOUCH_Slider_ServiceAll
    _MTOUCH_Tick->_MTOUCH_Button_Tick
    _MTOUCH_Button_Tick->_Button_Tick_helper
    _Slider_Service->_calculate_position
    _calculate_position->_calculate_raw_position
    _positional_hysteresis->_get_difference
    _moving_average_filter->_get_difference
    _calculate_raw_position->_interpolate
    _interpolate->_divide
    _calculate_contact_size->_Slider_FindMiddle
    _Slider_FindRight->_MTOUCH_Button_Deviation_Get
    _Slider_FindMiddle->_MTOUCH_Button_Deviation_Get
    _Slider_FindLeft->_MTOUCH_Button_Deviation_Get
    _ProcessSliderChange->_MTOUCH_Slider_Position_Get
    _MTOUCH_Sensor_SampleAll->_MTOUCH_Sensor_isSamplingComplete
    _MTOUCH_Sensor_postAcquisitionProcess->_Sensor_RawSample_Update
    _Sensor_RawSample_Update->_medianFilter
    _MTOUCH_Sensor_isSamplingComplete->_Sensor_scheduleNextScan
    _Sensor_scheduleNextScan->_Sensor_SetTrisBit
    _MTOUCH_Initialize->_MTOUCH_Button_InitializeAll
    _MTOUCH_Initialize->_MTOUCH_Sensor_InitializeAll
    _MTOUCH_Slider_InitializeAll->_Slider_Initialize
    _MTOUCH_Sensor_ADCC_Initialize->_ADCC_SetADTIInterruptHandler
    _MTOUCH_Sensor_Sampled_ResetAll->_Sensor_Sampled_Reset
    _MTOUCH_Sensor_InitializeAll->_memcpy
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Calibrate
    _MTOUCH_Sensor_Initialize->_MTOUCH_Sensor_Enable
    _MTOUCH_Sensor_Initialize->_Sensor_Sampled_Reset
    _MTOUCH_Button_InitializeAll->_memcpy
    _MTOUCH_Button_ServiceAll->_Button_Service
    _Button_Service->_Button_State_Pressed
    _Button_State_NotPressed->_Button_Check_AKS_Block
    _MTOUCH_Button_Initialize->_MTOUCH_Sensor_Calibrate
    _Button_Check_AKS_Block->_Button_Unscaled_Deviation_Get
    _Button_Baseline_Initialize->_MTOUCH_Sensor_RawSample_Get
    _Button_Reading_Update->_Button_Reading_Update_Helper
    _Button_Reading_Update_Helper->_MTOUCH_Sensor_RawSample_Get
    _ApplicationTask->_GetMotorSpeed
    _ApplicationTask->_PWM4_LoadDutyValue

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    _ADCC_ThresholdISR_mTouch->_MTOUCH_Sensor_Service
    _MTOUCH_Sensor_Service->i2_Sensor_scheduleNextScan
    i2_Sensor_scheduleNextScan->i2_Sensor_SetTrisBit

Critical Paths under _main in BANK0

    _MTOUCH_Slider_ServiceAll->_Slider_Service
    _Slider_Service->_calculate_position
    _calculate_position->_calculate_raw_position

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    _MTOUCH_Slider_ServiceAll->_Slider_Service

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   27940
                    _ApplicationTask
_MTOUCH_Button_SetNotPressedCallback
            _MTOUCH_Service_Mainloop
_MTOUCH_Slider_SetPositionChangedCal
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0    3534
                    _ADCC_Initialize
                   _CLOCK_Initialize
               _INTERRUPT_Initialize
                  _MTOUCH_Initialize
             _PIN_MANAGER_Initialize
                    _PWM4_Initialize
                    _TMR2_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0      98
      _TMR2_OverflowCallbackRegister
 ---------------------------------------------------------------------------------
 (3) _TMR2_OverflowCallbackRegister                        3     0      3      98
                                             20 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0     261
           _INT0_SetInterruptHandler
           _INT1_SetInterruptHandler
           _INT2_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT2_SetInterruptHandler                             3     0      3      87
                                             20 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) _INT1_SetInterruptHandler                             3     0      3      87
                                             20 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) _INT0_SetInterruptHandler                             3     0      3      87
                                             20 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) _CLOCK_Initialize                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADCC_Initialize                                      0     0      0     174
       _ADCC_SetADTIInterruptHandler
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Slider_SetPositionChangedCallback             3     0      3      98
                                             20 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Service_Mainloop                              0     0      0   23543
           _MTOUCH_Button_ServiceAll
                  _MTOUCH_Initialize
            _MTOUCH_Sensor_SampleAll
     _MTOUCH_Sensor_Sampled_ResetAll
           _MTOUCH_Slider_ServiceAll
                        _MTOUCH_Tick
                 _MTOUCH_needReburst
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_needReburst                                   1     1      0      15
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Tick                                          0     0      0     313
                 _MTOUCH_Button_Tick
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_Tick                                   1     1      0     313
                                             24 COMRAM     1     1      0
                 _Button_Tick_helper
 ---------------------------------------------------------------------------------
 (4) _Button_Tick_helper                                   4     2      2     214
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Slider_ServiceAll                             1     1      0   12262
                                             49 COMRAM     1     1      0
                     _Slider_Service
 ---------------------------------------------------------------------------------
 (3) _Slider_Service                                      13    13      0   12163
                                             16 BANK0      4     4      0
                                              0 BANK1      9     9      0
            _MTOUCH_Button_isPressed
                _ProcessSliderChange *
             _Slider_DefaultCallback *
             _calculate_contact_size
                 _calculate_position
 ---------------------------------------------------------------------------------
 (4) _calculate_position                                   8     6      2    9551
                                             47 COMRAM     2     0      2
                                             10 BANK0      6     6      0
             _calculate_raw_position
              _moving_average_filter
              _positional_hysteresis
 ---------------------------------------------------------------------------------
 (5) _positional_hysteresis                               14    11      3    1813
                                             32 COMRAM    14    11      3
                     _get_difference
 ---------------------------------------------------------------------------------
 (5) _moving_average_filter                               13    10      3    1667
                                             32 COMRAM    13    10      3
                     _get_difference
 ---------------------------------------------------------------------------------
 (6) _get_difference                                      12     7      5     893
                                             20 COMRAM    12     7      5
 ---------------------------------------------------------------------------------
 (5) _calculate_raw_position                              17    15      2    5659
                                             40 COMRAM     7     5      2
                                              0 BANK0     10    10      0
                             _divide
                        _interpolate
 ---------------------------------------------------------------------------------
 (6) _interpolate                                         13     6      7    2753
                                             27 COMRAM    13     6      7
                             _divide
 ---------------------------------------------------------------------------------
 (7) _divide                                               7     2      5    1823
                                             20 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (4) _calculate_contact_size                               6     4      2    1444
                                             32 COMRAM     6     4      2
                    _Slider_FindLeft
                  _Slider_FindMiddle
                   _Slider_FindRight
 ---------------------------------------------------------------------------------
 (5) _Slider_FindRight                                     9     7      2     310
                                             21 COMRAM     9     7      2
        _MTOUCH_Button_Deviation_Get
 ---------------------------------------------------------------------------------
 (5) _Slider_FindMiddle                                   11     9      2     508
                                             21 COMRAM    11     9      2
        _MTOUCH_Button_Deviation_Get
 ---------------------------------------------------------------------------------
 (5) _Slider_FindLeft                                      4     2      2     341
                                             21 COMRAM     4     2      2
        _MTOUCH_Button_Deviation_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Button_Deviation_Get                          1     1      0      62
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Slider_DefaultCallback                               1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _ProcessSliderChange                                  1     1      0      62
         _MTOUCH_Slider_Position_Get
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Slider_Position_Get                           3     1      2      62
                                             20 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_isPressed                              2     2      0      62
                                             20 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Sensor_SampleAll                              0     0      0    2090
   _MTOUCH_Sensor_isSamplingComplete
_MTOUCH_Sensor_postAcquisitionProces
            _Sensor_FrequencyHopping
 ---------------------------------------------------------------------------------
 (3) _Sensor_FrequencyHopping                              0     0      0       0
             _Sensor_setSamplePeriod
 ---------------------------------------------------------------------------------
 (4) _Sensor_setSamplePeriod                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_postAcquisitionProcess                 1     1      0     761
                                             30 COMRAM     1     1      0
             _Sensor_DefaultCallback
            _Sensor_RawSample_Update
 ---------------------------------------------------------------------------------
 (4) _Sensor_RawSample_Update                              3     2      1     649
                                             27 COMRAM     3     2      1
                       _medianFilter
 ---------------------------------------------------------------------------------
 (5) _medianFilter                                         7     5      2     462
                                             20 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (4) _Sensor_DefaultCallback                               1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_isSamplingComplete                     1     1      0    1329
                                             31 COMRAM     1     1      0
            _MTOUCH_Sensor_isEnabled
           _MTOUCH_Sensor_isSampling
           _MTOUCH_Sensor_wasSampled
            _Sensor_scheduleNextScan
 ---------------------------------------------------------------------------------
 (4) _Sensor_scheduleNextScan                              7     7      0    1075
                                             24 COMRAM     7     7      0
            _MTOUCH_Sensor_isEnabled
           _MTOUCH_Sensor_wasSampled
                  _Sensor_SetTrisBit
                _Sensor_isCalibrated
        _Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibratingAcqTime                          1     0      1     161
                                             20 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (5) _Sensor_isCalibrated                                  1     0      1     148
                                             20 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (5) _Sensor_SetTrisBit                                    4     3      1     258
                                             20 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isSampling                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Initialize                                    0     0      0    3001
        _MTOUCH_Button_InitializeAll
        _MTOUCH_Sensor_InitializeAll
     _MTOUCH_Sensor_Sampled_ResetAll
      _MTOUCH_Sensor_Scan_Initialize
        _MTOUCH_Slider_InitializeAll
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Slider_InitializeAll                          1     1      0     267
                                             22 COMRAM     1     1      0
                  _Slider_Initialize
 ---------------------------------------------------------------------------------
 (4) _Slider_Initialize                                    2     2      0     199
                                             20 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Scan_Initialize                        0     0      0     174
      _MTOUCH_Sensor_ADCC_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_ADCC_Initialize                        0     0      0     174
       _ADCC_SetADTIInterruptHandler
 ---------------------------------------------------------------------------------
 (5) _ADCC_SetADTIInterruptHandler                         3     0      3     174
                                             20 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_Sampled_ResetAll                       2     2      0     242
                                             21 COMRAM     2     2      0
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Sensor_InitializeAll                          1     1      0    1220
                                             29 COMRAM     1     1      0
           _MTOUCH_Sensor_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_Initialize                             1     1      0     373
                                             21 COMRAM     1     1      0
            _MTOUCH_Sensor_Calibrate
               _MTOUCH_Sensor_Enable
               _Sensor_Sampled_Reset
 ---------------------------------------------------------------------------------
 (4) _Sensor_Sampled_Reset                                 1     0      1     174
                                             20 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Enable                                 1     1      0      44
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _MTOUCH_Button_InitializeAll                          1     1      0    1098
                                             29 COMRAM     1     1      0
           _MTOUCH_Button_Initialize
                             _memcpy
 ---------------------------------------------------------------------------------
 (4) _memcpy                                               9     4      5     748
                                             20 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (2) _MTOUCH_Button_ServiceAll                             1     1      0    5620
                                              0 BANK0      1     1      0
                     _Button_Service
 ---------------------------------------------------------------------------------
 (3) _Button_Service                                       4     4      0    5521
                                             46 COMRAM     4     4      0
            _Button_Deviation_Update
              _Button_Reading_Update
          _Button_State_Initializing *
            _Button_State_NotPressed *
               _Button_State_Pressed *
           _MTOUCH_Button_Initialize
         _MTOUCH_Sensor_isCalibrated
           _MTOUCH_Sensor_wasSampled
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_wasSampled                             1     1      0      62
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Sensor_isCalibrated                           1     1      0      62
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _Button_State_Pressed                                 7     5      2     657
                                             39 COMRAM     7     5      2
             _Button_DefaultCallback *
           _MTOUCH_Button_Initialize
               _ProcessButtonRelease *
 ---------------------------------------------------------------------------------
 (5) _ProcessButtonRelease                                 3     3      0      31
                                             20 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (4) _Button_State_NotPressed                              5     3      2    2325
                                             39 COMRAM     5     3      2
             _Button_Baseline_Update
             _Button_Check_AKS_Block
             _Button_DefaultCallback
           _MTOUCH_Button_Initialize
 ---------------------------------------------------------------------------------
 (4) _MTOUCH_Button_Initialize                             3     3      0     251
                                             21 COMRAM     3     3      0
            _MTOUCH_Sensor_Calibrate
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_Calibrate                              1     1      0      62
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _Button_DefaultCallback                               1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _Button_Check_AKS_Block                              11     9      2     995
                                             28 COMRAM    11     9      2
      _Button_Unscaled_Deviation_Get
            _MTOUCH_Sensor_isEnabled
 ---------------------------------------------------------------------------------
 (5) _MTOUCH_Sensor_isEnabled                              1     1      0      62
                                             20 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _Button_Unscaled_Deviation_Get                        8     6      2     242
                                             20 COMRAM     8     6      2
 ---------------------------------------------------------------------------------
 (4) _Button_State_Initializing                            6     4      2     952
                                             39 COMRAM     6     4      2
         _Button_Baseline_Initialize
             _Button_Baseline_Update
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Update                               6     4      2     428
                                             20 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _Button_Baseline_Initialize                           6     4      2     245
                                             23 COMRAM     6     4      2
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (4) _Button_Reading_Update                                2     0      2     611
                                             27 COMRAM     2     0      2
       _Button_Reading_Update_Helper
 ---------------------------------------------------------------------------------
 (5) _Button_Reading_Update_Helper                         4     2      2     459
                                             23 COMRAM     4     2      2
        _MTOUCH_Sensor_RawSample_Get
 ---------------------------------------------------------------------------------
 (6) _MTOUCH_Sensor_RawSample_Get                          3     1      2      62
                                             20 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (4) _Button_Deviation_Update                             16    14      2     319
                                             20 COMRAM    16    14      2
 ---------------------------------------------------------------------------------
 (1) _MTOUCH_Button_SetNotPressedCallback                  3     0      3      98
                                             20 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (1) _ApplicationTask                                      4     4      0     667
                                             24 COMRAM     4     4      0
                        _ClearButton
                         _ClearEvent
                          _GetButton
                           _GetEvent
                      _GetMotorSpeed
                 _PWM4_LoadDutyValue
 ---------------------------------------------------------------------------------
 (2) _PWM4_LoadDutyValue                                   4     2      2     272
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _GetMotorSpeed                                        4     2      2     371
                                             20 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _GetEvent                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _GetButton                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ClearEvent                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ClearButton                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _INTERRUPT_InterruptManager                           6     6      0    1536
                                             14 COMRAM     6     6      0
                  _ADCC_ThresholdISR
                    _PIN_MANAGER_IOC
 ---------------------------------------------------------------------------------
 (9) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _ADCC_ThresholdISR                                    0     0      0    1536
                                NULL *
               _ADCC_DefaultADTI_ISR *
           _ADCC_ThresholdISR_mTouch *
 ---------------------------------------------------------------------------------
 (10) _ADCC_ThresholdISR_mTouch                            0     0      0    1536
              _MTOUCH_Sensor_Service
 ---------------------------------------------------------------------------------
 (11) _MTOUCH_Sensor_Service                               3     3      0    1536
                                             11 COMRAM     3     3      0
               _Sensor_setCalibrated
                  _Sensor_setSampled
                                _abs
                i2_Sensor_SetTrisBit
              i2_Sensor_isCalibrated
          i2_Sensor_scheduleNextScan
 ---------------------------------------------------------------------------------
 (12) i2_Sensor_scheduleNextScan                           7     7      0     662
                                              4 COMRAM     7     7      0
          i2_MTOUCH_Sensor_isEnabled
         i2_MTOUCH_Sensor_wasSampled
                i2_Sensor_SetTrisBit
              i2_Sensor_isCalibrated
      i2_Sensor_isCalibratingAcqTime
 ---------------------------------------------------------------------------------
 (13) i2_Sensor_isCalibratingAcqTime                       1     0      1      48
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (13) i2_Sensor_isCalibrated                               1     0      1      74
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (13) i2_Sensor_SetTrisBit                                 4     3      1     184
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (13) i2_MTOUCH_Sensor_wasSampled                          1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (13) i2_MTOUCH_Sensor_isEnabled                           1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (12) _abs                                                 4     2      2     205
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (12) _Sensor_setSampled                                   1     0      1      98
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (12) _Sensor_setCalibrated                                1     0      1     246
                                              0 COMRAM     1     0      1
 ---------------------------------------------------------------------------------
 (10) _ADCC_DefaultADTI_ISR                                0     0      0       0
 ---------------------------------------------------------------------------------
 (10) NULL(Fake)                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ApplicationTask
     _ClearButton
     _ClearEvent
     _GetButton
     _GetEvent
     _GetMotorSpeed
     _PWM4_LoadDutyValue
   _MTOUCH_Button_SetNotPressedCallback
   _MTOUCH_Service_Mainloop
     _MTOUCH_Button_ServiceAll
       _Button_Service
         _Button_Deviation_Update
         _Button_Reading_Update
           _Button_Reading_Update_Helper
             _MTOUCH_Sensor_RawSample_Get
         _Button_State_Initializing *
           _Button_Baseline_Initialize
             _MTOUCH_Sensor_RawSample_Get
           _Button_Baseline_Update
         _Button_State_NotPressed *
           _Button_Baseline_Update
           _Button_Check_AKS_Block
             _Button_Unscaled_Deviation_Get
             _MTOUCH_Sensor_isEnabled
           _Button_DefaultCallback
           _MTOUCH_Button_Initialize
             _MTOUCH_Sensor_Calibrate
         _Button_State_Pressed *
           _Button_DefaultCallback *
           _MTOUCH_Button_Initialize *
           _ProcessButtonRelease *
         _MTOUCH_Button_Initialize *
         _MTOUCH_Sensor_isCalibrated *
         _MTOUCH_Sensor_wasSampled *
     _MTOUCH_Initialize
       _MTOUCH_Button_InitializeAll
         _MTOUCH_Button_Initialize
         _memcpy
       _MTOUCH_Sensor_InitializeAll
         _MTOUCH_Sensor_Initialize
           _MTOUCH_Sensor_Calibrate
           _MTOUCH_Sensor_Enable
           _Sensor_Sampled_Reset
         _memcpy
       _MTOUCH_Sensor_Sampled_ResetAll
         _Sensor_Sampled_Reset
       _MTOUCH_Sensor_Scan_Initialize
         _MTOUCH_Sensor_ADCC_Initialize
           _ADCC_SetADTIInterruptHandler
       _MTOUCH_Slider_InitializeAll
         _Slider_Initialize
     _MTOUCH_Sensor_SampleAll
       _MTOUCH_Sensor_isSamplingComplete
         _MTOUCH_Sensor_isEnabled
         _MTOUCH_Sensor_isSampling
         _MTOUCH_Sensor_wasSampled
         _Sensor_scheduleNextScan
           _MTOUCH_Sensor_isEnabled
           _MTOUCH_Sensor_wasSampled
           _Sensor_SetTrisBit
           _Sensor_isCalibrated
           _Sensor_isCalibratingAcqTime
       _MTOUCH_Sensor_postAcquisitionProcess
         _Sensor_DefaultCallback
         _Sensor_RawSample_Update
           _medianFilter
       _Sensor_FrequencyHopping
         _Sensor_setSamplePeriod
     _MTOUCH_Sensor_Sampled_ResetAll
     _MTOUCH_Slider_ServiceAll
       _Slider_Service
         _MTOUCH_Button_isPressed
         _ProcessSliderChange *
           _MTOUCH_Slider_Position_Get
         _Slider_DefaultCallback *
         _calculate_contact_size *
           _Slider_FindLeft
             _MTOUCH_Button_Deviation_Get
           _Slider_FindMiddle
             _MTOUCH_Button_Deviation_Get
           _Slider_FindRight
             _MTOUCH_Button_Deviation_Get
         _calculate_position *
           _calculate_raw_position
             _divide
             _interpolate
               _divide
           _moving_average_filter
             _get_difference
           _positional_hysteresis
             _get_difference
     _MTOUCH_Tick
       _MTOUCH_Button_Tick
         _Button_Tick_helper
     _MTOUCH_needReburst
   _MTOUCH_Slider_SetPositionChangedCallback
   _SYSTEM_Initialize
     _ADCC_Initialize
       _ADCC_SetADTIInterruptHandler
     _CLOCK_Initialize
     _INTERRUPT_Initialize
       _INT0_SetInterruptHandler
       _INT1_SetInterruptHandler
       _INT2_SetInterruptHandler
     _MTOUCH_Initialize
     _PIN_MANAGER_Initialize
     _PWM4_Initialize
     _TMR2_Initialize
       _TMR2_OverflowCallbackRegister

 _INTERRUPT_InterruptManager (ROOT)
   _ADCC_ThresholdISR
     NULL(Fake) *
     _ADCC_DefaultADTI_ISR *
     _ADCC_ThresholdISR_mTouch *
       _MTOUCH_Sensor_Service
         _Sensor_setCalibrated
         _Sensor_setSampled
         _abs
         i2_Sensor_SetTrisBit
         i2_Sensor_isCalibrated
         i2_Sensor_scheduleNextScan
           i2_MTOUCH_Sensor_isEnabled
           i2_MTOUCH_Sensor_wasSampled
           i2_Sensor_SetTrisBit
           i2_Sensor_isCalibrated
           i2_Sensor_isCalibratingAcqTime
   _PIN_MANAGER_IOC

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             CFF      0       0      50        0.0%
EEDATA             400      0       0       0        0.0%
BITBIGSFR          100      0       0      49        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      9      5E       7       36.7%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     14      A0       5      100.0%
BITBIGSFR_1llll     9E      0       0      46        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     32      4A       1       78.7%
BITBIGSFR_1hhhh     32      0       0      33        0.0%
BITBIGSFR_1llll     27      0       0      38        0.0%
BITBIGSFR_1llll     1F      0       0      39        0.0%
BITBANK14           1F      0       0      30        0.0%
BANK14              1F      0       0      31        0.0%
BIGRAM_1            1F      0       0      48        0.0%
BITBIGSFR_1hhhl     13      0       0      36        0.0%
BITBIGSFR_1hhhl     13      0       0      37        0.0%
BITBIGSFR_1hhhh      D      0       0      32        0.0%
BITBIGSFR_1hhhh      C      0       0      34        0.0%
BITBIGSFR_1llll      B      0       0      40        0.0%
BITBIGSFR_1hhhl      B      0       0      35        0.0%
BITBIGSFR_1llll      9      0       0      43        0.0%
BITBIGSFR_1llll      6      0       0      45        0.0%
BITBIGSFR_1llll      2      0       0      44        0.0%
BITBIGSFR_1llll      1      0       0      41        0.0%
BITBIGSFR_1llll      1      0       0      42        0.0%
BIGSFR_1             0      0       0     200        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     148      47        0.0%
DATA                 0      0     148       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Tue May 21 14:27:30 2024

                      calculate_raw_position@ref_node 00E6                          ?_MTOUCH_Sensor_RawSample_Get 0015  
                      ?_TMR2_OverflowCallbackRegister 0015                        MTOUCH_Slider_ServiceAll@slider 0032  
                                    _Slider_FindRight 2436                                   _ProcessSliderChange 2B8C  
                                   _Slider_FindMiddle 21DC                positional_hysteresis@filtered_position 0029  
                      calculate_raw_position@position 00EE                                                   l636 14F8  
                                                 l902 242C                                                   l824 21D2  
                                                 l808 21C6                                                   l870 20CA  
                                                 l848 1CE4                                                   l849 1CEE  
                                                 l962 2AA8                                                   l866 20AE  
                                                 l875 247E                                                   l878 249A  
                                                 _GIE 7F97                                                   _PR2 0FBB  
                          ??_INT0_SetInterruptHandler 0018                                    ?_Slider_FindMiddle 0016  
                                                 _abs 29AE                                       _TMR2_Initialize 2A6A  
                                     _PWM4_Initialize 2C60                                                   prod 0FF3  
                                                 tosl 0FFD                                                   wreg 0FE8  
                    ??_MTOUCH_Sensor_Sampled_ResetAll 0016                       ?_MTOUCH_Sensor_Sampled_ResetAll 0001  
                                        divide@result 001A                             ?_MTOUCH_Sensor_Initialize 0001  
                                                PL111 1FDE                                                  PL201 1318  
                                                PL121 1C34                                                  PL113 1ADA  
                                                PL211 1942                                                  PL203 1938  
                                                PL131 112C                                                  PL123 19F6  
                                                PL115 224A                                                  PL221 2B4A  
                                                PL213 1680                                                  PL205 1432  
                                                PL141 1C60                                                  PL133 1FB2  
                                                PL125 204E                                                  PL117 154C  
                                                PL231 1D30                                                  PL223 115E  
                                                PL215 1446                                                  PL207 143C  
                                                PL151 1D18                                                  PL143 22C4  
                                                PL135 22B6                                                  PL127 1C48  
                                                PL119 1674                                                  PL241 2504  
                                                PL233 177A                                                  PL225 1168  
                                                PL217 1154                                                  PL209 24F2  
                                                PL161 2828                                                  PL153 1A00  
                                                PL145 24E8                                                  PL137 1416  
                                                PL129 1C52                                                  PL235 1C78  
                                                PL227 1F24                                                  PL219 156E  
                                                PL171 1E82                                                  PL163 1304  
                                                PL155 1764                                                  PL147 1F0E  
                                                PL139 12F8                                                  PL237 2704  
                                                PL229 24FA                                                  PL181 155E  
                                                PL173 1AE8                                                  PL165 26B6  
                                                PL157 27F6                                                  PL149 1FC0  
                                                PL239 1450                                                  PL191 2616  
                                                PL183 1BB4                                                  PL175 1556  
                                                PL167 1420                                                  PL159 1DC8  
                                                PL193 2782                                                  PL185 130E  
                                                PL177 1A18                                                  PL169 1F18  
                                                PL195 114A                                                  PL187 1C6E  
                                                PL179 1DDC                                                  PL197 1770  
                                                PL189 20D4                                                  PL199 233E  
                              ?_positional_hysteresis 0021                                   ??_Slider_FindMiddle 0018  
                              _calculate_contact_size 23C0                                                  l1130 251A  
                                                l1131 2526                                                  ?_abs 0001  
                                                l1132 2532                                                  l1133 253E  
                                                l1303 0016                                                  l1224 2A40  
                                                l1128 250E                                                  l1312 0016  
                                                l1420 17CE                                                  l1325 000C  
                                                l1423 17FA                                  ?_ProcessSliderChange 0001  
                                                l1505 1698                                                  l1417 17D2  
                                                l1506 175A                                                  l5020 16E2  
                                                l5014 16BC                                                  l5110 17AA  
                                                l4230 254A                                                  l5032 1720  
                                                l5008 169E                                                  l4224 0000  
                                                l5026 1704                                                  l5122 17D6  
                                                l5114 17B4                                                  l5106 17A2  
                                                l4242 0000                                                  l4252 1BF4  
                                                l6012 1236                                                  l6004 1214  
                                                l5038 1742                                                  l5118 17C0  
                                                l4238 0000                                                  l4270 1C1E  
                                                l4262 1C0C                                                  l6006 121E  
                                                l6110 2CBC                                                  l6040 12EA  
                                                l6024 128E                                                  l5146 1800  
                                                l6050 2930                                                  l4274 1C22  
                                                l6026 1296                                                  l6062 2952  
                                                l4614 2824                                                  l4622 2BB0  
                                                l5342 2182                                                  l5334 216C  
                                                l5422 23B6                                                  l6134 28AA  
                                                l5168 1820                                                  l5512 18E2  
                                                l5360 21BC                                                  l5432 1D90  
                                                l6144 28B8                                                  l5098 1786  
                                                l5178 184E                                                  l5522 1922  
                                                l4730 29EC                                                  l5602 221A  
                                                l5346 218E                                                  l5338 2178  
                                                l5418 2398                                                  l4716 2CCC  
                                                l6084 2BDE                                                  l5620 20B4  
                                                l5604 221C                                                  l5364 21CA  
                                                l5348 2194                                                  l5436 1DBE  
                                                l6172 2864                                                  l5534 22A0  
                                                l5702 28D4                                                  l4726 29DC  
                                                l5622 20C2                                                  l5358 21B6  
                                                l5704 28E0                                                  l5632 2484  
                                                l5802 14D6                                                  l6098 2BC2  
                                                l5730 271C                                                  l5634 2492  
                                                l5554 19BC                                                  l5484 1FD8  
                                                l5708 28EA                                                  l5652 0FCC  
                                                l5564 19DE                                                  l5556 19C6  
                                                l5548 19A4                                                  l5814 151A  
                                                l5806 14EE                                                  l5662 1034  
                                                l5646 0FAA                                                  l5566 19EC  
                                                l5760 2B44                                                  l5496 18A8  
                                                l4864 297C                                                  l5680 1096  
                                                l5664 104C                                                  l5648 0FB2  
                                                l5826 1EAA                                                  l5738 2740  
                                                l4858 295E                                                  l5690 10E2  
                                                l5578 1CC8                                                  l5772 1BA8  
                                                l5780 1F56                                                  l5596 21EE  
                                                l5844 240C                                                  l5676 1088  
                                                l5668 105C                                                  l5588 1D0E  
                                                l5934 2A12                                                  l5686 10AC  
                                                l5768 1B88                                                  l5880 1596  
                                                l5696 1122                                                  l5688 10B8  
                                                l5856 22F8                                                  l5960 2B16  
                                                l5778 1F4A                                                  l5794 14A0  
                                                l5874 1584                                                  l5858 2310  
                                                l5980 1E56                                                  l5948 299E  
                                                l5892 15E2                                                  l5896 160C  
                                                l5898 1612                         ?_Button_Reading_Update_Helper 0018  
                                                _LATA 0F82                                                  _LATB 0F83  
                                                _LATC 0F84                                                  _LATD 0F85  
                                                _LATE 0F86                                                  u4010 170E  
                                                u4030 172A                                                  u5000 1B18  
                                                u4050 174C                                                  u5010 1B68  
                                                _T2PR 0FBB                                                  u5020 1B7E  
                                                u5005 1B0E                                                  u5015 1B5E  
                                                u5050 1F6C                                                  u4500 1FFE  
                                                u5060 1F90                                                  u4350 26E4  
                                                u2910 1C08                                                  u5080 1492  
                                                u2920 1C14                                                  u4505 1FF4  
                                                u5065 1F86                                                  u2825 2516  
                                                u5305 1654                                                  u2826 2518  
                                                u5410 11A4                                                  u4355 26DA  
                                                u2835 2522                                                  u5315 166E  
                                                u2836 2524                                                  u5316 1670  
                                                u5260 15AA                                                  u4444 1D6E  
                                                u4525 18A6                                                  u2845 252E  
                                                u4445 1D68                                                  u2846 2530  
                                                u2870 0014                                                  u2855 253A  
                                                u2871 0010                                                  u2856 253C  
                                                u2880 0014                                                  u5424 11CA  
                                                u3905 2892                                                  u2865 2546  
                                                u2881 0010                                                  u5425 11C4  
                                                u4570 190E                                                  u2866 2548  
                                                u2876 0016                                                  u4804 0FC6  
                                                u5508 12CA                                                  u5460 126A  
                                                u4485 2602                                                  u4805 0FC4  
                                                u5509 12E4                                                  u3950 16A8  
                                                u4590 1936                                                  u2886 0016  
                                                u4814 0FE4                                                  u4670 1CBE  
                                                u4815 0FE2                                                  u4904 1140  
                                                u4905 113A                                                  u3970 16C6  
                                                u5490 12B8                                                  u4595 1934  
                                                u3990 16EC                                                  u4894 10FA  
                                                u4895 10F4                            Button_State_Pressed@button 0028  
                                                _WPUA 0F0B                                                  _WPUB 0F13  
                                                _WPUC 0F1B                                                  _WPUD 0F20  
                                                _WPUE 0F28                                   _sensor_medianBuffer 0060  
                                  _MTOUCH_needReburst 2D3A                                                  abs@a 0001  
                                                _main 283C                                                  fsr1h 0FE2  
                                                fsr2h 0FDA                                                  indf1 0FE7  
                                                indf2 0FDF                                                  fsr1l 0FE1  
                                                fsr2l 0FD9                                                  btemp 004B  
                      get_difference@current_position 0018                           moving_average_filter@slider 0021  
                                          _ClearEvent 2D2C                             ?_INT2_SetInterruptHandler 0015  
                                                prodh 0FF4                                                  prodl 0FF3  
                                                start 0058                             ??_Sensor_FrequencyHopping 0015  
                                 ?_MTOUCH_needReburst 0001                  MTOUCH_Slider_Position_Get@sliderName 0017  
                                        ___param_bank 0000                                         ?_medianFilter 0015  
                    __end_of_MTOUCH_Slider_ServiceAll 2CCA                                  get_difference@slider 0015  
                            ?_MTOUCH_Service_Mainloop 0001                               ?_Button_Check_AKS_Block 001D  
                                               ??_abs 0003                             __end_of_Slider_FindMiddle 224A  
              MTOUCH_Sensor_isSamplingComplete@sensor 0020                           ?_Button_Baseline_Initialize 0018  
                       ??_MTOUCH_Sensor_RawSample_Get 0017                         Sensor_RawSample_Update@sensor 001C  
                       Sensor_RawSample_Update@result 001D                               __end_of_ApplicationTask 1870  
                                   _Slider_Initialize 24A4                   __end_of_Sensor_isCalibratingAcqTime 0000  
                      ?i2_Sensor_isCalibratingAcqTime 0001                           _Sensor_isCalibratingAcqTime 0000  
                                               _ADACC 0F6B                                                 _ADACQ 0F57  
                                               _ADCAP 0F58                                                 _ADACT 0F51  
                                               ?_main 0001                                                 _ADCLK 0F52  
                                               _ADCNT 0F62                                                 _ADPCH 0F5A  
                                               _ADREF 0F53                                                 _ADPRE 0F59  
                                               _ADRPT 0F61                                                 _T2CON 0FBC  
                                               _IOCAF 0F05                                                 _T2HLT 0FBD  
                                               _IOCBF 0F0D                                                 _IOCCF 0F15  
                                               _IOCAN 0F06                                                 _IOCEF 0F22  
                                               _IOCAP 0F07                                                 _IOCBN 0F0E  
                                               _IOCBP 0F0F                                                 _IOCCN 0F16  
                                               _IOCCP 0F17                                                 _IOCEN 0F23  
                                               _IOCEP 0F24                            _ADCC_ADTI_InterruptHandler 00FD  
                                               _T2TMR 0FBA                                                 _T2RST 0FBF  
                                               i2l252 003C                                                 i2l247 0030  
                                               _OSCEN 0ED7                                    _PWM4_LoadDutyValue 286E  
                                  ?_Slider_Initialize 0001                                                 _TRISA 0F87  
                                               _TRISB 0F88                                                 _TRISC 0F89  
                                               _TRISD 0F8A                                                 _TRISE 0F8B  
                   MTOUCH_Slider_InitializeAll@slider 0017                                   i2_Sensor_SetTrisBit 256C  
                                ??_MTOUCH_needReburst 0015                               __end_of_PIN_MANAGER_IOC 2D44  
               __end_of_MTOUCH_Sensor_Scan_Initialize 2D28                         _MTOUCH_Sensor_Scan_Initialize 2D24  
                             Sensor_setSampled@sensor 0001                                 ??_ProcessSliderChange 0018  
                     __end_of_Sensor_scheduleNextScan 1674                                   ?_PWM4_LoadDutyValue 0015  
                                 ??_Slider_Initialize 0015                                                 _state 0035  
                            _INT1_SetInterruptHandler 2D36                              ??_calculate_raw_position 002B  
                                               pclath 0FFA                                                 pclatu 0FFB  
                                         _ClearButton 2D30                                                 tablat 0FF5  
                              ??_ADCC_DefaultADTI_ISR 0001                                  _Sensor_Sampled_Reset 0000  
                                               plusw2 0FDB                moving_average_filter@filtered_position 0026  
                                               ttemp5 004C                                                 ttemp6 004F  
                                               ttemp7 0053                    __end_of_MTOUCH_Slider_Position_Get 2AAE  
                          _MTOUCH_Slider_Position_Get 2A8C                                                 status 0FD8  
                                               wtemp8 004C                                          __end_ofPL111 204E  
                                        __end_ofPL201 1322                                          __end_ofPL121 1C48  
                                        __end_ofPL113 1AE8                                          __end_ofPL211 194E  
                                        __end_ofPL203 1942                                          __end_ofPL131 114A  
                                        __end_ofPL123 1A00                                          __end_ofPL115 2256  
                                        __end_ofPL221 2B54                                          __end_ofPL213 168A  
                                        __end_ofPL205 143C                                          __end_ofPL141 1C6E  
                                        __end_ofPL133 1FC0                                          __end_ofPL125 205A  
                                        __end_ofPL117 1556                                          __end_ofPL231 1D3A  
                                        __end_ofPL223 1168                                          __end_ofPL215 1450  
                                        __end_ofPL207 1446                                          __end_ofPL151 1D30  
                                        __end_ofPL143 22D0                                          __end_ofPL135 22C4  
                                        __end_ofPL127 1C52                                          __end_ofPL119 1680  
                                        __end_ofPL241 250A                                          __end_ofPL233 1784  
                                        __end_ofPL225 1170                                          __end_ofPL217 115E  
                                        __end_ofPL209 24FA                                          __end_ofPL161 283C  
                                        __end_ofPL153 1A18                                          __end_ofPL145 24F2  
                                        __end_ofPL137 1420                                          __end_ofPL129 1C60  
                                        __end_ofPL235 1C82                                          __end_ofPL227 1F2E  
                                        __end_ofPL219 1578                                          __end_ofPL171 1E8E  
                                        __end_ofPL163 130E                                          __end_ofPL155 1770  
                                        __end_ofPL147 1F18                                          __end_ofPL139 1304  
                                        __end_ofPL237 270E                                          __end_ofPL229 2504  
                                        __end_ofPL181 156E                                          __end_ofPL173 1AF4  
                                        __end_ofPL165 26C0                                          __end_ofPL157 2804  
                                        __end_ofPL149 1FCA                                          __end_ofPL239 1458  
                                        __end_ofPL191 2624                                          __end_ofPL183 1BBE  
                                        __end_ofPL175 155E                                          __end_ofPL167 1432  
                                        __end_ofPL159 1DDC                                          __end_ofPL193 2790  
                                        __end_ofPL185 1318                                          __end_ofPL177 1A24  
                                        __end_ofPL169 1F24                                          __end_ofPL195 1154  
                                        __end_ofPL187 1C78                                          __end_ofPL179 1DEC  
                                        __end_ofPL197 177A                                          __end_ofPL189 20DE  
                                        __end_ofPL199 2348                                        divide@exponent 0019  
                              ?i2_Sensor_isCalibrated 0001                                  ?i2_Sensor_SetTrisBit 0001  
                                    __end_of_GetEvent 2D18                                          ?_interpolate 001C  
                                      ??_medianFilter 0017                                       __initialization 2624  
                              _Sensor_setSamplePeriod 2BA6                        __end_of_Button_Check_AKS_Block 1938  
                                        __end_of_main 286E                                  _Sensor_setCalibrated 2CA8  
                                ??_PWM4_LoadDutyValue 0017                             __end_of_Slider_Initialize 24E8  
                             __end_of_PWM4_Initialize 2C72                               __end_of_TMR2_Initialize 2A8C  
                         ?_INTERRUPT_InterruptManager 0001                      __end_of_MTOUCH_Button_Initialize 26B6  
                                              ??_main 0033                                      ??_get_difference 001A  
                                       __activetblptr 0003                               _MTOUCH_Sensor_Calibrate 2C96  
                             ??_Button_Reading_Update 001E                      __end_of_ADCC_ThresholdISR_mTouch 1ADA  
                MTOUCH_Sensor_Sampled_ResetAll@sensor 0017                              ?_Button_Deviation_Update 0015  
                                        ?_MTOUCH_Tick 0001                          Button_Baseline_Update@button 0015  
                                              _ADACCH 0F6C                                                _ADACCL 0F6B  
                                              _ADCON0 0F5B                                                _ADCON1 0F54  
                                              _ADCON2 0F55                                                _ADCON3 0F56  
                                              _ADFLTR 0F6D                                                _ADERRH 0F6A  
                                              _ADERRL 0F69                                                _ADLTHH 0F66  
                                              _ADLTHL 0F65                                                _ADRESH 0F5F  
                                              _ADRESL 0F5E                                                _ADSTAT 0F60  
                                              _ADUTHH 0F68                                                _ADUTHL 0F67  
                                   interpolate@delta1 001C                                     interpolate@delta2 001E  
                                   interpolate@delta3 0020                                                _ANSELA 0F0C  
                                              _ANSELB 0F14                                                _ANSELC 0F1C  
                                              _ANSELD 0F21                                                _ANSELE 0F29  
                                              _RA3PPS 0EE5                           positional_hysteresis@slider 0021  
                               __end_of_GetMotorSpeed 1764                                                _ODCONA 0F0A  
                                              _ODCONB 0F12                                                _ODCONC 0F1A  
                                              _ODCOND 0F1F                                                _ODCONE 0F27  
                                              i2l1130 257C                                                i2l1131 2588  
                                              i2l1132 2594                                                i2l1133 25A0  
                                              i2l1303 0016                                                i2l1128 2570  
                                              i2l1312 0016                                                i2l1208 001A  
                                              i2l1217 00D2                                                i2l1328 000C  
                                              i2l2269 29BC                                                i2l4312 25AC  
                                              i2l4332 0000                                                i2l4336 0000  
                                              i2l4616 0000                                                i2l4632 132E  
                                              _INLVLA 0F08                                                i2l4650 138C  
                                              _INLVLB 0F10                                 ?_Sensor_Sampled_Reset 0015  
                                              _INLVLC 0F18                                                _INLVLD 0F1D  
                                              _INLVLE 0F25                                                i2l4654 13B8  
                                              i2l4638 1340                                                i2l4656 13BC  
                                              i2l4870 000A                                                i2l4880 0044  
                                              i2l4872 0014                                                i2l4890 00AC  
                                              i2l4882 004C                                                i2l4874 001E  
                                              i2l4884 0080                                                i2l4876 0028  
                                              i2l4892 00C0                                                i2l4868 0000  
                                              i2l4894 00CA                                                i2l4886 0092  
                                              i2l4878 003A                                                i2l4896 00CE  
                                              i2l4888 00A2                             ProcessSliderChange@slider 0001  
                 __end_of_MTOUCH_Slider_InitializeAll 2CDA                           _MTOUCH_Slider_InitializeAll 2CCA  
                                              _OSCFRQ 0ED9                                     interpolate@rtnval 0027  
                   MTOUCH_Button_InitializeAll@button 001E                                           ?_ClearEvent 0001  
                      ??_Button_Reading_Update_Helper 001A                                 ??i2_Sensor_SetTrisBit 0002  
                              _Button_DefaultCallback 2D40                       __end_of_MTOUCH_Service_Mainloop 28D0  
                                 _Sensor_isCalibrated 0000                           MTOUCH_Sensor_Service@sensor 000E  
                              _Sensor_DefaultCallback 2D3E                                         _packet_sample 007E  
                               ?_Sensor_setCalibrated 0001                                     _ADCC_ThresholdISR 2AF2  
                        _TMR2_DefaultOverflowCallback 0000                          Sensor_DefaultCallback@sensor 0001  
                       __end_of_moving_average_filter 1D18                                                _divide 215E  
                                              _memcpy 270E                                    ?_ADCC_ThresholdISR 0001  
                                              clear_0 264A                                                clear_1 2656  
                                              clear_2 2662                      __end_of_MTOUCH_Button_ServiceAll 2BD4  
                                              isa$std 0001                                      ?_ApplicationTask 0001  
                            _MTOUCH_Slider_ServiceAll 2CBA                         __end_of_MTOUCH_Sensor_Service 0000  
                                   ?_CLOCK_Initialize 0001                        i2Sensor_scheduleNextScan@state 0009  
                                     _ADCC_Initialize 2790                          _INT2_DefaultInterruptHandler 0000  
                                       _middle_signal 0037                               _MTOUCH_Sensor_SampleAll 2BD4  
                                  ??_CLOCK_Initialize 0015                          Button_DefaultCallback@button 0001  
                                 ??_ADCC_ThresholdISR 000F                                          __mediumconst 0000  
                                ?_Sensor_isCalibrated 0015                                                tblptrh 0FF7  
                                              tblptrl 0FF6                                                tblptru 0FF8  
                            ?_Sensor_RawSample_Update 001C                               ?_Button_Baseline_Update 0015  
            INT2_SetInterruptHandler@InterruptHandler 0015              INT1_SetInterruptHandler@InterruptHandler 0015  
            INT0_SetInterruptHandler@InterruptHandler 0015          ADCC_SetADTIInterruptHandler@InterruptHandler 0015  
                                    ?_PIN_MANAGER_IOC 0001                    calculate_contact_size@contact_size 0025  
                     MTOUCH_Sensor_RawSample_Get@name 0017                              __end_of_Slider_FindRight 24A4  
                                   _SYSTEM_Initialize 2B54                                            __accesstop 0060  
                             __end_of__initialization 2668                        ?_MTOUCH_Sensor_Scan_Initialize 0001  
                                  ?_SYSTEM_Initialize 0001                                   _Button_StateMachine 00C3  
                                   __end_of_GetButton 2D2C                                         ___rparam_used 0001  
                          __end_of_Button_Tick_helper 27F6                                     ??_Slider_FindLeft 0018  
                       Slider_FindMiddle@channelDelta 001C              calculate_raw_position@interpolation_bits 00EC  
                       MTOUCH_Sensor_Calibrate@sensor 0015                             __end_of_ADCC_ThresholdISR 2B14  
                           ?_MTOUCH_Sensor_isSampling 0001                                        __pcstackCOMRAM 0001  
                                      _Slider_Service 1170                               _MTOUCH_Button_isPressed 2AAE  
                                        __pidataBANK0 2A46           __end_of_MTOUCH_Button_SetNotPressedCallback 2D12  
               ??_MTOUCH_Button_SetNotPressedCallback 0018                  ?_MTOUCH_Button_SetNotPressedCallback 0015  
                 _MTOUCH_Button_SetNotPressedCallback 2D04                                       divide@numerator 0015  
                                 ??_SYSTEM_Initialize 001F                        ?_Button_Unscaled_Deviation_Get 0015  
                          __end_of_MTOUCH_Button_Tick 2B34                      __end_of_MTOUCH_Sensor_Initialize 2AF2  
                           ??_MTOUCH_Sensor_Calibrate 0015                                      ?_PWM4_Initialize 0001  
                                    ?_TMR2_Initialize 0001                          ??i2_MTOUCH_Sensor_wasSampled 0001  
                            calculate_position@slider 0030                       __end_of_Button_Deviation_Update 1BB4  
                         PWM4_LoadDutyValue@dutyValue 0015                                        _Button_Service 1DEC  
                          ?_Button_State_Initializing 0028                                  Button_Service@button 0031  
                             ??_positional_hysteresis 0024                                 ??_Sensor_isCalibrated 0016  
                      __end_of_Button_Baseline_Update 1FDE                               ?_calculate_contact_size 0021  
                    __end_of_INT2_SetInterruptHandler 2D36                              _MTOUCH_Button_Initialize 2672  
                     ??_TMR2_OverflowCallbackRegister 0018                              ??_Slider_DefaultCallback 0015  
                                           ?_GetEvent 0001                                  __end_of_medianFilter 1C34  
                             _Button_State_NotPressed 1458                             __end_of_SYSTEM_Initialize 2B70  
                                   _lowpowerActivated 0042                      MTOUCH_Sensor_isCalibrated@sensor 0015  
                              ??_Sensor_Sampled_Reset 0016                              _ADCC_ThresholdISR_mTouch 1A24  
                                          __pbssBANK0 0060                                            __pbssBANK1 0100  
                          ?i2_MTOUCH_Sensor_isEnabled 0001                               _MTOUCH_Sensor_isEnabled 2C24  
                  calculate_raw_position@deadband_set 00E7                            __end_of_mtouch_button_init 0F56  
                              __end_of_Slider_Service 12F8                                ??_Sensor_setCalibrated 0002  
                 calculate_position@filtered_position 00F2                               Sensor_SetTrisBit@sensor 0018  
                             __end_of_ADCC_Initialize 27CA                        MTOUCH_Sensor_wasSampled@sensor 0015  
                    i2MTOUCH_Sensor_wasSampled@sensor 0001                                               ?_divide 0015  
                                             _ADFLTRH 0F6E                                               _ADFLTRL 0F6D  
                              __end_of_Button_Service 1E82                                               ?_memcpy 0015  
                              _calculate_raw_position 0F8A                                               _ADPREVH 0F5D  
                                             _ADPREVL 0F5C                   __end_of_MTOUCH_Button_InitializeAll 29AE  
                         _MTOUCH_Button_InitializeAll 2986                  __end_of_ADCC_SetADTIInterruptHandler 2D04  
                        _ADCC_SetADTIInterruptHandler 2CF6                                               _ADSTPTH 0F64  
                                             _ADSTPTL 0F63                   __end_of_MTOUCH_Sensor_InitializeAll 2A22  
                         _MTOUCH_Sensor_InitializeAll 29FC                             ??_MTOUCH_Sensor_SampleAll 0021  
                     __end_of_Sensor_RawSample_Update 2828                             ?_MTOUCH_Sensor_wasSampled 0001  
                      __end_of_calculate_contact_size 2436                             Sensor_isCalibrated@sensor 0015  
                          ??_INT1_SetInterruptHandler 0018                     __end_of_Button_State_Initializing 1FB2  
                            _MTOUCH_Button_ServiceAll 2BBE                            calculate_raw_position@size 00ED  
                                             _OSCCON1 0ED3                                               _OSCCON3 0ED5  
                                          ??_GetEvent 0015                                               _OSCTUNE 0ED8  
                                             _PWM4DCH 0FA0                                               _PWM4DCL 0F9F  
                                             _PWM4CON 0FA1                                               _SLRCONA 0F09  
                                             _SLRCONB 0F11                                               _SLRCONC 0F19  
                                             _SLRCOND 0F1E                                               _SLRCONE 0F26  
                        __end_of_Button_State_Pressed 1F0E                          ?_MTOUCH_Button_Deviation_Get 0001  
                          i2Sensor_SetTrisBit@TrisBit 0001                      Button_Baseline_Initialize@button 0018  
                        __end_of_ProcessButtonRelease 2900                                          ?_ClearButton 0001  
                     ??i2_Sensor_isCalibratingAcqTime 0002                               ??i2_Sensor_isCalibrated 0002  
                   __end_ofi2_MTOUCH_Sensor_isEnabled 2C60                 positional_hysteresis@current_position 0022  
                         ?_MTOUCH_Slider_Position_Get 0015                             ?_INT0_SetInterruptHandler 0015  
                             ?_Sensor_setSamplePeriod 0001                             ??_MTOUCH_Button_isPressed 0015  
                                          _freq_index 0041                                       ?_Slider_Service 0001  
                                             __Hparam 0000                                     _Sensor_SetTrisBit 250A  
                                             __Lparam 0000      MTOUCH_Slider_SetPositionChangedCallback@callback 0015  
                                  ?_Sensor_SetTrisBit 0015      __end_of_MTOUCH_Slider_SetPositionChangedCallback 2CF6  
          ??_MTOUCH_Slider_SetPositionChangedCallback 0018             ?_MTOUCH_Slider_SetPositionChangedCallback 0015  
            _MTOUCH_Slider_SetPositionChangedCallback 2CE8                        MTOUCH_Button_Initialize@button 0017  
                                        __psmallconst 0F00                                       ?_Button_Service 0001  
                                             __pcinit 2624                                               __ramtop 0F00  
                                     _scanInterrupted 0043                                               __ptext0 283C  
                                             __ptext1 2B54                                               __ptext2 2A6A  
                                             __ptext3 2CDA                                               __ptext4 2C60  
                                             __ptext5 20DE                                               __ptext6 2900  
                                             __ptext7 2D34                                               __ptext8 2D36  
                                             __ptext9 2D38                           Button_Reading_Update@button 001C  
                                 ??_Sensor_SetTrisBit 0016                         ?_ADCC_SetADTIInterruptHandler 0015  
                                             _keyInfo 008D                              _MTOUCH_Sensor_Initialize 2AD0  
                         __end_of_ProcessSliderChange 2BA6                                             _T2CONbits 0FBC  
                          __end_of_calculate_position 233E                             ??_Button_State_NotPressed 002A  
                            ??_PIN_MANAGER_Initialize 0015                               Slider_Initialize@slider 0016  
                       __end_of_Button_Reading_Update 2B4A                     MTOUCH_Sensor_InitializeAll@sensor 001E  
                           ??_MTOUCH_Sensor_isEnabled 0015         TMR2_OverflowCallbackRegister@InterruptHandler 0015  
                        Button_Check_AKS_Block@button 001D                        MTOUCH_Sensor_Initialize@sensor 0016  
                       Sensor_scheduleNextScan@sensor 001F                       i2Sensor_scheduleNextScan@sensor 000B  
                                end_of_initialization 2668                              Slider_Service@sliderName 015C  
                       ??_MTOUCH_Button_Deviation_Get 0015                              _INT2_SetInterruptHandler 2D34  
                            Slider_FindRight@ref_node 001E                               ?_Button_DefaultCallback 0001  
                                             memcpy@d 001B                                               memcpy@n 0018  
                                             memcpy@s 001D                        __end_of_Sensor_setSamplePeriod 2BBE  
                          __end_of_mtouch_sensor_init 0F88                              ?_Sensor_FrequencyHopping 0001  
                                        ??_ClearEvent 0015                             __end_of_Sensor_SetTrisBit 256C  
                      calculate_position@raw_position 00F4                                   GetMotorSpeed@adcVal 0015  
                             ?_Sensor_DefaultCallback 0001                          calculate_raw_position@slider 0029  
                       positional_hysteresis@distance 002D                          ??_MTOUCH_Sensor_isCalibrated 0015  
                          ??_MTOUCH_Slider_ServiceAll 0032                                   GetMotorSpeed@retVal 0017  
                 __end_of_MTOUCH_Sensor_RawSample_Get 2A46                           _MTOUCH_Sensor_RawSample_Get 2A22  
                        calculate_contact_size@slider 0021                                            _resol_bits 004A  
                                             postdec1 0FE5                                               postdec2 0FDD  
                                             postinc0 0FEE                                               postinc1 0FE6  
                                             postinc2 0FDE                                            _motorState 0033  
                          ?i2_Sensor_scheduleNextScan 0001                               _Sensor_scheduleNextScan 1578  
                                 _mtouch_request_init 0048                                      ?_ADCC_Initialize 0001  
                  __end_ofi2_MTOUCH_Sensor_wasSampled 2C4C                            i2_MTOUCH_Sensor_wasSampled 2C38  
                                           _TMR2_Stop 0000                         positional_hysteresis@polarity 002C  
                                  __end_of_ClearEvent 2D30                         Button_Deviation_Update@button 0015  
                                           _TRISAbits 0F87                                             _TRISBbits 0F88  
                                           _TRISDbits 0F8A                         MTOUCH_Sensor_isEnabled@sensor 0015  
                     i2MTOUCH_Sensor_isEnabled@sensor 0001                            MTOUCH_Sensor_Enable@sensor 0015  
                                     _Slider_FindLeft 205A                                   _callback_notPressed 00D2  
                    __end_of_MTOUCH_Sensor_isSampling 2D24                        __end_of_Button_DefaultCallback 2D42  
                         __end_ofi2_Sensor_SetTrisBit 25CE                     Slider_Service@valid_contact_found 0156  
                                   ?_Slider_FindRight 0016                                    get_difference@diff 001F  
                          Sensor_setCalibrated@sensor 0001                        __end_of_Sensor_DefaultCallback 2D40  
                                  ??_Slider_FindRight 0018             calculate_raw_position@interpolation_scale 00E9  
                                  medianFilter@sensor 001B                        moving_average_filter@dist_temp 002A  
               __end_ofi2_Sensor_isCalibratingAcqTime 0000                         i2_Sensor_isCalibratingAcqTime 0000  
                              _Slider_DefaultCallback 2D3C                                             _GetButton 2D28  
                                        _medianFilter 1BBE                          __end_of_INTERRUPT_Initialize 292E  
                                _Button_State_Pressed 1E8E                          _INT0_DefaultInterruptHandler 0000  
               __end_of_MTOUCH_Sensor_ADCC_Initialize 2782                         _MTOUCH_Sensor_ADCC_Initialize 2750  
                   __end_ofi2_Sensor_scheduleNextScan 1416                            ??_MTOUCH_Button_Initialize 0016  
                                _ProcessButtonRelease 28D0           MTOUCH_Button_SetNotPressedCallback@callback 0015  
                     ??_MTOUCH_Sensor_Scan_Initialize 0018                                        __end_of_divide 21DC  
                               _moving_average_filter 1C82                                    _Button_Tick_helper 27CA  
                                      __end_of_memcpy 2750                                   MTOUCH_Button_Tick@i 0019  
                          ??_ADCC_ThresholdISR_mTouch 000F                           ??_Button_State_Initializing 002A  
                               _MTOUCH_Sensor_Service 0000                                   start_initialization 2624  
                             _MTOUCH_Service_Mainloop 28A0                                    _MTOUCH_Button_Tick 2B14  
                     ??_Button_Unscaled_Deviation_Get 0017                                   ?_Button_Tick_helper 0015  
                                         __end_of_abs 29D6                         __end_of_positional_hysteresis 19F6  
                     __end_of_Sensor_FrequencyHopping 2D20                           ??i2_MTOUCH_Sensor_isEnabled 0001  
                                 ?_MTOUCH_Button_Tick 0001                       Button_State_Initializing@button 0028  
                            ??_Button_Check_AKS_Block 001F                               medianFilter@bufferIndex 0088  
                    _wheel_sensor_middle_channel_zero 0046                      __end_of_MTOUCH_Sensor_wasSampled 2C10  
                           ??_Sensor_scheduleNextScan 0019                                  ??_Button_Tick_helper 0017  
                        __end_of_MTOUCH_Sensor_Enable 2C96                       get_difference@previous_position 0016  
                             ?_calculate_raw_position 0029                                            ?_GetButton 0001  
                               ?_Button_State_Pressed 0028                                           _CCPTMRSbits 0FAD  
                                            ??_divide 001A                                 ?_ProcessButtonRelease 0001  
                          ??_MTOUCH_Button_ServiceAll 0033                                           __pdataBANK0 00C3  
                                            ??_memcpy 001A                            ProcessButtonRelease@button 0017  
                         __end_of_Sensor_isCalibrated 0000                          ??_Button_Baseline_Initialize 001A  
                              Slider_FindRight@slider 0016                                  ??_MTOUCH_Button_Tick 0019  
                                  _mtouch_button_init 0F01                            Sensor_Sampled_Reset@sensor 0015  
                             __end_of_Slider_FindLeft 20D4                          ?_Sensor_isCalibratingAcqTime 0015  
                                         __pbssCOMRAM 0033                      __end_of_INT0_SetInterruptHandler 2D3A  
                                       _sampling_flag 0044                                         __pcstackBANK0 00E6  
                                       __pcstackBANK1 0155              __end_of_MTOUCH_Sensor_isSamplingComplete 295C  
                  ??_MTOUCH_Sensor_isSamplingComplete 0020                     ?_MTOUCH_Sensor_isSamplingComplete 0001  
                    _MTOUCH_Sensor_isSamplingComplete 292E                               Slider_FindLeft@ref_node 0019  
                            Sensor_SetTrisBit@TrisBit 0015                        MTOUCH_Button_ServiceAll@button 00E6  
                                    ??_Slider_Service 00F6                                         _GetMotorSpeed 168A  
                             _Button_Deviation_Update 1AF4                                 _TMR2_OverflowCallback 00FA  
                       __end_ofi2_Sensor_isCalibrated 0000                             _Button_State_Initializing 1F2E  
                            _MTOUCH_Sensor_isSampling 2D20                    __end_of_MTOUCH_Sensor_isCalibrated 2C24  
                          _MTOUCH_Sensor_isCalibrated 2C10                                             __pnvBANK0 00FA  
                                   _Sensor_setSampled 0000                        __end_of_calculate_raw_position 112C  
                               Slider_FindLeft@slider 0016                                         ??_interpolate 0023  
                              _PIN_MANAGER_Initialize 20DE                                      ??_Button_Service 002F  
                            ?_MTOUCH_Sensor_Calibrate 0001                                    ?_Sensor_setSampled 0001  
                       Slider_FindMiddle@maximumDelta 001E                                             __pintcode 0008  
                  Button_Reading_Update_Helper@button 0018                            ??_MTOUCH_Sensor_Initialize 0016  
              positional_hysteresis@previous_position 0027                                             __ptext100 2C38  
                                           __ptext101 2C4C                                             __ptext102 29AE  
                                           __ptext103 0000                                             __ptext104 2CA8  
                           ApplicationTask@motorSpeed 001B                                ?_moving_average_filter 0021  
                           i2_MTOUCH_Sensor_isEnabled 2C4C                          ??_INTERRUPT_InterruptManager 000F  
                                 ??_Sensor_setSampled 0002                             ??_MTOUCH_Service_Mainloop 0033  
                    get_difference@rollover_threshold 001D                                ?_MTOUCH_Sensor_Service 0001  
                                         __smallconst 0F00                            ??_INT2_SetInterruptHandler 0018  
                      ?_MTOUCH_Sensor_ADCC_Initialize 0001          __end_of_MTOUCH_Sensor_postAcquisitionProcess 2986  
              ??_MTOUCH_Sensor_postAcquisitionProcess 001F                 ?_MTOUCH_Sensor_postAcquisitionProcess 0001  
                _MTOUCH_Sensor_postAcquisitionProcess 295C                         ??_Sensor_isCalibratingAcqTime 0016  
                                       ??_MTOUCH_Tick 001A                             i2Sensor_SetTrisBit@sensor 0004  
                                            _T2CLKCON 0FBE                                  _INTERRUPT_Initialize 2900  
Button_Check_AKS_Block@surplus_deviation_check_button 0024                                    Slider_FindMiddle@i 0020  
                                      ?_GetMotorSpeed 0015                 __end_of_Button_Unscaled_Deviation_Get 2704  
                       _Button_Unscaled_Deviation_Get 26C0                                      _CLOCK_Initialize 2C72  
                  Button_Check_AKS_Block@check_button 0026                             __end_of_Sensor_setSampled 0000  
                                  _calculate_position 22D0                          ?_MTOUCH_Slider_InitializeAll 0001  
                     positional_hysteresis@hyst_width 002B                                              _LATBbits 0F83  
                                            _LATCbits 0F84                                              _LATDbits 0F85  
                                   ??_ApplicationTask 0019                               _Sensor_RawSample_Update 2804  
                           ?_INT1_SetInterruptHandler 0015                                              _PIE0bits 0EBD  
                                            _PIE1bits 0EBE                                              i2u302_40 0014  
                                            i2u302_41 0010                                              i2u302_46 0016  
                                            i2u303_40 0014                                              i2u303_41 0010  
                                            i2u303_46 0016                                              i2u351_40 1354  
                                            _PIR0bits 0EC5                                              _PIR1bits 0EC6  
                                            i2u355_45 13F6                                              i2u356_45 1410  
                                            i2u356_46 1412                                              _PIR4bits 0EC9  
                                            i2u295_45 2578                                              i2u295_46 257A  
                                            i2u296_45 2584                                              i2u296_46 2586  
                                            i2u385_40 0014                                              i2u385_41 0012  
                                            i2u297_45 2590                                              i2u297_46 2592  
                                            i2u386_40 003A                                              i2u386_41 0038  
                                            i2u298_45 259C                                              i2u298_46 259E  
                                            i2u387_40 0080                                              i2u387_41 007E  
                                            i2u299_45 25A8                                              i2u299_46 25AA  
                                            i2u388_40 00AC                                              i2u388_41 00AA  
                                            i2u389_40 00CA                                              i2u389_41 00C8  
                              ??_Button_State_Pressed 002A                                   ?_calculate_position 0030  
                                         ??_GetButton 0015                __end_of_MTOUCH_Sensor_Sampled_ResetAll 29FC  
                      _MTOUCH_Sensor_Sampled_ResetAll 29D6                                   interpolate@num_bits 0022  
                              ??_ProcessButtonRelease 0015                              ?_MTOUCH_Sensor_SampleAll 0001  
                                   ??_PIN_MANAGER_IOC 0001                                    _mtouch_sensor_init 0F56  
                         ??i2_Sensor_scheduleNextScan 0005                           ?i2_MTOUCH_Sensor_wasSampled 0001  
                            _MTOUCH_Sensor_wasSampled 2BFC                                    _mtouch_time_toScan 0049  
                            ??_Button_Baseline_Update 0017                                   __end_of_interpolate 1DC8  
                        __end_of_ADCC_DefaultADTI_ISR 2D46                                            _ADCON0bits 0F5B  
               Button_Check_AKS_Block@currentAKSGroup 0023                                      ?_Slider_FindLeft 0016  
                          __end_of_MTOUCH_needReburst 2D3C                                  ??_calculate_position 0032  
                                            _GetEvent 2D12                moving_average_filter@previous_position 0028  
                                _MTOUCH_Sensor_Enable 2C84                             _callback_position_changed 00CF  
                                           copy_data0 2638                              Button_Tick_helper@button 0015  
                           ??_Button_Deviation_Update 0017                                 ?_INTERRUPT_Initialize 0001  
                               _Button_Reading_Update 2B34                                        _get_difference 2348  
                            _INT0_SetInterruptHandler 2D38                              ?_MTOUCH_Button_isPressed 0001  
                                   ??_TMR2_Initialize 0018                                     ??_PWM4_Initialize 0015  
                                 __end_of_MTOUCH_Tick 2D1C                                     _MTOUCH_Initialize 2BE8  
                     __end_of_MTOUCH_Sensor_Calibrate 2CA8                               ?_Slider_DefaultCallback 0001  
                                         _left_signal 003B                         ??_MTOUCH_Slider_InitializeAll 0017  
                                  ?_MTOUCH_Initialize 0001                                              __Hrparam 0000  
                          __end_of_PWM4_LoadDutyValue 28A0                                             memcpy@tmp 001A  
                                            __Lrparam 0000                               Slider_FindMiddle@slider 0016  
                                        _sample_delay 0040                            Slider_Service@group_status 0155  
                                         _middle_node 0047                                     divide@denominator 0017  
            MTOUCH_Sensor_postAcquisitionProcess@name 001F                              ??_calculate_contact_size 0023  
                  __end_of_Button_Baseline_Initialize 2616                            _Button_Baseline_Initialize 25CE  
                                 ??_MTOUCH_Initialize 001F                              ?_Button_State_NotPressed 0028  
                              _Button_Check_AKS_Block 1870                           i2Sensor_isCalibrated@sensor 0001  
                                  Button_Service@name 0030                              ?_MTOUCH_Sensor_isEnabled 0001  
                           ?_MTOUCH_Slider_ServiceAll 0001                   __end_of_MTOUCH_Button_Deviation_Get 2B8C  
                         _MTOUCH_Button_Deviation_Get 2B70                                __end_of_get_difference 23C0  
                               ?_MTOUCH_Sensor_Enable 0001                                              __ptext10 2C72  
                                            __ptext11 2790                                              __ptext20 22D0  
                                            __ptext12 2CE8                                              __ptext21 194E  
                                            __ptext13 28A0                                              __ptext30 205A  
                                            __ptext22 1C82                                              __ptext14 2D3A  
                                            __ptext31 2B70                                              __ptext23 2348  
                                            __ptext15 2D18                                              __ptext40 2804  
                                            __ptext32 2B8C                                              __ptext24 0F8A  
                                            __ptext16 2B14                                              __ptext41 1BBE  
                                            __ptext33 2D3C                                              __ptext25 1D3A  
                                            __ptext17 27CA                                              __ptext50 2CCA  
                                            __ptext42 2D3E                                              __ptext34 2A8C  
                                            __ptext26 215E                                              __ptext18 2CBA  
                                            __ptext51 24A4                                              __ptext43 292E  
                                            __ptext35 2AAE                                              __ptext27 23C0  
                                            __ptext19 1170                                              __ptext60 2986  
                                            __ptext52 2D24                                              __ptext44 1578  
                                            __ptext36 2BD4                                              __ptext28 2436  
                                            __ptext61 270E                                              __ptext53 2750  
                                            __ptext45 0000                                              __ptext37 2D1C  
                                            __ptext29 21DC                                              __ptext70 28D0  
                                            __ptext62 2BBE                                              __ptext54 2CF6  
                                            __ptext46 0000                                              __ptext38 2BA6  
                                            __ptext71 2672                                              __ptext63 1DEC  
                                            __ptext55 29D6                                              __ptext47 250A  
                                            __ptext39 295C                                              __ptext80 2A22  
                                            __ptext72 2C96                                              __ptext64 2BFC  
                                            __ptext56 29FC                                              __ptext48 2D20  
                                            __ptext81 1AF4                                              __ptext73 1870  
                                            __ptext65 2C10                                              __ptext57 2AD0  
                                            __ptext49 2BE8                                              __ptext82 2D04  
                                            __ptext74 2C24                                              __ptext66 1458  
                                            __ptext58 0000                                              __ptext91 2D42  
                                            __ptext83 1784                                              __ptext75 26C0  
                                            __ptext67 1F2E                                              __ptext59 2C84  
                                            __ptext92 2AF2                                              __ptext84 286E  
                                            __ptext76 1FCA                                              __ptext68 1E8E  
                                            __ptext93 2D44                                              __ptext85 168A  
                                            __ptext77 25CE                                              __ptext69 2D40  
                                            __ptext94 1A24                                              __ptext86 2D12  
                                            __ptext78 2B34                                              __ptext95 0000  
                                            __ptext87 2D28                                              __ptext79 2256  
                                            __ptext96 1322                                              __ptext88 2D2C  
                                            __ptext97 0000                                              __ptext89 2D30  
                                            __ptext98 0000                                              __ptext99 256C  
                                     ??_GetMotorSpeed 0017                          Slider_DefaultCallback@slider 0001  
                           i2_Sensor_scheduleNextScan 1322                                          _right_signal 0039  
                           __end_of_MTOUCH_Initialize 2BFC                             ??_Sensor_RawSample_Update 001D  
                                            _freq_hop 00CC                        __end_of_Slider_DefaultCallback 2D3E  
                                   _currentScanSensor 0045                                              _buttonNo 003F  
               __end_of_TMR2_OverflowCallbackRegister 2CE8                         _TMR2_OverflowCallbackRegister 2CDA  
                     __end_of_MTOUCH_Sensor_SampleAll 2BE8                                           _interpolate 1D3A  
                              Slider_Service@position 0157                                              isa$xinst 0000  
                                            int$flags 004B                    __end_of_INTERRUPT_InterruptManager 0058  
                          _INTERRUPT_InterruptManager 0008                          _INT1_DefaultInterruptHandler 0000  
                        ?_MTOUCH_Button_InitializeAll 0001                          ?_MTOUCH_Sensor_InitializeAll 0001  
 Button_Check_AKS_Block@surplus_deviation_this_button 0021                                         _mtouch_button 0100  
                                          _INTCONbits 0FF2                                         _mtouch_slider 00D5  
                                       _mtouch_sensor 0091                                              memcpy@d1 0015  
                                            memcpy@s1 0017                       __end_of_MTOUCH_Button_isPressed 2AD0  
                            ??_Sensor_setSamplePeriod 0015                            ??_MTOUCH_Sensor_isSampling 0015  
                          calculate_position@position 00F0                                ??_INTERRUPT_Initialize 0018  
                                     ?_get_difference 0015                                           _MTOUCH_Tick 2D18  
                              ?_Button_Reading_Update 001C                                   _TMR2_PeriodCountSet 0000  
                         Slider_Initialize@sliderName 0015                      Button_Deviation_Update@deviation 0021  
                        MTOUCH_Button_Initialize@name 0016                                         ??_ClearButton 0015  
                               _positional_hysteresis 194E                                              intlevel2 0000  
                           ?_MTOUCH_Button_Initialize 0001                               ?_PIN_MANAGER_Initialize 0001  
                           ?_ADCC_ThresholdISR_mTouch 0001                                  _ADCC_DefaultADTI_ISR 2D44  
                        ??_MTOUCH_Slider_Position_Get 0017                   Button_Unscaled_Deviation_Get@button 0015  
                         ?_MTOUCH_Sensor_isCalibrated 0001                          Sensor_scheduleNextScan@state 001D  
                               Slider_Service@segment 015A                 moving_average_filter@current_position 0022  
                             ??_moving_average_filter 0024                       __end_of_Button_State_NotPressed 154C  
                             _Sensor_FrequencyHopping 2D1C                               ??_MTOUCH_Sensor_Service 000C  
                                         _resol_value 003D                          __end_of_Sensor_Sampled_Reset 0000  
                     __end_of_MTOUCH_Sensor_isEnabled 2C38                              __end_of_CLOCK_Initialize 2C84  
                     Sensor_scheduleNextScan@skipScan 001E                     i2Sensor_scheduleNextScan@skipScan 000A  
                       ??_MTOUCH_Button_InitializeAll 001E                              ??_Button_DefaultCallback 0015  
                       ??_MTOUCH_Sensor_InitializeAll 001E                       MTOUCH_Button_Deviation_Get@name 0015  
                              ??_MTOUCH_Sensor_Enable 0015                      __end_of_INT1_SetInterruptHandler 2D38  
                                Slider_Service@slider 015D                     Sensor_isCalibratingAcqTime@sensor 0015  
                 i2Sensor_isCalibratingAcqTime@sensor 0001                                       _ApplicationTask 1784  
                            ??_Sensor_DefaultCallback 0015                         moving_average_filter@distance 002C  
                                Slider_Service@status 0159                          __end_of_Sensor_setCalibrated 2CBA  
                __end_of_Button_Reading_Update_Helper 22B6                          _Button_Reading_Update_Helper 2256  
                                          _TMR2_Tasks 0000                        calculate_raw_position@deadband 00EA  
                                          _TMR2_Start 0000                             ?_MTOUCH_Button_ServiceAll 0001  
                       Button_State_NotPressed@button 0028                        ??_ADCC_SetADTIInterruptHandler 0018  
                      __end_of_PIN_MANAGER_Initialize 215E                                     ??_ADCC_Initialize 0018  
                              _Button_Baseline_Update 1FCA                              ?_Sensor_scheduleNextScan 0001  
                               ?_ADCC_DefaultADTI_ISR 0001                                       _PIN_MANAGER_IOC 2D42  
                     ??_MTOUCH_Sensor_ADCC_Initialize 0018                           MTOUCH_Button_isPressed@name 0016  
                          ??_MTOUCH_Sensor_wasSampled 0015                                   __end_of_ClearButton 2D34  
                               i2_Sensor_isCalibrated 0000  
